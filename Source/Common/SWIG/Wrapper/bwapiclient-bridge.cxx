/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_bwapiclient(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_bwapiclient(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_bwapiclient(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <set>
#include <algorithm>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include "BWAPI.h"
#include "BWAPI/Client.h"

using namespace BWAPI;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_id_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_id_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_player_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->player = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_player_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->player);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_type_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_type_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_source_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_source_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->source);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_positionX_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->positionX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_positionX_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->positionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_positionY_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->positionY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_positionY_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->positionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_angle_set(void * jarg1, double jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BulletData_angle_get(void * jarg1) {
  double jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  double result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (double) ((arg1)->angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_velocityX_set(void * jarg1, double jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocityX = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BulletData_velocityX_get(void * jarg1) {
  double jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  double result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (double) ((arg1)->velocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_velocityY_set(void * jarg1, double jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocityY = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BulletData_velocityY_get(void * jarg1) {
  double jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  double result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (double) ((arg1)->velocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_target_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_target_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->target);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_targetPositionX_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->targetPositionX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_targetPositionX_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->targetPositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_targetPositionY_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->targetPositionY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_targetPositionY_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->targetPositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_removeTimer_set(void * jarg1, int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->removeTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BulletData_removeTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  int result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (int) ((arg1)->removeTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_exists_set(void * jarg1, unsigned int jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->exists = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletData_exists_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (bool) ((arg1)->exists);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletData_isVisible_set(void * jarg1, void * jarg2) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isVisible;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletData_isVisible_get(void * jarg1) {
  void * jresult ;
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletData() {
  void * jresult ;
  BWAPI::BulletData *result = 0 ;
  
  result = (BWAPI::BulletData *)new BWAPI::BulletData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BulletData(void * jarg1) {
  BWAPI::BulletData *arg1 = (BWAPI::BulletData *) 0 ;
  
  arg1 = (BWAPI::BulletData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Command__SWIG_0() {
  void * jresult ;
  BWAPIC::Command *result = 0 ;
  
  result = (BWAPIC::Command *)new BWAPIC::Command();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Command__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BWAPIC::CommandType::Enum arg1 ;
  int arg2 ;
  int arg3 ;
  BWAPIC::Command *result = 0 ;
  
  arg1 = (BWAPIC::CommandType::Enum)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (BWAPIC::Command *)new BWAPIC::Command(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Command__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  BWAPIC::CommandType::Enum arg1 ;
  int arg2 ;
  BWAPIC::Command *result = 0 ;
  
  arg1 = (BWAPIC::CommandType::Enum)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPIC::Command *)new BWAPIC::Command(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Command__SWIG_3(int jarg1) {
  void * jresult ;
  BWAPIC::CommandType::Enum arg1 ;
  BWAPIC::Command *result = 0 ;
  
  arg1 = (BWAPIC::CommandType::Enum)jarg1; 
  result = (BWAPIC::Command *)new BWAPIC::Command(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Command_type_set(void * jarg1, int jarg2) {
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  BWAPIC::CommandType::Enum arg2 ;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  arg2 = (BWAPIC::CommandType::Enum)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Command_type_get(void * jarg1) {
  int jresult ;
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  BWAPIC::CommandType::Enum result;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  result = (BWAPIC::CommandType::Enum) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Command_value1_set(void * jarg1, int jarg2) {
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Command_value1_get(void * jarg1) {
  int jresult ;
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  result = (int) ((arg1)->value1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Command_value2_set(void * jarg1, int jarg2) {
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Command_value2_get(void * jarg1) {
  int jresult ;
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  result = (int) ((arg1)->value2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Command(void * jarg1) {
  BWAPIC::Command *arg1 = (BWAPIC::Command *) 0 ;
  
  arg1 = (BWAPIC::Command *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_Event_type_set(void * jarg1, int jarg2) {
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  BWAPI::EventType::Enum arg2 ;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  arg2 = (BWAPI::EventType::Enum)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_Event_type_get(void * jarg1) {
  int jresult ;
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  BWAPI::EventType::Enum result;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  result = (BWAPI::EventType::Enum) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_Event_v1_set(void * jarg1, int jarg2) {
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->v1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_Event_v1_get(void * jarg1) {
  int jresult ;
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  result = (int) ((arg1)->v1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_Event_v2_set(void * jarg1, int jarg2) {
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->v2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_Event_v2_get(void * jarg1) {
  int jresult ;
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  result = (int) ((arg1)->v2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BWAPIC_Event() {
  void * jresult ;
  BWAPIC::Event *result = 0 ;
  
  result = (BWAPIC::Event *)new BWAPIC::Event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BWAPIC_Event(void * jarg1) {
  BWAPIC::Event *arg1 = (BWAPIC::Event *) 0 ;
  
  arg1 = (BWAPIC::Event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForceData_name_set(void * jarg1, char * jarg2) {
  BWAPI::ForceData *arg1 = (BWAPI::ForceData *) 0 ;
  char *arg2 ;
  
  arg1 = (BWAPI::ForceData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 32-1);
      arg1->name[32-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ForceData_name_get(void * jarg1) {
  char * jresult ;
  BWAPI::ForceData *arg1 = (BWAPI::ForceData *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::ForceData *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForceData() {
  void * jresult ;
  BWAPI::ForceData *result = 0 ;
  
  result = (BWAPI::ForceData *)new BWAPI::ForceData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForceData(void * jarg1) {
  BWAPI::ForceData *arg1 = (BWAPI::ForceData *) 0 ;
  
  arg1 = (BWAPI::ForceData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForceImpl(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::ForceImpl *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::ForceImpl *)new BWAPI::ForceImpl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ForceImpl_getID(void * jarg1) {
  int jresult ;
  BWAPI::ForceImpl *arg1 = (BWAPI::ForceImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::ForceImpl *)jarg1; 
  result = (int)((BWAPI::ForceImpl const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ForceImpl_getName(void * jarg1) {
  char * jresult ;
  BWAPI::ForceImpl *arg1 = (BWAPI::ForceImpl *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::ForceImpl *)jarg1; 
  result = ((BWAPI::ForceImpl const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForceImpl_getPlayers(void * jarg1) {
  void * jresult ;
  BWAPI::ForceImpl *arg1 = (BWAPI::ForceImpl *) 0 ;
  std::set< BWAPI::Player * > result;
  
  arg1 = (BWAPI::ForceImpl *)jarg1; 
  result = ((BWAPI::ForceImpl const *)arg1)->getPlayers();
  jresult = new std::set< BWAPI::Player * >((const std::set< BWAPI::Player * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForceImpl(void * jarg1) {
  BWAPI::ForceImpl *arg1 = (BWAPI::ForceImpl *) 0 ;
  
  arg1 = (BWAPI::ForceImpl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_clearanceLevel_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->clearanceLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_clearanceLevel_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->clearanceLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_id_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_id_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_player_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->player = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_player_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->player);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_type_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_type_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_positionX_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->positionX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_positionX_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->positionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_positionY_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->positionY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_positionY_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->positionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_angle_set(void * jarg1, double jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitData_angle_get(void * jarg1) {
  double jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (double) ((arg1)->angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_velocityX_set(void * jarg1, double jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocityX = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitData_velocityX_get(void * jarg1) {
  double jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (double) ((arg1)->velocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_velocityY_set(void * jarg1, double jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocityY = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitData_velocityY_get(void * jarg1) {
  double jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (double) ((arg1)->velocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_hitPoints_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hitPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_hitPoints_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->hitPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_lastHitPoints_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lastHitPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_lastHitPoints_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->lastHitPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_shields_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->shields = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_shields_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->shields);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_energy_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->energy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_energy_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->energy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_resources_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->resources = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_resources_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->resources);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_resourceGroup_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->resourceGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_resourceGroup_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->resourceGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_killCount_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->killCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_killCount_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->killCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_acidSporeCount_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->acidSporeCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_acidSporeCount_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->acidSporeCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_scarabCount_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scarabCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_scarabCount_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->scarabCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_spiderMineCount_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spiderMineCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_spiderMineCount_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->spiderMineCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_groundWeaponCooldown_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->groundWeaponCooldown = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_groundWeaponCooldown_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->groundWeaponCooldown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_airWeaponCooldown_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->airWeaponCooldown = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_airWeaponCooldown_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->airWeaponCooldown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_spellCooldown_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spellCooldown = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_spellCooldown_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->spellCooldown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_defenseMatrixPoints_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->defenseMatrixPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_defenseMatrixPoints_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->defenseMatrixPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_defenseMatrixTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->defenseMatrixTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_defenseMatrixTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->defenseMatrixTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_ensnareTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ensnareTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_ensnareTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->ensnareTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_irradiateTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->irradiateTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_irradiateTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->irradiateTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_lockdownTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lockdownTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_lockdownTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->lockdownTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_maelstromTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maelstromTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_maelstromTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->maelstromTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_orderTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->orderTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_orderTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->orderTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_plagueTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->plagueTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_plagueTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->plagueTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_removeTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->removeTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_removeTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->removeTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_stasisTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stasisTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_stasisTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->stasisTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_stimTimer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stimTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_stimTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->stimTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_buildType_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->buildType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_buildType_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->buildType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_trainingQueueCount_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trainingQueueCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_trainingQueueCount_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->trainingQueueCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_trainingQueue_set(void * jarg1, void * jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->trainingQueue;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitData_trainingQueue_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int *)(int *) ((arg1)->trainingQueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_tech_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tech = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_tech_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->tech);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_upgrade_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upgrade = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_upgrade_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->upgrade);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_remainingBuildTime_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remainingBuildTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_remainingBuildTime_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->remainingBuildTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_remainingTrainTime_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remainingTrainTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_remainingTrainTime_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->remainingTrainTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_remainingResearchTime_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remainingResearchTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_remainingResearchTime_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->remainingResearchTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_remainingUpgradeTime_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remainingUpgradeTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_remainingUpgradeTime_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->remainingUpgradeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_buildUnit_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->buildUnit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_buildUnit_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->buildUnit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_target_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_target_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->target);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_targetPositionX_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->targetPositionX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_targetPositionX_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->targetPositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_targetPositionY_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->targetPositionY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_targetPositionY_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->targetPositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_order_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_order_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->order);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_orderTarget_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->orderTarget = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_orderTarget_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->orderTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_orderTargetPositionX_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->orderTargetPositionX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_orderTargetPositionX_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->orderTargetPositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_orderTargetPositionY_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->orderTargetPositionY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_orderTargetPositionY_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->orderTargetPositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_secondaryOrder_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->secondaryOrder = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_secondaryOrder_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->secondaryOrder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_rallyPositionX_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rallyPositionX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_rallyPositionX_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->rallyPositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_rallyPositionY_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rallyPositionY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_rallyPositionY_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->rallyPositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_rallyUnit_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rallyUnit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_rallyUnit_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->rallyUnit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_addon_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->addon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_addon_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->addon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_nydusExit_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nydusExit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_nydusExit_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->nydusExit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_powerUp_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->powerUp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_powerUp_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->powerUp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_transport_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->transport = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_transport_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->transport);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_carrier_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->carrier = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_carrier_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->carrier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_hatchery_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hatchery = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_hatchery_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->hatchery);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_exists_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->exists = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_exists_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->exists);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_hasNuke_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasNuke = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_hasNuke_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->hasNuke);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isAccelerating_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAccelerating = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isAccelerating_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isAccelerating);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isAttacking_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAttacking = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isAttacking_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isAttacking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isAttackFrame_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAttackFrame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isAttackFrame_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isAttackFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isBeingGathered_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBeingGathered = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isBeingGathered_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isBeingGathered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isBlind_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBlind = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isBlind_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isBlind);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isBraking_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBraking = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isBraking_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isBraking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isBurrowed_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBurrowed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isBurrowed_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isBurrowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_carryResourceType_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->carryResourceType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_carryResourceType_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->carryResourceType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isCloaked_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCloaked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isCloaked_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isCloaked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isCompleted_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCompleted = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isCompleted_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isCompleted);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isConstructing_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isConstructing = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isConstructing_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isConstructing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isDetected_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDetected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isDetected_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isDetected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isGathering_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isGathering = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isGathering_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isGathering);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isHallucination_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isHallucination = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isHallucination_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isHallucination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isIdle_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isIdle = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isIdle_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isIdle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isInterruptible_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isInterruptible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isInterruptible_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isInterruptible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isInvincible_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isInvincible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isInvincible_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isInvincible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isLifted_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isLifted = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isLifted_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isLifted);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isMorphing_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMorphing = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isMorphing_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isMorphing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isMoving_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMoving = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isMoving_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isMoving);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isParasited_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isParasited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isParasited_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isParasited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isSelected_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSelected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isSelected_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isSelected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isStartingAttack_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isStartingAttack = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isStartingAttack_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isStartingAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isStuck_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isStuck = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isStuck_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isStuck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isTraining_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTraining = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isTraining_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isTraining);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isUnderStorm_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isUnderStorm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isUnderStorm_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isUnderStorm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isUnderDarkSwarm_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isUnderDarkSwarm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isUnderDarkSwarm_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isUnderDarkSwarm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isUnderDWeb_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isUnderDWeb = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isUnderDWeb_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isUnderDWeb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isUnpowered_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isUnpowered = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_isUnpowered_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->isUnpowered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_isVisible_set(void * jarg1, void * jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isVisible;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitData_isVisible_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_buttonset_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->buttonset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_buttonset_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->buttonset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_lastAttackerPlayer_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lastAttackerPlayer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_lastAttackerPlayer_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->lastAttackerPlayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_recentlyAttacked_set(void * jarg1, unsigned int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->recentlyAttacked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitData_recentlyAttacked_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (bool) ((arg1)->recentlyAttacked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitData_replayID_set(void * jarg1, int jarg2) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->replayID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitData_replayID_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  result = (int) ((arg1)->replayID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitData() {
  void * jresult ;
  BWAPI::UnitData *result = 0 ;
  
  result = (BWAPI::UnitData *)new BWAPI::UnitData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitData(void * jarg1) {
  BWAPI::UnitData *arg1 = (BWAPI::UnitData *) 0 ;
  
  arg1 = (BWAPI::UnitData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitImpl_self_set(void * jarg1, void * jarg2) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitData *arg2 = (BWAPI::UnitData *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::UnitData *)jarg2; 
  if (arg1) (arg1)->self = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_self_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitData *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::UnitData *) ((arg1)->self);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitImpl_connectedUnits_set(void * jarg1, void * jarg2) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > *arg2 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * > *)jarg2; 
  if (arg1) (arg1)->connectedUnits = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_connectedUnits_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *)& ((arg1)->connectedUnits);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitImpl_loadedUnits_set(void * jarg1, void * jarg2) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > *arg2 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * > *)jarg2; 
  if (arg1) (arg1)->loadedUnits = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_loadedUnits_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *)& ((arg1)->loadedUnits);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitImpl_clear(void * jarg1) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitImpl_saveInitialState(void * jarg1) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  (arg1)->saveInitialState();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitImpl(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UnitImpl *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitImpl *)new BWAPI::UnitImpl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getID(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getReplayID(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getReplayID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::UnitImpl const *)arg1)->getPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getPosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitImpl_getAngle(void * jarg1) {
  double jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (double)((BWAPI::UnitImpl const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitImpl_getVelocityX(void * jarg1) {
  double jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (double)((BWAPI::UnitImpl const *)arg1)->getVelocityX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitImpl_getVelocityY(void * jarg1) {
  double jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (double)((BWAPI::UnitImpl const *)arg1)->getVelocityY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getRegion(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Region *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Region *)((BWAPI::UnitImpl const *)arg1)->getRegion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getLeft(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getTop(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getRight(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getBottom(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getBottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getShields(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getShields();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getEnergy(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getEnergy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getResources(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getResources();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getResourceGroup(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getResourceGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getDistance__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getDistance__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_hasPath__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->hasPath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_hasPath__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->hasPath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getLastCommandFrame(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getLastCommandFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getLastCommand(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getLastCommand();
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getLastAttackingPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::UnitImpl const *)arg1)->getLastAttackingPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getInitialType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getInitialType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getInitialPosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getInitialPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getInitialTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getInitialTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getInitialHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getInitialHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getInitialResources(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getInitialResources();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getKillCount(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getKillCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getAcidSporeCount(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getAcidSporeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getInterceptorCount(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getInterceptorCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getScarabCount(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getScarabCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getSpiderMineCount(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getSpiderMineCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getGroundWeaponCooldown(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getGroundWeaponCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getAirWeaponCooldown(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getAirWeaponCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getSpellCooldown(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getSpellCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getDefenseMatrixPoints(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getDefenseMatrixPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getDefenseMatrixTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getDefenseMatrixTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getEnsnareTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getEnsnareTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getIrradiateTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getIrradiateTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getLockdownTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getLockdownTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getMaelstromTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getMaelstromTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getOrderTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getOrderTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getPlagueTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getPlagueTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getRemoveTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getRemoveTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getStasisTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getStasisTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getStimTimer(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getStimTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getBuildType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getBuildType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getTrainingQueue(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::list< BWAPI::UnitType > result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getTrainingQueue();
  jresult = new std::list< BWAPI::UnitType >((const std::list< BWAPI::UnitType > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getTech(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getTech();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getUpgrade(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UpgradeType result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getUpgrade();
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getRemainingBuildTime(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getRemainingBuildTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getRemainingTrainTime(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getRemainingTrainTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getRemainingResearchTime(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getRemainingResearchTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitImpl_getRemainingUpgradeTime(void * jarg1) {
  int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (int)((BWAPI::UnitImpl const *)arg1)->getRemainingUpgradeTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getBuildUnit(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getBuildUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getTarget(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getOrder(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Order result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getOrder();
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getOrderTarget(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getOrderTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getOrderTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getOrderTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getSecondaryOrder(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Order result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getSecondaryOrder();
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getRallyPosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getRallyPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getRallyUnit(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getRallyUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getAddon(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getAddon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getNydusExit(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getNydusExit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getPowerUp(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getPowerUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getTransport(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getTransport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getLoadedUnits(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getLoadedUnits();
  jresult = new std::set< BWAPI::Unit * >((const std::set< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getCarrier(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getCarrier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getInterceptors(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getInterceptors();
  jresult = new std::set< BWAPI::Unit * >((const std::set< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getHatchery(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitImpl const *)arg1)->getHatchery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getLarva(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  std::set< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = ((BWAPI::UnitImpl const *)arg1)->getLarva();
  jresult = new std::set< BWAPI::Unit * >((const std::set< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getUnitsInRadius(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int arg2 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::UnitImpl const *)arg1)->getUnitsInRadius(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getUnitsInWeaponRange(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::WeaponType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::WeaponType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::UnitImpl const *)arg1)->getUnitsInWeaponRange(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitImpl_getClientInfo(void * jarg1) {
  void * jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  void *result = 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (void *)((BWAPI::UnitImpl const *)arg1)->getClientInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitImpl_setClientInfo(void * jarg1, void * jarg2) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setClientInfo(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_exists(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_hasNuke(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->hasNuke();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isAccelerating(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isAccelerating();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isAttackFrame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isAttackFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isAttacking(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isAttacking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isBeingConstructed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isBeingConstructed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isBeingGathered(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isBeingGathered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isBeingHealed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isBeingHealed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isBlind(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isBlind();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isBraking(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isBraking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isBurrowed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isBurrowed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isCarryingGas(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isCarryingGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isCarryingMinerals(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isCarryingMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isCloaked(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isCloaked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isCompleted(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isCompleted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isConstructing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isConstructing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isDefenseMatrixed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isDefenseMatrixed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isDetected(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isDetected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isEnsnared(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isEnsnared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isFollowing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isFollowing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isGatheringGas(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isGatheringGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isGatheringMinerals(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isGatheringMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isHallucination(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isHallucination();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isHoldingPosition(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isHoldingPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isIdle(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isIdle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isInWeaponRange(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isInWeaponRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isInterruptible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isInterruptible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isInvincible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isInvincible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isIrradiated(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isIrradiated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isLifted(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isLifted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isLoaded(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isLockedDown(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isLockedDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isMaelstrommed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isMaelstrommed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isMorphing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isMorphing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isMoving(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isParasited(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isParasited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isPatrolling(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isPatrolling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isPlagued(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isPlagued();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isRepairing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isRepairing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isResearching(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isResearching();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isSelected(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isSelected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isSieged(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isSieged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isStartingAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isStartingAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isStasised(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isStasised();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isStimmed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isStimmed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isStuck(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isStuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isTraining(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isTraining();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isUnderAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isUnderAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isUnderDarkSwarm(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isUnderDarkSwarm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isUnderDisruptionWeb(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isUnderDisruptionWeb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isUnderStorm(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isUnderStorm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isUnpowered(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isUnpowered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isUpgrading(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isUpgrading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isVisible__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_isVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->isVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_canIssueCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitCommand arg2 ;
  BWAPI::UnitCommand *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UnitCommand *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommand", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::UnitImpl const *)arg1)->canIssueCommand(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_issueCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitCommand arg2 ;
  BWAPI::UnitCommand *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UnitCommand *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommand", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->issueCommand(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_attack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_attack__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_attack__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_attack__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_build(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->build(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_buildAddon(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->buildAddon(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_train(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->train(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_morph(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->morph(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_research(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->research(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_upgrade(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->upgrade(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_setRallyPoint__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setRallyPoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_setRallyPoint__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->setRallyPoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_move__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->move(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_move__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->move(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_patrol__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->patrol(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_patrol__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->patrol(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_holdPosition__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->holdPosition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_holdPosition__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->holdPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_stop__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->stop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_stop__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_follow__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->follow(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_follow__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->follow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_gather__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->gather(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_gather__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->gather(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_returnCargo__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->returnCargo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_returnCargo__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->returnCargo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_repair__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->repair(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_repair__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->repair(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_burrow(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->burrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unburrow(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->unburrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_decloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->decloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_siege(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->siege();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unsiege(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->unsiege();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_lift(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->lift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_land(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->land(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_load__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_load__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unload(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->unload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unloadAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->unloadAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unloadAll__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->unloadAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unloadAll__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->unloadAll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_unloadAll__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->unloadAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_rightClick__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->rightClick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_rightClick__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_rightClick__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->rightClick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_rightClick__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_haltConstruction(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->haltConstruction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelConstruction(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cancelConstruction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelAddon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cancelAddon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelTrain__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->cancelTrain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelTrain__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cancelTrain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelMorph(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cancelMorph();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelResearch(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cancelResearch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_cancelUpgrade(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  result = (bool)(arg1)->cancelUpgrade();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_useTech__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->useTech(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_useTech__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::TechType *argp2 ;
  BWAPI::Position *argp3 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_useTech__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (BWAPI::Unit *)jarg3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitImpl_placeCOP(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->placeCOP(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitImpl(void * jarg1) {
  BWAPI::UnitImpl *arg1 = (BWAPI::UnitImpl *) 0 ;
  
  arg1 = (BWAPI::UnitImpl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_name_set(void * jarg1, char * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  char *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 25-1);
      arg1->name[25-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerData_name_get(void * jarg1) {
  char * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_race_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->race = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_race_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->race);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_type_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_type_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_force_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->force = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_force_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->force);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isAlly_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isAlly;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_isAlly_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isAlly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isEnemy_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isEnemy;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_isEnemy_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isEnemy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isNeutral_set(void * jarg1, unsigned int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isNeutral = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerData_isNeutral_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool) ((arg1)->isNeutral);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_startLocationX_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->startLocationX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_startLocationX_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->startLocationX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_startLocationY_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->startLocationY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_startLocationY_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->startLocationY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isVictorious_set(void * jarg1, unsigned int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isVictorious = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerData_isVictorious_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool) ((arg1)->isVictorious);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isDefeated_set(void * jarg1, unsigned int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefeated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerData_isDefeated_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool) ((arg1)->isDefeated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_leftGame_set(void * jarg1, unsigned int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->leftGame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerData_leftGame_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool) ((arg1)->leftGame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isParticipating_set(void * jarg1, unsigned int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isParticipating = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerData_isParticipating_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool) ((arg1)->isParticipating);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_minerals_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minerals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_minerals_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->minerals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_gas_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gas = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_gas_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->gas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_gatheredMinerals_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gatheredMinerals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_gatheredMinerals_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->gatheredMinerals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_gatheredGas_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gatheredGas = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_gatheredGas_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->gatheredGas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_repairedMinerals_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->repairedMinerals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_repairedMinerals_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->repairedMinerals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_repairedGas_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->repairedGas = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_repairedGas_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->repairedGas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_refundedMinerals_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->refundedMinerals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_refundedMinerals_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->refundedMinerals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_refundedGas_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->refundedGas = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_refundedGas_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->refundedGas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_supplyTotal_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->supplyTotal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_supplyTotal_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->supplyTotal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_supplyUsed_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->supplyUsed;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_supplyUsed_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->supplyUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_allUnitCount_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->allUnitCount;
    for (ii = 0; ii < (size_t)234; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_allUnitCount_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->allUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_visibleUnitCount_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->visibleUnitCount;
    for (ii = 0; ii < (size_t)234; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_visibleUnitCount_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->visibleUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_completedUnitCount_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->completedUnitCount;
    for (ii = 0; ii < (size_t)234; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_completedUnitCount_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->completedUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_deadUnitCount_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->deadUnitCount;
    for (ii = 0; ii < (size_t)234; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_deadUnitCount_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->deadUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_killedUnitCount_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->killedUnitCount;
    for (ii = 0; ii < (size_t)234; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_killedUnitCount_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->killedUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_upgradeLevel_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->upgradeLevel;
    for (ii = 0; ii < (size_t)63; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_upgradeLevel_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->upgradeLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_hasResearched_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->hasResearched;
    for (ii = 0; ii < (size_t)47; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_hasResearched_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->hasResearched);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isResearching_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isResearching;
    for (ii = 0; ii < (size_t)47; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_isResearching_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isResearching);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isUpgrading_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isUpgrading;
    for (ii = 0; ii < (size_t)63; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_isUpgrading_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isUpgrading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_colorByte_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->colorByte = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_colorByte_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->colorByte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_color_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_color_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_totalUnitScore_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->totalUnitScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_totalUnitScore_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->totalUnitScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_totalKillScore_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->totalKillScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_totalKillScore_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->totalKillScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_totalBuildingScore_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->totalBuildingScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_totalBuildingScore_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->totalBuildingScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_totalRazingScore_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->totalRazingScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_totalRazingScore_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->totalRazingScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_customScore_set(void * jarg1, int jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->customScore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerData_customScore_get(void * jarg1) {
  int jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int) ((arg1)->customScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_maxUpgradeLevel_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->maxUpgradeLevel;
    for (ii = 0; ii < (size_t)61; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_maxUpgradeLevel_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (int *)(int *) ((arg1)->maxUpgradeLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isResearchAvailable_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isResearchAvailable;
    for (ii = 0; ii < (size_t)44; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_isResearchAvailable_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isResearchAvailable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerData_isUnitAvailable_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->isUnitAvailable;
    for (ii = 0; ii < (size_t)228; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerData_isUnitAvailable_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->isUnitAvailable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerData() {
  void * jresult ;
  BWAPI::PlayerData *result = 0 ;
  
  result = (BWAPI::PlayerData *)new BWAPI::PlayerData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerData(void * jarg1) {
  BWAPI::PlayerData *arg1 = (BWAPI::PlayerData *) 0 ;
  
  arg1 = (BWAPI::PlayerData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerImpl_self_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::PlayerData *arg2 = (BWAPI::PlayerData *) 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  arg2 = (BWAPI::PlayerData *)jarg2; 
  if (arg1) (arg1)->self = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_self_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::PlayerData *result = 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (BWAPI::PlayerData *) ((arg1)->self);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerImpl_units_set(void * jarg1, void * jarg2) {
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  std::set< BWAPI::Unit * > *arg2 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * > *)jarg2; 
  if (arg1) (arg1)->units = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_units_get(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *)& ((arg1)->units);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerImpl_clear(void * jarg1) {
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerImpl(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::PlayerImpl *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::PlayerImpl *)new BWAPI::PlayerImpl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getID(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerImpl_getName(void * jarg1) {
  char * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = ((BWAPI::PlayerImpl const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_getUnits(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::PlayerImpl const *)arg1)->getUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = ((BWAPI::PlayerImpl const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_getType(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::PlayerType result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = ((BWAPI::PlayerImpl const *)arg1)->getType();
  jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_getForce(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Force *result = 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (BWAPI::Force *)((BWAPI::PlayerImpl const *)arg1)->getForce();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isAlly(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isAlly(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isEnemy(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isEnemy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isNeutral(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isNeutral();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_getStartLocation(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = ((BWAPI::PlayerImpl const *)arg1)->getStartLocation();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isVictorious(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isVictorious();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isDefeated(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isDefeated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_leftGame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->leftGame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_minerals(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->minerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_gas(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->gas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_gatheredMinerals(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->gatheredMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_gatheredGas(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->gatheredGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_repairedMinerals(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->repairedMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_repairedGas(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->repairedGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_refundedMinerals(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->refundedMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_refundedGas(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->refundedGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_spentMinerals(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->spentMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_spentGas(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->spentGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_supplyTotal__SWIG_0(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->supplyTotal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_supplyUsed__SWIG_0(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->supplyUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_supplyTotal__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->supplyTotal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_supplyUsed__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->supplyUsed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_allUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->allUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_visibleUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->visibleUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_completedUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->completedUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_incompleteUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->incompleteUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_deadUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->deadUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_killedUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->killedUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_hasResearched(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->hasResearched(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isResearching(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isResearching(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isUpgrading(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isUpgrading(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerImpl_getColor(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::Color result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = ((BWAPI::PlayerImpl const *)arg1)->getColor();
  jresult = new BWAPI::Color((const BWAPI::Color &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getTextColor(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getTextColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_maxEnergy(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->maxEnergy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PlayerImpl_topSpeed(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  double result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((BWAPI::PlayerImpl const *)arg1)->topSpeed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_groundWeaponMaxRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->groundWeaponMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_airWeaponMaxRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->airWeaponMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_weaponMaxRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::WeaponType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::WeaponType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->weaponMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_sightRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->sightRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_groundWeaponDamageCooldown(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->groundWeaponDamageCooldown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_armor(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->armor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getUnitScore(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getUnitScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getKillScore(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getKillScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getBuildingScore(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getBuildingScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getRazingScore(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getRazingScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getCustomScore(void * jarg1) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getCustomScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isObserver(void * jarg1) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isObserver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerImpl_getMaxUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::PlayerImpl const *)arg1)->getMaxUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isResearchAvailable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isResearchAvailable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerImpl_isUnitAvailable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::PlayerImpl const *)arg1)->isUnitAvailable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerImpl(void * jarg1) {
  BWAPI::PlayerImpl *arg1 = (BWAPI::PlayerImpl *) 0 ;
  
  arg1 = (BWAPI::PlayerImpl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BWAPIC_Position() {
  void * jresult ;
  BWAPIC::Position *result = 0 ;
  
  result = (BWAPIC::Position *)new BWAPIC::Position();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_Position_x_set(void * jarg1, int jarg2) {
  BWAPIC::Position *arg1 = (BWAPIC::Position *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Position *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_Position_x_get(void * jarg1) {
  int jresult ;
  BWAPIC::Position *arg1 = (BWAPIC::Position *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Position *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_Position_y_set(void * jarg1, int jarg2) {
  BWAPIC::Position *arg1 = (BWAPIC::Position *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Position *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_Position_y_get(void * jarg1) {
  int jresult ;
  BWAPIC::Position *arg1 = (BWAPIC::Position *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Position *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BWAPIC_Position(void * jarg1) {
  BWAPIC::Position *arg1 = (BWAPIC::Position *) 0 ;
  
  arg1 = (BWAPIC::Position *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_unitFinder_unitIndex_set(void * jarg1, int jarg2) {
  BWAPI::unitFinder *arg1 = (BWAPI::unitFinder *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::unitFinder *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unitIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_unitFinder_unitIndex_get(void * jarg1) {
  int jresult ;
  BWAPI::unitFinder *arg1 = (BWAPI::unitFinder *) 0 ;
  int result;
  
  arg1 = (BWAPI::unitFinder *)jarg1; 
  result = (int) ((arg1)->unitIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_unitFinder_searchValue_set(void * jarg1, int jarg2) {
  BWAPI::unitFinder *arg1 = (BWAPI::unitFinder *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::unitFinder *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->searchValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_unitFinder_searchValue_get(void * jarg1) {
  int jresult ;
  BWAPI::unitFinder *arg1 = (BWAPI::unitFinder *) 0 ;
  int result;
  
  arg1 = (BWAPI::unitFinder *)jarg1; 
  result = (int) ((arg1)->searchValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_unitFinder() {
  void * jresult ;
  BWAPI::unitFinder *result = 0 ;
  
  result = (BWAPI::unitFinder *)new BWAPI::unitFinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_unitFinder(void * jarg1) {
  BWAPI::unitFinder *arg1 = (BWAPI::unitFinder *) 0 ;
  
  arg1 = (BWAPI::unitFinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_revision_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->revision = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_revision_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->revision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isDebug_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDebug = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_isDebug_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->isDebug);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_instanceID_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->instanceID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_instanceID_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->instanceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_botAPM_noselects_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->botAPM_noselects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_botAPM_noselects_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->botAPM_noselects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_botAPM_selects_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->botAPM_selects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_botAPM_selects_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->botAPM_selects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_forceCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->forceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_forceCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->forceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_forces_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::ForceData *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPI::ForceData *)jarg2; 
  {
    size_t ii;
    BWAPI::ForceData *b = (BWAPI::ForceData *) arg1->forces;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((BWAPI::ForceData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_forces_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::ForceData *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::ForceData *)(BWAPI::ForceData *) ((arg1)->forces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_playerCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->playerCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_playerCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->playerCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_players_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::PlayerData *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPI::PlayerData *)jarg2; 
  {
    size_t ii;
    BWAPI::PlayerData *b = (BWAPI::PlayerData *) arg1->players;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((BWAPI::PlayerData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_players_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::PlayerData *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::PlayerData *)(BWAPI::PlayerData *) ((arg1)->players);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_initialUnitCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->initialUnitCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_initialUnitCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->initialUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_units_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::UnitData *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPI::UnitData *)jarg2; 
  {
    size_t ii;
    BWAPI::UnitData *b = (BWAPI::UnitData *) arg1->units;
    for (ii = 0; ii < (size_t)10000; ii++) b[ii] = *((BWAPI::UnitData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_units_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::UnitData *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::UnitData *)(BWAPI::UnitData *) ((arg1)->units);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_unitArray_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->unitArray;
    for (ii = 0; ii < (size_t)1700; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_unitArray_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int *)(int *) ((arg1)->unitArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_bullets_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::BulletData *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPI::BulletData *)jarg2; 
  {
    size_t ii;
    BWAPI::BulletData *b = (BWAPI::BulletData *) arg1->bullets;
    for (ii = 0; ii < (size_t)100; ii++) b[ii] = *((BWAPI::BulletData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_bullets_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::BulletData *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::BulletData *)(BWAPI::BulletData *) ((arg1)->bullets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_nukeDotCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nukeDotCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_nukeDotCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->nukeDotCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_nukeDots_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Position *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPIC::Position *)jarg2; 
  {
    size_t ii;
    BWAPIC::Position *b = (BWAPIC::Position *) arg1->nukeDots;
    for (ii = 0; ii < (size_t)200; ii++) b[ii] = *((BWAPIC::Position *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_nukeDots_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Position *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPIC::Position *)(BWAPIC::Position *) ((arg1)->nukeDots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_gameType_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->gameType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_gameType_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->gameType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_latency_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->latency = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_latency_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->latency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_latencyFrames_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->latencyFrames = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_latencyFrames_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->latencyFrames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_latencyTime_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->latencyTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_latencyTime_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->latencyTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_remainingLatencyFrames_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remainingLatencyFrames = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_remainingLatencyFrames_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->remainingLatencyFrames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_remainingLatencyTime_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->remainingLatencyTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_remainingLatencyTime_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->remainingLatencyTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_hasLatCom_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasLatCom = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_hasLatCom_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->hasLatCom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_hasGUI_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasGUI = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_hasGUI_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->hasGUI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_replayFrameCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->replayFrameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_replayFrameCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->replayFrameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_frameCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->frameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_frameCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->frameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_elapsedTime_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->elapsedTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_elapsedTime_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->elapsedTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_countdownTimer_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->countdownTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_countdownTimer_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->countdownTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_fps_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_fps_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->fps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_averageFPS_set(void * jarg1, double jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  double arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->averageFPS = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GameData_averageFPS_get(void * jarg1) {
  double jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  double result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (double) ((arg1)->averageFPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mouseX_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mouseX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_mouseX_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->mouseX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mouseY_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mouseY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_mouseY_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->mouseY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mouseState_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->mouseState;
    for (ii = 0; ii < (size_t)BWAPI::M_MAX; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_mouseState_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->mouseState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_keyState_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->keyState;
    for (ii = 0; ii < (size_t)BWAPI::K_MAX; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_keyState_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->keyState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_screenX_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->screenX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_screenX_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->screenX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_screenY_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->screenY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_screenY_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->screenY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_flags_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->flags;
    for (ii = 0; ii < (size_t)BWAPI::Flag::Max; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_flags_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool *)(bool *) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapWidth_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mapWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_mapWidth_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->mapWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapHeight_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mapHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_mapHeight_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->mapHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapFileName_set(void * jarg1, char * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mapFileName, (const char *)arg2, 261-1);
      arg1->mapFileName[261-1] = 0;
    } else {
      arg1->mapFileName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameData_mapFileName_get(void * jarg1) {
  char * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (char *)(char *) ((arg1)->mapFileName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapPathName_set(void * jarg1, char * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mapPathName, (const char *)arg2, 261-1);
      arg1->mapPathName[261-1] = 0;
    } else {
      arg1->mapPathName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameData_mapPathName_get(void * jarg1) {
  char * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (char *)(char *) ((arg1)->mapPathName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapName_set(void * jarg1, char * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mapName, (const char *)arg2, 33-1);
      arg1->mapName[33-1] = 0;
    } else {
      arg1->mapName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameData_mapName_get(void * jarg1) {
  char * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (char *)(char *) ((arg1)->mapName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapHash_set(void * jarg1, char * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mapHash, (const char *)arg2, 41-1);
      arg1->mapHash[41-1] = 0;
    } else {
      arg1->mapHash[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameData_mapHash_get(void * jarg1) {
  char * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (char *)(char *) ((arg1)->mapHash);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_getGroundHeight_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int (*)[256])jarg2; 
  {
    int (*inp)[256] = (int (*)[256])(arg2);
    int (*dest)[256] = (int (*)[256])(arg1->getGroundHeight);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      int *ip = inp[ii];
      int *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_getGroundHeight_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int (*)[256])(int (*)[256]) ((arg1)->getGroundHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isWalkable_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*arg2)[1024] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool (*)[1024])jarg2; 
  {
    bool (*inp)[1024] = (bool (*)[1024])(arg2);
    bool (*dest)[1024] = (bool (*)[1024])(arg1->isWalkable);
    size_t ii = 0;
    for (; ii < 1024; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 1024; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_isWalkable_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*result)[1024] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool (*)[1024])(bool (*)[1024]) ((arg1)->isWalkable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isBuildable_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool (*)[256])jarg2; 
  {
    bool (*inp)[256] = (bool (*)[256])(arg2);
    bool (*dest)[256] = (bool (*)[256])(arg1->isBuildable);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_isBuildable_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool (*)[256])(bool (*)[256]) ((arg1)->isBuildable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isVisible_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool (*)[256])jarg2; 
  {
    bool (*inp)[256] = (bool (*)[256])(arg2);
    bool (*dest)[256] = (bool (*)[256])(arg1->isVisible);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_isVisible_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool (*)[256])(bool (*)[256]) ((arg1)->isVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isExplored_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool (*)[256])jarg2; 
  {
    bool (*inp)[256] = (bool (*)[256])(arg2);
    bool (*dest)[256] = (bool (*)[256])(arg1->isExplored);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_isExplored_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool (*)[256])(bool (*)[256]) ((arg1)->isExplored);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_hasCreep_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool (*)[256])jarg2; 
  {
    bool (*inp)[256] = (bool (*)[256])(arg2);
    bool (*dest)[256] = (bool (*)[256])(arg1->hasCreep);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_hasCreep_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool (*)[256])(bool (*)[256]) ((arg1)->hasCreep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isOccupied_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (bool (*)[256])jarg2; 
  {
    bool (*inp)[256] = (bool (*)[256])(arg2);
    bool (*dest)[256] = (bool (*)[256])(arg1->isOccupied);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_isOccupied_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool (*)[256])(bool (*)[256]) ((arg1)->isOccupied);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapTileRegionId_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (unsigned short (*)[256])jarg2; 
  {
    unsigned short (*inp)[256] = (unsigned short (*)[256])(arg2);
    unsigned short (*dest)[256] = (unsigned short (*)[256])(arg1->mapTileRegionId);
    size_t ii = 0;
    for (; ii < 256; ++ii) {
      unsigned short *ip = inp[ii];
      unsigned short *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_mapTileRegionId_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (unsigned short (*)[256])(unsigned short (*)[256]) ((arg1)->mapTileRegionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapSplitTilesMiniTileMask_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->mapSplitTilesMiniTileMask;
    for (ii = 0; ii < (size_t)5000; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_mapSplitTilesMiniTileMask_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->mapSplitTilesMiniTileMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapSplitTilesRegion1_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->mapSplitTilesRegion1;
    for (ii = 0; ii < (size_t)5000; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_mapSplitTilesRegion1_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->mapSplitTilesRegion1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_mapSplitTilesRegion2_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->mapSplitTilesRegion2;
    for (ii = 0; ii < (size_t)5000; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_mapSplitTilesRegion2_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->mapSplitTilesRegion2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_regionCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->regionCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_regionCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->regionCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_regions_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  RegionData *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (RegionData *)jarg2; 
  {
    size_t ii;
    RegionData *b = (RegionData *) arg1->regions;
    for (ii = 0; ii < (size_t)5000; ii++) b[ii] = *((RegionData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_regions_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  RegionData *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (RegionData *)(RegionData *) ((arg1)->regions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_startLocationCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->startLocationCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_startLocationCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->startLocationCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_startLocations_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Position *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPIC::Position *)jarg2; 
  {
    size_t ii;
    BWAPIC::Position *b = (BWAPIC::Position *) arg1->startLocations;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((BWAPIC::Position *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_startLocations_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Position *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPIC::Position *)(BWAPIC::Position *) ((arg1)->startLocations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isInGame_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isInGame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_isInGame_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->isInGame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isMultiplayer_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMultiplayer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_isMultiplayer_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->isMultiplayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isBattleNet_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBattleNet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_isBattleNet_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->isBattleNet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isPaused_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPaused = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_isPaused_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->isPaused);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_isReplay_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isReplay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameData_isReplay_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (bool) ((arg1)->isReplay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_selectedUnitCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->selectedUnitCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_selectedUnitCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->selectedUnitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_selectedUnits_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->selectedUnits;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_selectedUnits_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int *)(int *) ((arg1)->selectedUnits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_self_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->self = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_self_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->self);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_enemy_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->enemy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_enemy_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->enemy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_neutral_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->neutral = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_neutral_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->neutral);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_MAX_EVENTS_get() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::GameData::MAX_EVENTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_MAX_EVENT_STRINGS_get() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::GameData::MAX_EVENT_STRINGS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_MAX_STRINGS_get() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::GameData::MAX_STRINGS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_MAX_SHAPES_get() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::GameData::MAX_SHAPES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_MAX_COMMANDS_get() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::GameData::MAX_COMMANDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_MAX_UNIT_COMMANDS_get() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::GameData::MAX_UNIT_COMMANDS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_eventCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_eventCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->eventCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_events_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Event *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPIC::Event *)jarg2; 
  {
    size_t ii;
    BWAPIC::Event *b = (BWAPIC::Event *) arg1->events;
    for (ii = 0; ii < (size_t)BWAPI::GameData::MAX_EVENTS; ii++) b[ii] = *((BWAPIC::Event *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_events_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Event *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPIC::Event *)(BWAPIC::Event *) ((arg1)->events);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_eventStringCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventStringCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_eventStringCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->eventStringCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_eventStrings_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (char (*)[256])jarg2; 
  {
    char (*inp)[256] = (char (*)[256])(arg2);
    char (*dest)[256] = (char (*)[256])(arg1->eventStrings);
    size_t ii = 0;
    for (; ii < BWAPI::GameData::MAX_EVENT_STRINGS; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_eventStrings_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (char (*)[256])(char (*)[256]) ((arg1)->eventStrings);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_stringCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stringCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_stringCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->stringCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_strings_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char (*arg2)[256] ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (char (*)[256])jarg2; 
  {
    char (*inp)[256] = (char (*)[256])(arg2);
    char (*dest)[256] = (char (*)[256])(arg1->strings);
    size_t ii = 0;
    for (; ii < BWAPI::GameData::MAX_STRINGS; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_strings_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  char (*result)[256] = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (char (*)[256])(char (*)[256]) ((arg1)->strings);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_shapeCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->shapeCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_shapeCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->shapeCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_shapes_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Shape *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPIC::Shape *)jarg2; 
  {
    size_t ii;
    BWAPIC::Shape *b = (BWAPIC::Shape *) arg1->shapes;
    for (ii = 0; ii < (size_t)BWAPI::GameData::MAX_SHAPES; ii++) b[ii] = *((BWAPIC::Shape *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_shapes_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Shape *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPIC::Shape *)(BWAPIC::Shape *) ((arg1)->shapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_commandCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->commandCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_commandCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->commandCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_commands_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Command *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPIC::Command *)jarg2; 
  {
    size_t ii;
    BWAPIC::Command *b = (BWAPIC::Command *) arg1->commands;
    for (ii = 0; ii < (size_t)BWAPI::GameData::MAX_COMMANDS; ii++) b[ii] = *((BWAPIC::Command *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_commands_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::Command *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPIC::Command *)(BWAPIC::Command *) ((arg1)->commands);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_unitCommandCount_set(void * jarg1, int jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unitCommandCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameData_unitCommandCount_get(void * jarg1) {
  int jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (int) ((arg1)->unitCommandCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_unitCommands_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::UnitCommand *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPIC::UnitCommand *)jarg2; 
  {
    size_t ii;
    BWAPIC::UnitCommand *b = (BWAPIC::UnitCommand *) arg1->unitCommands;
    for (ii = 0; ii < (size_t)BWAPI::GameData::MAX_UNIT_COMMANDS; ii++) b[ii] = *((BWAPIC::UnitCommand *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_unitCommands_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPIC::UnitCommand *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPIC::UnitCommand *)(BWAPIC::UnitCommand *) ((arg1)->unitCommands);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_xUnitSearch_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::unitFinder *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPI::unitFinder *)jarg2; 
  {
    size_t ii;
    BWAPI::unitFinder *b = (BWAPI::unitFinder *) arg1->xUnitSearch;
    for (ii = 0; ii < (size_t)1700*2; ii++) b[ii] = *((BWAPI::unitFinder *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_xUnitSearch_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::unitFinder *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::unitFinder *)(BWAPI::unitFinder *) ((arg1)->xUnitSearch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameData_yUnitSearch_set(void * jarg1, void * jarg2) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::unitFinder *arg2 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  arg2 = (BWAPI::unitFinder *)jarg2; 
  {
    size_t ii;
    BWAPI::unitFinder *b = (BWAPI::unitFinder *) arg1->yUnitSearch;
    for (ii = 0; ii < (size_t)1700*2; ii++) b[ii] = *((BWAPI::unitFinder *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameData_yUnitSearch_get(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::unitFinder *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::unitFinder *)(BWAPI::unitFinder *) ((arg1)->yUnitSearch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameData() {
  void * jresult ;
  BWAPI::GameData *result = 0 ;
  
  result = (BWAPI::GameData *)new BWAPI::GameData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameData(void * jarg1) {
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_makeEvent(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPIC::Event arg2 ;
  BWAPIC::Event *argp2 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPIC::Event *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPIC::Event", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->makeEvent(arg2);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_addUnitCommand(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPIC::UnitCommand *arg2 = 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPIC::UnitCommand *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPIC::UnitCommand & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->addUnitCommand(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_inGame_set(void * jarg1, unsigned int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->inGame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_inGame_get(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool) ((arg1)->inGame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameImpl(void * jarg1) {
  void * jresult ;
  BWAPI::GameData *arg1 = (BWAPI::GameData *) 0 ;
  BWAPI::GameImpl *result = 0 ;
  
  arg1 = (BWAPI::GameData *)jarg1; 
  result = (BWAPI::GameImpl *)new BWAPI::GameImpl(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_onMatchStart(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->onMatchStart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_onMatchEnd(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->onMatchEnd();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_onMatchFrame(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->onMatchFrame();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getGameData(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::GameData *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (BWAPI::GameData *)((BWAPI::GameImpl const *)arg1)->getGameData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl__unitFromIndex(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Unit *)(arg1)->_unitFromIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getForces(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Force * > *) &(arg1)->getForces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getPlayers(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->getPlayers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getAllUnits(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getAllUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getMinerals(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getGeysers(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getNeutralUnits(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getNeutralUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getStaticMinerals(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getStaticGeysers(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getStaticNeutralUnits(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticNeutralUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getBullets(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Bullet * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Bullet * > *) &(arg1)->getBullets();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getNukeDots(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Position > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Position > *) &(arg1)->getNukeDots();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getEvents(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::list< BWAPI::Event > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::list< BWAPI::Event > *) &(arg1)->getEvents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getForce(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  BWAPI::Force *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Force *)(arg1)->getForce(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getPlayer(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Player *)(arg1)->getPlayer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getUnit(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Unit *)(arg1)->getUnit(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_indexToUnit(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Unit *)(arg1)->indexToUnit(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getRegion(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  Region *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Region *)(arg1)->getRegion(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getGameType(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::GameType result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->getGameType();
  jresult = new BWAPI::GameType((const BWAPI::GameType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getLatency(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getLatency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getFrameCount(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getReplayFrameCount(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getReplayFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getFPS(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GameImpl_getAverageFPS(void * jarg1) {
  double jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  double result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (double)(arg1)->getAverageFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getMousePosition(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->getMousePosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_getMouseState__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::MouseButton arg2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::MouseButton)jarg2; 
  result = (bool)(arg1)->getMouseState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_getMouseState__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getMouseState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_getKeyState__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Key arg2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Key)jarg2; 
  result = (bool)(arg1)->getKeyState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_getKeyState__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getKeyState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getScreenPosition(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->getScreenPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setScreenPosition__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setScreenPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setScreenPosition__SWIG_1(void * jarg1, void * jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setScreenPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_pingMinimap__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->pingMinimap(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_pingMinimap__SWIG_1(void * jarg1, void * jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pingMinimap(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isFlagEnabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isFlagEnabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_enableFlag(void * jarg1, int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableFlag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getUnitsOnTile(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getUnitsOnTile(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getUnitsInRectangle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::GameImpl const *)arg1)->getUnitsInRectangle(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getUnitsInRectangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position *argp3 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::GameImpl const *)arg1)->getUnitsInRectangle(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getUnitsInRadius(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  int arg3 ;
  BWAPI::Position *argp2 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::GameImpl const *)arg1)->getUnitsInRadius(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getLastError(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Error result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = ((BWAPI::GameImpl const *)arg1)->getLastError();
  jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setLastError(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Error arg2 ;
  BWAPI::Error *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Error *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Error", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setLastError(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_mapWidth(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->mapWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_mapHeight(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->mapHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameImpl_mapFileName(void * jarg1) {
  char * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->mapFileName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameImpl_mapPathName(void * jarg1) {
  char * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->mapPathName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameImpl_mapName(void * jarg1) {
  char * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->mapName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameImpl_mapHash(void * jarg1) {
  char * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (arg1)->mapHash();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isWalkable(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isWalkable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getGroundHeight__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getGroundHeight(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getGroundHeight__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->getGroundHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isBuildable__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->isBuildable(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isBuildable__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isBuildable__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  bool arg3 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isBuildable__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isBuildable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isVisible__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isVisible(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isExplored__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isExplored(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isExplored__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isExplored(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasCreep__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->hasCreep(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasCreep__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->hasCreep(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::UnitType arg6 ;
  BWAPI::UnitType *argp6 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::UnitType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_5(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_6(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::UnitType arg5 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp5 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::UnitType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPower__SWIG_7(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPower(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPowerPrecise__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPowerPrecise(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPowerPrecise__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPowerPrecise(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPowerPrecise__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPowerPrecise(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPowerPrecise__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPowerPrecise(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_canBuildHere__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  bool arg5 ;
  BWAPI::TilePosition *argp3 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TilePosition *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->canBuildHere((BWAPI::Unit const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_canBuildHere__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::TilePosition *argp3 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TilePosition *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->canBuildHere((BWAPI::Unit const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_canMake(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg3 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canMake((BWAPI::Unit const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_canResearch(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg3 ;
  BWAPI::TechType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TechType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canResearch((BWAPI::Unit const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_canUpgrade(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg3 ;
  BWAPI::UpgradeType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::UpgradeType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canUpgrade((BWAPI::Unit const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getStartLocations(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::TilePosition > *) &(arg1)->getStartLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_printf(void * jarg1, char * jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->printf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_sendText(void * jarg1, char * jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->sendText((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_sendTextEx(void * jarg1, unsigned int jarg2, char * jarg3) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  (arg1)->sendTextEx(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_changeRace(void * jarg1, void * jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->changeRace(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isInGame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isInGame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isMultiplayer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isMultiplayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isBattleNet(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isBattleNet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isPaused(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isReplay(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isReplay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_startGame(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->startGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_pauseGame(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->pauseGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_resumeGame(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->resumeGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_leaveGame(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->leaveGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_restartGame(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->restartGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setLocalSpeed__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLocalSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setLocalSpeed__SWIG_1(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->setLocalSpeed();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_issueCommand(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *arg2 = 0 ;
  BWAPI::UnitCommand arg3 ;
  BWAPI::UnitCommand *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Unit * > const & type is null", 0);
    return 0;
  } 
  argp3 = (BWAPI::UnitCommand *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommand", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->issueCommand((std::set< BWAPI::Unit * > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getSelectedUnits(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getSelectedUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_self(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (BWAPI::Player *)(arg1)->self();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_enemy(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (BWAPI::Player *)(arg1)->enemy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_neutral(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (BWAPI::Player *)(arg1)->neutral();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_allies(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->allies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_enemies(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->enemies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_observers(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->observers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setTextSize__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTextSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setTextSize__SWIG_1(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->setTextSize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawText(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->drawText(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTextMap(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextMap(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTextMouse(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextMouse(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTextScreen(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextScreen(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBox__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBox__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBoxMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBoxMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBoxMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBoxMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBoxScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawBoxScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9, unsigned int jarg10) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  bool arg10 ;
  BWAPI::Color *argp9 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = (BWAPI::Color *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangle__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  BWAPI::Color *argp9 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = (BWAPI::Color *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangleMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangleMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangleMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangleMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangleScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawTriangleScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircle__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircleMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircleMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircleMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircleMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircleScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawCircleScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipseMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipseMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipseMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipseMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipseScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawEllipseScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawDot(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawDot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawDotMap(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMap(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawDotMouse(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMouse(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawDotScreen(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotScreen(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawLine(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawLineMap(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawLineMouse(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_drawLineScreen(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getScreenBuffer(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  void *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (void *)(arg1)->getScreenBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getLatencyFrames(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getLatencyFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getLatencyTime(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getLatencyTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getRemainingLatencyFrames(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getRemainingLatencyFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getRemainingLatencyTime(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getRemainingLatencyTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getRevision(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getRevision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isDebug(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isDebug();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isLatComEnabled(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isLatComEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setLatCom(void * jarg1, unsigned int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLatCom(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_isGUIEnabled(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->isGUIEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setGUI__SWIG_0(void * jarg1, unsigned int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGUI(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setGUI__SWIG_1(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->setGUI();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getInstanceNumber(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getInstanceNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getAPM__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->getAPM(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getAPM__SWIG_1(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)(arg1)->getAPM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setMap(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setMap((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setFrameSkip__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFrameSkip(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setFrameSkip__SWIG_1(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->setFrameSkip();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_hasPath(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position *argp3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((BWAPI::GameImpl const *)arg1)->hasPath(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setAlliance__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setAlliance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setAlliance__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setAlliance(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setAlliance__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)(arg1)->setAlliance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setVision__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setVision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setVision__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)(arg1)->setVision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_elapsedTime(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)((BWAPI::GameImpl const *)arg1)->elapsedTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setCommandOptimizationLevel__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCommandOptimizationLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameImpl_setCommandOptimizationLevel__SWIG_1(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  (arg1)->setCommandOptimizationLevel();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_countdownTimer(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)((BWAPI::GameImpl const *)arg1)->countdownTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getAllRegions(void * jarg1) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  std::set< BWAPI::Region * > *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (std::set< BWAPI::Region * > *) &((BWAPI::GameImpl const *)arg1)->getAllRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getRegionAt__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Region *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (BWAPI::Region *)((BWAPI::GameImpl const *)arg1)->getRegionAt(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameImpl_getRegionAt__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::Region *result = 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (BWAPI::Region *)((BWAPI::GameImpl const *)arg1)->getRegionAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameImpl_getLastEventTime(void * jarg1) {
  int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  int result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (int)((BWAPI::GameImpl const *)arg1)->getLastEventTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setReplayVision__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setReplayVision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setReplayVision__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)(arg1)->setReplayVision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setRevealAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setRevealAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameImpl_setRevealAll__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  bool result;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  result = (bool)(arg1)->setRevealAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameImpl(void * jarg1) {
  BWAPI::GameImpl *arg1 = (BWAPI::GameImpl *) 0 ;
  
  arg1 = (BWAPI::GameImpl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shape__SWIG_0() {
  void * jresult ;
  BWAPIC::Shape *result = 0 ;
  
  result = (BWAPIC::Shape *)new BWAPIC::Shape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Shape__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10) {
  void * jresult ;
  BWAPIC::ShapeType::Enum arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  BWAPIC::Shape *result = 0 ;
  
  arg1 = (BWAPIC::ShapeType::Enum)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (BWAPIC::Shape *)new BWAPIC::Shape(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_type_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  BWAPIC::ShapeType::Enum arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (BWAPIC::ShapeType::Enum)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_type_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  BWAPIC::ShapeType::Enum result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (BWAPIC::ShapeType::Enum) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_ctype_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ctype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_ctype_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->ctype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_x1_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_x1_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->x1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_y1_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_y1_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->y1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_x2_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_x2_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->x2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_y2_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_y2_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->y2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_extra1_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->extra1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_extra1_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->extra1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_extra2_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->extra2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_extra2_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->extra2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_color_set(void * jarg1, int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_color_get(void * jarg1) {
  int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  int result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (int) ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_isSolid_set(void * jarg1, unsigned int jarg2) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSolid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shape_isSolid_get(void * jarg1) {
  unsigned int jresult ;
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  bool result;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  result = (bool) ((arg1)->isSolid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shape(void * jarg1) {
  BWAPIC::Shape *arg1 = (BWAPIC::Shape *) 0 ;
  
  arg1 = (BWAPIC::Shape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_UnitCommand_type_set(void * jarg1, void * jarg2) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  BWAPI::UnitCommandType *arg2 = (BWAPI::UnitCommandType *) 0 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  arg2 = (BWAPI::UnitCommandType *)jarg2; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BWAPIC_UnitCommand_type_get(void * jarg1) {
  void * jresult ;
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  BWAPI::UnitCommandType *result = 0 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  result = (BWAPI::UnitCommandType *)& ((arg1)->type);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_UnitCommand_unitIndex_set(void * jarg1, int jarg2) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unitIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_UnitCommand_unitIndex_get(void * jarg1) {
  int jresult ;
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  result = (int) ((arg1)->unitIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_UnitCommand_targetIndex_set(void * jarg1, int jarg2) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->targetIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_UnitCommand_targetIndex_get(void * jarg1) {
  int jresult ;
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  result = (int) ((arg1)->targetIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_UnitCommand_x_set(void * jarg1, int jarg2) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_UnitCommand_x_get(void * jarg1) {
  int jresult ;
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_UnitCommand_y_set(void * jarg1, int jarg2) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_UnitCommand_y_get(void * jarg1) {
  int jresult ;
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIC_UnitCommand_extra_set(void * jarg1, int jarg2) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->extra = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPIC_UnitCommand_extra_get(void * jarg1) {
  int jresult ;
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  result = (int) ((arg1)->extra);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BWAPIC_UnitCommand() {
  void * jresult ;
  BWAPIC::UnitCommand *result = 0 ;
  
  result = (BWAPIC::UnitCommand *)new BWAPIC::UnitCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BWAPIC_UnitCommand(void * jarg1) {
  BWAPIC::UnitCommand *arg1 = (BWAPIC::UnitCommand *) 0 ;
  
  arg1 = (BWAPIC::UnitCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Client() {
  void * jresult ;
  BWAPI::Client *result = 0 ;
  
  result = (BWAPI::Client *)new BWAPI::Client();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Client(void * jarg1) {
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  
  arg1 = (BWAPI::Client *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_data_set(void * jarg1, void * jarg2) {
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  BWAPI::GameData *arg2 = (BWAPI::GameData *) 0 ;
  
  arg1 = (BWAPI::Client *)jarg1; 
  arg2 = (BWAPI::GameData *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_data_get(void * jarg1) {
  void * jresult ;
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  BWAPI::GameData *result = 0 ;
  
  arg1 = (BWAPI::Client *)jarg1; 
  result = (BWAPI::GameData *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_isConnected(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Client *)jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_connect(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Client *)jarg1; 
  result = (bool)(arg1)->connect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_disconnect(void * jarg1) {
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  
  arg1 = (BWAPI::Client *)jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_update(void * jarg1) {
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  
  arg1 = (BWAPI::Client *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BWAPIClient_set(void * jarg1) {
  BWAPI::Client *arg1 = (BWAPI::Client *) 0 ;
  
  arg1 = (BWAPI::Client *)jarg1; 
  BWAPI::BWAPIClient = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BWAPIClient_get() {
  void * jresult ;
  BWAPI::Client *result = 0 ;
  
  result = (BWAPI::Client *)&BWAPI::BWAPIClient;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT BWAPI::Force * SWIGSTDCALL CSharp_ForceImpl_SWIGUpcast(BWAPI::ForceImpl *jarg1) {
    return (BWAPI::Force *)jarg1;
}

SWIGEXPORT BWAPI::Unit * SWIGSTDCALL CSharp_UnitImpl_SWIGUpcast(BWAPI::UnitImpl *jarg1) {
    return (BWAPI::Unit *)jarg1;
}

SWIGEXPORT BWAPI::Player * SWIGSTDCALL CSharp_PlayerImpl_SWIGUpcast(BWAPI::PlayerImpl *jarg1) {
    return (BWAPI::Player *)jarg1;
}

SWIGEXPORT BWAPI::Game * SWIGSTDCALL CSharp_GameImpl_SWIGUpcast(BWAPI::GameImpl *jarg1) {
    return (BWAPI::Game *)jarg1;
}

#ifdef __cplusplus
}
#endif

