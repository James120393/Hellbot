//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SWIG.BWTA {
 
	// defaults
	using System; 
	using System.Runtime.InteropServices; 
	// BWAPI
	using BWAPI;

public partial class BaseLocation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseLocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseLocation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseLocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bwtaPINVOKE.delete_BaseLocation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is BaseLocation)
      equal = (((BaseLocation)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(BaseLocation obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(BaseLocation obj1, BaseLocation obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(BaseLocation obj1, BaseLocation obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public virtual Position getPosition() {
    Position ret = new Position(bwtaPINVOKE.BaseLocation_getPosition(swigCPtr), true);
    return ret;
  }

  public virtual TilePosition getTilePosition() {
    TilePosition ret = new TilePosition(bwtaPINVOKE.BaseLocation_getTilePosition(swigCPtr), true);
    return ret;
  }

  public virtual Region getRegion() {
    global::System.IntPtr cPtr = bwtaPINVOKE.BaseLocation_getRegion(swigCPtr);
    Region ret = (cPtr == global::System.IntPtr.Zero) ? null : new Region(cPtr, false);
    return ret;
  }

  public virtual int minerals() {
    int ret = bwtaPINVOKE.BaseLocation_minerals(swigCPtr);
    return ret;
  }

  public virtual int gas() {
    int ret = bwtaPINVOKE.BaseLocation_gas(swigCPtr);
    return ret;
  }

  public virtual UnitPtrSet getMinerals() {
    UnitPtrSet ret = new UnitPtrSet(bwtaPINVOKE.BaseLocation_getMinerals(swigCPtr), false);
    return ret;
  }

  public virtual UnitPtrSet getStaticMinerals() {
    UnitPtrSet ret = new UnitPtrSet(bwtaPINVOKE.BaseLocation_getStaticMinerals(swigCPtr), false);
    return ret;
  }

  public virtual UnitPtrSet getGeysers() {
    UnitPtrSet ret = new UnitPtrSet(bwtaPINVOKE.BaseLocation_getGeysers(swigCPtr), false);
    return ret;
  }

  public virtual double getGroundDistance(BaseLocation other) {
    double ret = bwtaPINVOKE.BaseLocation_getGroundDistance(swigCPtr, BaseLocation.getCPtr(other));
    return ret;
  }

  public virtual double getAirDistance(BaseLocation other) {
    double ret = bwtaPINVOKE.BaseLocation_getAirDistance(swigCPtr, BaseLocation.getCPtr(other));
    return ret;
  }

  public virtual bool isIsland() {
    bool ret = bwtaPINVOKE.BaseLocation_isIsland(swigCPtr);
    return ret;
  }

  public virtual bool isMineralOnly() {
    bool ret = bwtaPINVOKE.BaseLocation_isMineralOnly(swigCPtr);
    return ret;
  }

  public virtual bool isStartLocation() {
    bool ret = bwtaPINVOKE.BaseLocation_isStartLocation(swigCPtr);
    return ret;
  }

}

}
