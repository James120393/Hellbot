//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SWIG.BWAPI {

public partial class WeaponType : Type {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal WeaponType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(bwapiPINVOKE.WeaponType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WeaponType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~WeaponType() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bwapiPINVOKE.delete_WeaponType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is WeaponType)
      equal = (((WeaponType)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(WeaponType obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(WeaponType obj1, WeaponType obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(WeaponType obj1, WeaponType obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public WeaponType() : this(bwapiPINVOKE.new_WeaponType__SWIG_0(), true) {
  }

  public WeaponType(int id) : this(bwapiPINVOKE.new_WeaponType__SWIG_1(id), true) {
  }

  public string getName() {
    string ret = bwapiPINVOKE.WeaponType_getName(swigCPtr);
    return ret;
  }

  public string c_str() {
    string ret = bwapiPINVOKE.WeaponType_c_str(swigCPtr);
    return ret;
  }

  public TechType getTech() {
    TechType ret = new TechType(bwapiPINVOKE.WeaponType_getTech(swigCPtr), true);
    return ret;
  }

  public UnitType whatUses() {
    UnitType ret = new UnitType(bwapiPINVOKE.WeaponType_whatUses(swigCPtr), true);
    return ret;
  }

  public int damageAmount() {
    int ret = bwapiPINVOKE.WeaponType_damageAmount(swigCPtr);
    return ret;
  }

  public int damageBonus() {
    int ret = bwapiPINVOKE.WeaponType_damageBonus(swigCPtr);
    return ret;
  }

  public int damageCooldown() {
    int ret = bwapiPINVOKE.WeaponType_damageCooldown(swigCPtr);
    return ret;
  }

  public int damageFactor() {
    int ret = bwapiPINVOKE.WeaponType_damageFactor(swigCPtr);
    return ret;
  }

  public UpgradeType upgradeType() {
    UpgradeType ret = new UpgradeType(bwapiPINVOKE.WeaponType_upgradeType(swigCPtr), true);
    return ret;
  }

  public DamageType damageType() {
    DamageType ret = new DamageType(bwapiPINVOKE.WeaponType_damageType(swigCPtr), true);
    return ret;
  }

  public ExplosionType explosionType() {
    ExplosionType ret = new ExplosionType(bwapiPINVOKE.WeaponType_explosionType(swigCPtr), true);
    return ret;
  }

  public int minRange() {
    int ret = bwapiPINVOKE.WeaponType_minRange(swigCPtr);
    return ret;
  }

  public int maxRange() {
    int ret = bwapiPINVOKE.WeaponType_maxRange(swigCPtr);
    return ret;
  }

  public int innerSplashRadius() {
    int ret = bwapiPINVOKE.WeaponType_innerSplashRadius(swigCPtr);
    return ret;
  }

  public int medianSplashRadius() {
    int ret = bwapiPINVOKE.WeaponType_medianSplashRadius(swigCPtr);
    return ret;
  }

  public int outerSplashRadius() {
    int ret = bwapiPINVOKE.WeaponType_outerSplashRadius(swigCPtr);
    return ret;
  }

  public bool targetsAir() {
    bool ret = bwapiPINVOKE.WeaponType_targetsAir(swigCPtr);
    return ret;
  }

  public bool targetsGround() {
    bool ret = bwapiPINVOKE.WeaponType_targetsGround(swigCPtr);
    return ret;
  }

  public bool targetsMechanical() {
    bool ret = bwapiPINVOKE.WeaponType_targetsMechanical(swigCPtr);
    return ret;
  }

  public bool targetsOrganic() {
    bool ret = bwapiPINVOKE.WeaponType_targetsOrganic(swigCPtr);
    return ret;
  }

  public bool targetsNonBuilding() {
    bool ret = bwapiPINVOKE.WeaponType_targetsNonBuilding(swigCPtr);
    return ret;
  }

  public bool targetsNonRobotic() {
    bool ret = bwapiPINVOKE.WeaponType_targetsNonRobotic(swigCPtr);
    return ret;
  }

  public bool targetsTerrain() {
    bool ret = bwapiPINVOKE.WeaponType_targetsTerrain(swigCPtr);
    return ret;
  }

  public bool targetsOrgOrMech() {
    bool ret = bwapiPINVOKE.WeaponType_targetsOrgOrMech(swigCPtr);
    return ret;
  }

  public bool targetsOwn() {
    bool ret = bwapiPINVOKE.WeaponType_targetsOwn(swigCPtr);
    return ret;
  }

}

}
