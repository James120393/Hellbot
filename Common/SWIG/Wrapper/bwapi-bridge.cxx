/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_bwapi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_bwapi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_bwapi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <set>
#include <algorithm>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include "BWAPI.h"

using namespace BWAPI;

SWIGINTERN std::vector< BWAPI::Position > *new_std_vector_Sl_BWAPI_Position_Sg___SWIG_2(int capacity){
        std::vector< BWAPI::Position >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< BWAPI::Position >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN BWAPI::Position std_vector_Sl_BWAPI_Position_Sg__getitemcopy(std::vector< BWAPI::Position > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN BWAPI::Position const &std_vector_Sl_BWAPI_Position_Sg__getitem(std::vector< BWAPI::Position > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__setitem(std::vector< BWAPI::Position > *self,int index,BWAPI::Position const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__AddRange(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< BWAPI::Position > *std_vector_Sl_BWAPI_Position_Sg__GetRange(std::vector< BWAPI::Position > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< BWAPI::Position >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__Insert(std::vector< BWAPI::Position > *self,int index,BWAPI::Position const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__InsertRange(std::vector< BWAPI::Position > *self,int index,std::vector< BWAPI::Position > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__RemoveAt(std::vector< BWAPI::Position > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__RemoveRange(std::vector< BWAPI::Position > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< BWAPI::Position > *std_vector_Sl_BWAPI_Position_Sg__Repeat(BWAPI::Position const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< BWAPI::Position >(count, value);
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_0(std::vector< BWAPI::Position > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_1(std::vector< BWAPI::Position > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__SetRange(std::vector< BWAPI::Position > *self,int index,std::vector< BWAPI::Position > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::set< BWAPI::Bullet * >::key_type const &std_set_Sl_BWAPI_Bullet_Sm__Sg__getitem(std::set< BWAPI::Bullet * > *self,std::set< BWAPI::Bullet * >::key_type const &key){
        std::set< BWAPI::Bullet * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Bullet_Sm__Sg__ContainsKey(std::set< BWAPI::Bullet * > *self,std::set< BWAPI::Bullet * >::key_type const &key){
        std::set< BWAPI::Bullet * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Bullet_Sm__Sg__Add(std::set< BWAPI::Bullet * > *self,std::set< BWAPI::Bullet * >::key_type const &key){
        std::set< BWAPI::Bullet * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Bullet_Sm__Sg__Remove(std::set< BWAPI::Bullet * > *self,std::set< BWAPI::Bullet * >::key_type const &key){
        std::set< BWAPI::Bullet * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Bullet * >::iterator *std_set_Sl_BWAPI_Bullet_Sm__Sg__create_iterator_begin(std::set< BWAPI::Bullet * > *self){
        return new std::set< BWAPI::Bullet * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Bullet * >::key_type const &std_set_Sl_BWAPI_Bullet_Sm__Sg__get_next_key(std::set< BWAPI::Bullet * > *self,std::set< BWAPI::Bullet * >::iterator *swigiterator){
        std::set< BWAPI::Bullet * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::BulletType >::key_type const &std_set_Sl_BWAPI_BulletType_Sg__getitem(std::set< BWAPI::BulletType > *self,std::set< BWAPI::BulletType >::key_type const &key){
        std::set< BWAPI::BulletType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_BulletType_Sg__ContainsKey(std::set< BWAPI::BulletType > *self,std::set< BWAPI::BulletType >::key_type const &key){
        std::set< BWAPI::BulletType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_BulletType_Sg__Add(std::set< BWAPI::BulletType > *self,std::set< BWAPI::BulletType >::key_type const &key){
        std::set< BWAPI::BulletType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_BulletType_Sg__Remove(std::set< BWAPI::BulletType > *self,std::set< BWAPI::BulletType >::key_type const &key){
        std::set< BWAPI::BulletType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::BulletType >::iterator *std_set_Sl_BWAPI_BulletType_Sg__create_iterator_begin(std::set< BWAPI::BulletType > *self){
        return new std::set< BWAPI::BulletType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::BulletType >::key_type const &std_set_Sl_BWAPI_BulletType_Sg__get_next_key(std::set< BWAPI::BulletType > *self,std::set< BWAPI::BulletType >::iterator *swigiterator){
        std::set< BWAPI::BulletType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::DamageType >::key_type const &std_set_Sl_BWAPI_DamageType_Sg__getitem(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_DamageType_Sg__ContainsKey(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_DamageType_Sg__Add(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_DamageType_Sg__Remove(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::DamageType >::iterator *std_set_Sl_BWAPI_DamageType_Sg__create_iterator_begin(std::set< BWAPI::DamageType > *self){
        return new std::set< BWAPI::DamageType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::DamageType >::key_type const &std_set_Sl_BWAPI_DamageType_Sg__get_next_key(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::iterator *swigiterator){
        std::set< BWAPI::DamageType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Error >::key_type const &std_set_Sl_BWAPI_Error_Sg__getitem(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Error_Sg__ContainsKey(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Error_Sg__Add(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Error_Sg__Remove(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Error >::iterator *std_set_Sl_BWAPI_Error_Sg__create_iterator_begin(std::set< BWAPI::Error > *self){
        return new std::set< BWAPI::Error >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Error >::key_type const &std_set_Sl_BWAPI_Error_Sg__get_next_key(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::iterator *swigiterator){
        std::set< BWAPI::Error >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::ExplosionType >::key_type const &std_set_Sl_BWAPI_ExplosionType_Sg__getitem(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_ExplosionType_Sg__ContainsKey(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_ExplosionType_Sg__Add(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_ExplosionType_Sg__Remove(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::ExplosionType >::iterator *std_set_Sl_BWAPI_ExplosionType_Sg__create_iterator_begin(std::set< BWAPI::ExplosionType > *self){
        return new std::set< BWAPI::ExplosionType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::ExplosionType >::key_type const &std_set_Sl_BWAPI_ExplosionType_Sg__get_next_key(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::iterator *swigiterator){
        std::set< BWAPI::ExplosionType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Force * >::key_type const &std_set_Sl_BWAPI_Force_Sm__Sg__getitem(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Force_Sm__Sg__ContainsKey(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Force_Sm__Sg__Add(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Force_Sm__Sg__Remove(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Force * >::iterator *std_set_Sl_BWAPI_Force_Sm__Sg__create_iterator_begin(std::set< BWAPI::Force * > *self){
        return new std::set< BWAPI::Force * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Force * >::key_type const &std_set_Sl_BWAPI_Force_Sm__Sg__get_next_key(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::iterator *swigiterator){
        std::set< BWAPI::Force * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::GameType >::key_type const &std_set_Sl_BWAPI_GameType_Sg__getitem(std::set< BWAPI::GameType > *self,std::set< BWAPI::GameType >::key_type const &key){
        std::set< BWAPI::GameType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_GameType_Sg__ContainsKey(std::set< BWAPI::GameType > *self,std::set< BWAPI::GameType >::key_type const &key){
        std::set< BWAPI::GameType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_GameType_Sg__Add(std::set< BWAPI::GameType > *self,std::set< BWAPI::GameType >::key_type const &key){
        std::set< BWAPI::GameType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_GameType_Sg__Remove(std::set< BWAPI::GameType > *self,std::set< BWAPI::GameType >::key_type const &key){
        std::set< BWAPI::GameType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::GameType >::iterator *std_set_Sl_BWAPI_GameType_Sg__create_iterator_begin(std::set< BWAPI::GameType > *self){
        return new std::set< BWAPI::GameType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::GameType >::key_type const &std_set_Sl_BWAPI_GameType_Sg__get_next_key(std::set< BWAPI::GameType > *self,std::set< BWAPI::GameType >::iterator *swigiterator){
        std::set< BWAPI::GameType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Order >::key_type const &std_set_Sl_BWAPI_Order_Sg__getitem(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Order_Sg__ContainsKey(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Order_Sg__Add(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Order_Sg__Remove(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Order >::iterator *std_set_Sl_BWAPI_Order_Sg__create_iterator_begin(std::set< BWAPI::Order > *self){
        return new std::set< BWAPI::Order >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Order >::key_type const &std_set_Sl_BWAPI_Order_Sg__get_next_key(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::iterator *swigiterator){
        std::set< BWAPI::Order >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Player * >::key_type const &std_set_Sl_BWAPI_Player_Sm__Sg__getitem(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Player_Sm__Sg__ContainsKey(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Player_Sm__Sg__Add(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Player_Sm__Sg__Remove(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Player * >::iterator *std_set_Sl_BWAPI_Player_Sm__Sg__create_iterator_begin(std::set< BWAPI::Player * > *self){
        return new std::set< BWAPI::Player * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Player * >::key_type const &std_set_Sl_BWAPI_Player_Sm__Sg__get_next_key(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::iterator *swigiterator){
        std::set< BWAPI::Player * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::PlayerType >::key_type const &std_set_Sl_BWAPI_PlayerType_Sg__getitem(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_PlayerType_Sg__ContainsKey(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_PlayerType_Sg__Add(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_PlayerType_Sg__Remove(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::PlayerType >::iterator *std_set_Sl_BWAPI_PlayerType_Sg__create_iterator_begin(std::set< BWAPI::PlayerType > *self){
        return new std::set< BWAPI::PlayerType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::PlayerType >::key_type const &std_set_Sl_BWAPI_PlayerType_Sg__get_next_key(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::iterator *swigiterator){
        std::set< BWAPI::PlayerType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Race >::key_type const &std_set_Sl_BWAPI_Race_Sg__getitem(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Race_Sg__ContainsKey(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Race_Sg__Add(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Race_Sg__Remove(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Race >::iterator *std_set_Sl_BWAPI_Race_Sg__create_iterator_begin(std::set< BWAPI::Race > *self){
        return new std::set< BWAPI::Race >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Race >::key_type const &std_set_Sl_BWAPI_Race_Sg__get_next_key(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::iterator *swigiterator){
        std::set< BWAPI::Race >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::TechType >::key_type const &std_set_Sl_BWAPI_TechType_Sg__getitem(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_TechType_Sg__ContainsKey(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_TechType_Sg__Add(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_TechType_Sg__Remove(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::TechType >::iterator *std_set_Sl_BWAPI_TechType_Sg__create_iterator_begin(std::set< BWAPI::TechType > *self){
        return new std::set< BWAPI::TechType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::TechType >::key_type const &std_set_Sl_BWAPI_TechType_Sg__get_next_key(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::iterator *swigiterator){
        std::set< BWAPI::TechType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::TilePosition >::key_type const &std_set_Sl_BWAPI_TilePosition_Sg__getitem(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_TilePosition_Sg__ContainsKey(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_TilePosition_Sg__Add(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_TilePosition_Sg__Remove(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::TilePosition >::iterator *std_set_Sl_BWAPI_TilePosition_Sg__create_iterator_begin(std::set< BWAPI::TilePosition > *self){
        return new std::set< BWAPI::TilePosition >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::TilePosition >::key_type const &std_set_Sl_BWAPI_TilePosition_Sg__get_next_key(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::iterator *swigiterator){
        std::set< BWAPI::TilePosition >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Unit * >::key_type const &std_set_Sl_BWAPI_Unit_Sm__Sg__getitem(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Unit_Sm__Sg__ContainsKey(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Unit_Sm__Sg__Add(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Unit_Sm__Sg__Remove(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Unit * >::iterator *std_set_Sl_BWAPI_Unit_Sm__Sg__create_iterator_begin(std::set< BWAPI::Unit * > *self){
        return new std::set< BWAPI::Unit * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Unit * >::key_type const &std_set_Sl_BWAPI_Unit_Sm__Sg__get_next_key(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::iterator *swigiterator){
        std::set< BWAPI::Unit * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UnitCommandType >::key_type const &std_set_Sl_BWAPI_UnitCommandType_Sg__getitem(std::set< BWAPI::UnitCommandType > *self,std::set< BWAPI::UnitCommandType >::key_type const &key){
        std::set< BWAPI::UnitCommandType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitCommandType_Sg__ContainsKey(std::set< BWAPI::UnitCommandType > *self,std::set< BWAPI::UnitCommandType >::key_type const &key){
        std::set< BWAPI::UnitCommandType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UnitCommandType_Sg__Add(std::set< BWAPI::UnitCommandType > *self,std::set< BWAPI::UnitCommandType >::key_type const &key){
        std::set< BWAPI::UnitCommandType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitCommandType_Sg__Remove(std::set< BWAPI::UnitCommandType > *self,std::set< BWAPI::UnitCommandType >::key_type const &key){
        std::set< BWAPI::UnitCommandType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UnitCommandType >::iterator *std_set_Sl_BWAPI_UnitCommandType_Sg__create_iterator_begin(std::set< BWAPI::UnitCommandType > *self){
        return new std::set< BWAPI::UnitCommandType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UnitCommandType >::key_type const &std_set_Sl_BWAPI_UnitCommandType_Sg__get_next_key(std::set< BWAPI::UnitCommandType > *self,std::set< BWAPI::UnitCommandType >::iterator *swigiterator){
        std::set< BWAPI::UnitCommandType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UnitSizeType >::key_type const &std_set_Sl_BWAPI_UnitSizeType_Sg__getitem(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitSizeType_Sg__ContainsKey(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UnitSizeType_Sg__Add(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitSizeType_Sg__Remove(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UnitSizeType >::iterator *std_set_Sl_BWAPI_UnitSizeType_Sg__create_iterator_begin(std::set< BWAPI::UnitSizeType > *self){
        return new std::set< BWAPI::UnitSizeType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UnitSizeType >::key_type const &std_set_Sl_BWAPI_UnitSizeType_Sg__get_next_key(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::iterator *swigiterator){
        std::set< BWAPI::UnitSizeType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UnitType >::key_type const &std_set_Sl_BWAPI_UnitType_Sg__getitem(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitType_Sg__ContainsKey(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UnitType_Sg__Add(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitType_Sg__Remove(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UnitType >::iterator *std_set_Sl_BWAPI_UnitType_Sg__create_iterator_begin(std::set< BWAPI::UnitType > *self){
        return new std::set< BWAPI::UnitType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UnitType >::key_type const &std_set_Sl_BWAPI_UnitType_Sg__get_next_key(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::iterator *swigiterator){
        std::set< BWAPI::UnitType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UpgradeType >::key_type const &std_set_Sl_BWAPI_UpgradeType_Sg__getitem(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UpgradeType_Sg__ContainsKey(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UpgradeType_Sg__Add(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UpgradeType_Sg__Remove(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UpgradeType >::iterator *std_set_Sl_BWAPI_UpgradeType_Sg__create_iterator_begin(std::set< BWAPI::UpgradeType > *self){
        return new std::set< BWAPI::UpgradeType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UpgradeType >::key_type const &std_set_Sl_BWAPI_UpgradeType_Sg__get_next_key(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::iterator *swigiterator){
        std::set< BWAPI::UpgradeType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::WeaponType >::key_type const &std_set_Sl_BWAPI_WeaponType_Sg__getitem(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_WeaponType_Sg__ContainsKey(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_WeaponType_Sg__Add(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_WeaponType_Sg__Remove(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::WeaponType >::iterator *std_set_Sl_BWAPI_WeaponType_Sg__create_iterator_begin(std::set< BWAPI::WeaponType > *self){
        return new std::set< BWAPI::WeaponType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::WeaponType >::key_type const &std_set_Sl_BWAPI_WeaponType_Sg__get_next_key(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::iterator *swigiterator){
        std::set< BWAPI::WeaponType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::list< BWAPI::Event >::iterator *std_list_Sl_BWAPI_Event_Sg__create_iterator_begin(std::list< BWAPI::Event > *self){
        return new std::list< BWAPI::Event >::iterator(self->begin());
      }
SWIGINTERN std::list< BWAPI::Event >::value_type const &std_list_Sl_BWAPI_Event_Sg__get_next_key(std::list< BWAPI::Event > *self,std::list< BWAPI::Event >::iterator *swigiterator){
        std::list< BWAPI::Event >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::list< BWAPI::UnitType >::iterator *std_list_Sl_BWAPI_UnitType_Sg__create_iterator_begin(std::list< BWAPI::UnitType > *self){
        return new std::list< BWAPI::UnitType >::iterator(self->begin());
      }
SWIGINTERN std::list< BWAPI::UnitType >::value_type const &std_list_Sl_BWAPI_UnitType_Sg__get_next_key(std::list< BWAPI::UnitType > *self,std::list< BWAPI::UnitType >::iterator *swigiterator){
        std::list< BWAPI::UnitType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::map< BWAPI::TilePosition,double >::mapped_type const &std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__getitem(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double >::key_type const &key){
        std::map< BWAPI::TilePosition, double, std::less< BWAPI::TilePosition > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__setitem(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double >::key_type const &key,std::map< BWAPI::TilePosition,double >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__ContainsKey(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double >::key_type const &key){
        std::map< BWAPI::TilePosition, double, std::less< BWAPI::TilePosition > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__Add(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double >::key_type const &key,std::map< BWAPI::TilePosition,double >::mapped_type const &val){
        std::map< BWAPI::TilePosition, double, std::less< BWAPI::TilePosition > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< BWAPI::TilePosition, double >(key, val));
      }
SWIGINTERN bool std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__Remove(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double >::key_type const &key){
        std::map< BWAPI::TilePosition, double, std::less< BWAPI::TilePosition > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__create_iterator_begin(std::map< BWAPI::TilePosition,double > *self){
        return new std::map< BWAPI::TilePosition, double, std::less< BWAPI::TilePosition > >::iterator(self->begin());
      }
SWIGINTERN std::map< BWAPI::TilePosition,double >::key_type const &std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__get_next_key(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *swigiterator){
        std::map< BWAPI::TilePosition, double, std::less< BWAPI::TilePosition > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__destroy_iterator(std::map< BWAPI::TilePosition,double > *self,std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< BWAPI::UnitType,int >::mapped_type const &std_map_Sl_BWAPI_UnitType_Sc_int_Sg__getitem(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int >::key_type const &key){
        std::map< BWAPI::UnitType, int, std::less< BWAPI::UnitType > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_BWAPI_UnitType_Sc_int_Sg__setitem(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int >::key_type const &key,std::map< BWAPI::UnitType,int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_BWAPI_UnitType_Sc_int_Sg__ContainsKey(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int >::key_type const &key){
        std::map< BWAPI::UnitType, int, std::less< BWAPI::UnitType > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_BWAPI_UnitType_Sc_int_Sg__Add(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int >::key_type const &key,std::map< BWAPI::UnitType,int >::mapped_type const &val){
        std::map< BWAPI::UnitType, int, std::less< BWAPI::UnitType > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< BWAPI::UnitType, int >(key, val));
      }
SWIGINTERN bool std_map_Sl_BWAPI_UnitType_Sc_int_Sg__Remove(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int >::key_type const &key){
        std::map< BWAPI::UnitType, int, std::less< BWAPI::UnitType > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *std_map_Sl_BWAPI_UnitType_Sc_int_Sg__create_iterator_begin(std::map< BWAPI::UnitType,int > *self){
        return new std::map< BWAPI::UnitType, int, std::less< BWAPI::UnitType > >::iterator(self->begin());
      }
SWIGINTERN std::map< BWAPI::UnitType,int >::key_type const &std_map_Sl_BWAPI_UnitType_Sc_int_Sg__get_next_key(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *swigiterator){
        std::map< BWAPI::UnitType, int, std::less< BWAPI::UnitType > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_BWAPI_UnitType_Sc_int_Sg__destroy_iterator(std::map< BWAPI::UnitType,int > *self,std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::vector< BWAPI::TilePosition > *new_std_vector_Sl_BWAPI_TilePosition_Sg___SWIG_2(int capacity){
        std::vector< BWAPI::TilePosition >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< BWAPI::TilePosition >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN BWAPI::TilePosition std_vector_Sl_BWAPI_TilePosition_Sg__getitemcopy(std::vector< BWAPI::TilePosition > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN BWAPI::TilePosition const &std_vector_Sl_BWAPI_TilePosition_Sg__getitem(std::vector< BWAPI::TilePosition > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__setitem(std::vector< BWAPI::TilePosition > *self,int index,BWAPI::TilePosition const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__AddRange(std::vector< BWAPI::TilePosition > *self,std::vector< BWAPI::TilePosition > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< BWAPI::TilePosition > *std_vector_Sl_BWAPI_TilePosition_Sg__GetRange(std::vector< BWAPI::TilePosition > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< BWAPI::TilePosition >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__Insert(std::vector< BWAPI::TilePosition > *self,int index,BWAPI::TilePosition const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__InsertRange(std::vector< BWAPI::TilePosition > *self,int index,std::vector< BWAPI::TilePosition > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__RemoveAt(std::vector< BWAPI::TilePosition > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__RemoveRange(std::vector< BWAPI::TilePosition > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< BWAPI::TilePosition > *std_vector_Sl_BWAPI_TilePosition_Sg__Repeat(BWAPI::TilePosition const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< BWAPI::TilePosition >(count, value);
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__Reverse__SWIG_0(std::vector< BWAPI::TilePosition > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__Reverse__SWIG_1(std::vector< BWAPI::TilePosition > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWAPI_TilePosition_Sg__SetRange(std::vector< BWAPI::TilePosition > *self,int index,std::vector< BWAPI::TilePosition > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::set< BWAPI::Position >::key_type const &std_set_Sl_BWAPI_Position_Sg__getitem(std::set< BWAPI::Position > *self,std::set< BWAPI::Position >::key_type const &key){
        std::set< BWAPI::Position >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Position_Sg__ContainsKey(std::set< BWAPI::Position > *self,std::set< BWAPI::Position >::key_type const &key){
        std::set< BWAPI::Position >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Position_Sg__Add(std::set< BWAPI::Position > *self,std::set< BWAPI::Position >::key_type const &key){
        std::set< BWAPI::Position >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Position_Sg__Remove(std::set< BWAPI::Position > *self,std::set< BWAPI::Position >::key_type const &key){
        std::set< BWAPI::Position >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Position >::iterator *std_set_Sl_BWAPI_Position_Sg__create_iterator_begin(std::set< BWAPI::Position > *self){
        return new std::set< BWAPI::Position >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Position >::key_type const &std_set_Sl_BWAPI_Position_Sg__get_next_key(std::set< BWAPI::Position > *self,std::set< BWAPI::Position >::iterator *swigiterator){
        std::set< BWAPI::Position >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_BWAPI_init() {
  BWAPI::BWAPI_init();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPI_getRevision() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::BWAPI_getRevision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BWAPI_isDebug() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)BWAPI::BWAPI_isDebug();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Type(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Type *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Type *)new BWAPI::Type(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Type_opInt(void * jarg1) {
  int jresult ;
  BWAPI::Type *arg1 = (BWAPI::Type *) 0 ;
  int result;
  
  arg1 = (BWAPI::Type *)jarg1; 
  result = (int)((BWAPI::Type const *)arg1)->operator int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Type_getID(void * jarg1) {
  int jresult ;
  BWAPI::Type *arg1 = (BWAPI::Type *) 0 ;
  int result;
  
  arg1 = (BWAPI::Type *)jarg1; 
  result = (int)((BWAPI::Type const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Type(void * jarg1) {
  BWAPI::Type *arg1 = (BWAPI::Type *) 0 ;
  
  arg1 = (BWAPI::Type *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameType__SWIG_0() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)new BWAPI::GameType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::GameType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::GameType *)new BWAPI::GameType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::GameType *)jarg1; 
  result = (std::string *) &((BWAPI::GameType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::GameType *)jarg1; 
  result = (char *)((BWAPI::GameType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameType(void * jarg1) {
  BWAPI::GameType *arg1 = (BWAPI::GameType *) 0 ;
  
  arg1 = (BWAPI::GameType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getGameType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::GameType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::GameTypes::getGameType(arg1);
  jresult = new BWAPI::GameType((const BWAPI::GameType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allGameTypes() {
  void * jresult ;
  std::set< BWAPI::GameType > *result = 0 ;
  
  result = (std::set< BWAPI::GameType > *) &BWAPI::GameTypes::allGameTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameTypes_init() {
  BWAPI::GameTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Melee_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Melee;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Free_For_All_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Free_For_All;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_One_on_One_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::One_on_One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Capture_The_Flag_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Capture_The_Flag;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Greed_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Greed;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Slaughter_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Slaughter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Sudden_Death_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Sudden_Death;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Ladder_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Ladder;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Use_Map_Settings_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Use_Map_Settings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Team_Melee_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Team_Melee;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Team_Free_For_All_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Team_Free_For_All;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Team_Capture_The_Flag_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Team_Capture_The_Flag;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Top_vs_Bottom_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Top_vs_Bottom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Pro_Gamer_League_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Pro_Gamer_League;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_None_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypes_Unknown_get() {
  void * jresult ;
  BWAPI::GameType *result = 0 ;
  
  result = (BWAPI::GameType *)&BWAPI::GameTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Race__SWIG_0() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)new BWAPI::Race();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Race__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Race *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Race *)new BWAPI::Race(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Race_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (std::string *) &((BWAPI::Race const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Race_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (char *)((BWAPI::Race const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getWorker(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = ((BWAPI::Race const *)arg1)->getWorker();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getCenter(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = ((BWAPI::Race const *)arg1)->getCenter();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getRefinery(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = ((BWAPI::Race const *)arg1)->getRefinery();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getTransport(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = ((BWAPI::Race const *)arg1)->getTransport();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getSupplyProvider(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = ((BWAPI::Race const *)arg1)->getSupplyProvider();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Race(void * jarg1) {
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRace(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::Race result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::Races::getRace(arg1);
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allRaces() {
  void * jresult ;
  std::set< BWAPI::Race > *result = 0 ;
  
  result = (std::set< BWAPI::Race > *) &BWAPI::Races::allRaces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Races_init() {
  BWAPI::Races::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_Zerg_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Zerg;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_Terran_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Terran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_Protoss_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Protoss;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_Random_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Random;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_Other_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Other;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_None_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Races_Unknown_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechType__SWIG_0() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)new BWAPI::TechType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::TechType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::TechType *)new BWAPI::TechType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TechType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (std::string *) &((BWAPI::TechType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TechType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (char *)((BWAPI::TechType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = ((BWAPI::TechType const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_mineralPrice(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->mineralPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_gasPrice(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->gasPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_researchTime(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->researchTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_energyUsed(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->energyUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_whatResearches(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = ((BWAPI::TechType const *)arg1)->whatResearches();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_getWeapon(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::WeaponType result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = ((BWAPI::TechType const *)arg1)->getWeapon();
  jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechType_targetsUnit(void * jarg1) {
  unsigned int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (bool)((BWAPI::TechType const *)arg1)->targetsUnit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechType_targetsPosition(void * jarg1) {
  unsigned int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (bool)((BWAPI::TechType const *)arg1)->targetsPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_whatUses(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (std::set< BWAPI::UnitType > *) &((BWAPI::TechType const *)arg1)->whatUses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_getOrder(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  Order result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = ((BWAPI::TechType const *)arg1)->getOrder();
  jresult = new Order((const Order &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TechType(void * jarg1) {
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getTechType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::TechType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::TechTypes::getTechType(arg1);
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allTechTypes() {
  void * jresult ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  result = (std::set< BWAPI::TechType > *) &BWAPI::TechTypes::allTechTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypes_init() {
  BWAPI::TechTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Stim_Packs_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Stim_Packs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Lockdown_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Lockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_EMP_Shockwave_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::EMP_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Spider_Mines_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Spider_Mines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Scanner_Sweep_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Scanner_Sweep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Tank_Siege_Mode_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Tank_Siege_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Defensive_Matrix_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Defensive_Matrix;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Irradiate_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Yamato_Gun_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Cloaking_Field_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Cloaking_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Personnel_Cloaking_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Personnel_Cloaking;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Burrowing_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Burrowing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Infestation_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Infestation;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Spawn_Broodlings_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Spawn_Broodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Dark_Swarm_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Plague_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Consume_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Ensnare_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Parasite_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Parasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Psionic_Storm_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Psionic_Storm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Hallucination_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Hallucination;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Recall_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Recall;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Stasis_Field_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Stasis_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Archon_Warp_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Archon_Warp;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Restoration_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Disruption_Web_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Mind_Control_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Mind_Control;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Dark_Archon_Meld_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Dark_Archon_Meld;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Feedback_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Feedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Optical_Flare_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Optical_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Maelstrom_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Maelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Lurker_Aspect_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Lurker_Aspect;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Healing_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Healing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_None_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Unknown_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypes_Nuclear_Strike_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Nuclear_Strike;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeType__SWIG_0() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UpgradeType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UpgradeType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (std::string *) &((BWAPI::UpgradeType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UpgradeType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (char *)((BWAPI::UpgradeType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_mineralPrice__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPrice(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_mineralPrice__SWIG_1(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_mineralPriceFactor(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_gasPrice__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPrice(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_gasPrice__SWIG_1(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_gasPriceFactor(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_upgradeTime__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_upgradeTime__SWIG_1(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_upgradeTimeFactor(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_maxRepeats(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->maxRepeats();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_whatUpgrades(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->whatUpgrades();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_whatsRequired__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int arg2 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((BWAPI::UpgradeType const *)arg1)->whatsRequired(arg2);
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_whatsRequired__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->whatsRequired();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_whatUses(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (std::set< BWAPI::UnitType > *) &((BWAPI::UpgradeType const *)arg1)->whatUses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UpgradeType(void * jarg1) {
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUpgradeType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::UpgradeType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::UpgradeTypes::getUpgradeType(arg1);
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUpgradeTypes() {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  result = (std::set< BWAPI::UpgradeType > *) &BWAPI::UpgradeTypes::allUpgradeTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypes_init() {
  BWAPI::UpgradeTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Terran_Infantry_Armor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Infantry_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Terran_Vehicle_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Terran_Ship_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Ship_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Zerg_Carapace_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Carapace;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Zerg_Flyer_Carapace_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Protoss_Ground_Armor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Ground_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Protoss_Air_Armor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Air_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Terran_Infantry_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Terran_Vehicle_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Terran_Ship_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Ship_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Zerg_Melee_Attacks_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Zerg_Missile_Attacks_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Zerg_Flyer_Attacks_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Protoss_Ground_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Protoss_Air_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Air_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Protoss_Plasma_Shields_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_U_238_Shells_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::U_238_Shells;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Ion_Thrusters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ion_Thrusters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Titan_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Titan_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Ocular_Implants_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ocular_Implants;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Moebius_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Moebius_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Apollo_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Apollo_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Colossus_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Colossus_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Ventral_Sacs_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ventral_Sacs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Antennae_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Antennae;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Pneumatized_Carapace_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Pneumatized_Carapace;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Metabolic_Boost_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Metabolic_Boost;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Adrenal_Glands_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Adrenal_Glands;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Muscular_Augments_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Muscular_Augments;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Grooved_Spines_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Grooved_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Gamete_Meiosis_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gamete_Meiosis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Metasynaptic_Node_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Metasynaptic_Node;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Singularity_Charge_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Singularity_Charge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Leg_Enhancements_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Leg_Enhancements;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Scarab_Damage_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Scarab_Damage;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Reaver_Capacity_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Reaver_Capacity;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Gravitic_Drive_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Drive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Sensor_Array_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Sensor_Array;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Gravitic_Boosters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Boosters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Khaydarin_Amulet_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Khaydarin_Amulet;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Apial_Sensors_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Apial_Sensors;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Gravitic_Thrusters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Thrusters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Carrier_Capacity_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Carrier_Capacity;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Khaydarin_Core_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Khaydarin_Core;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Argus_Jewel_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Argus_Jewel;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Argus_Talisman_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Argus_Talisman;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Caduceus_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Caduceus_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Chitinous_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Chitinous_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Anabolic_Synthesis_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Anabolic_Synthesis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Charon_Boosters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Charon_Boosters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_None_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypes_Unknown_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position__SWIG_0() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)new BWAPI::Position();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Position *)new BWAPI::Position((BWAPI::TilePosition const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Position *)new BWAPI::Position(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator ==((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator !=((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator <((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opNonzero(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (bool)((BWAPI::Position const *)arg1)->operator bool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_isValid(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (bool)((BWAPI::Position const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opPlus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::Position const *)arg1)->operator +((BWAPI::Position const &)*arg2);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opMinus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::Position const *)arg1)->operator -((BWAPI::Position const &)*arg2);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_makeValid(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (BWAPI::Position *) &(arg1)->makeValid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Position *) &(arg1)->operator +=((BWAPI::Position const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opSubtract(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Position *) &(arg1)->operator -=((BWAPI::Position const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Position_getDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  double result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (double)((BWAPI::Position const *)arg1)->getDistance((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Position_getApproxDistance(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  int result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (int)((BWAPI::Position const *)arg1)->getApproxDistance((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Position_getLength(void * jarg1) {
  double jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  double result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (double)((BWAPI::Position const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_hasPath(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->hasPath((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_x(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int *) &(arg1)->x();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_y(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int *) &(arg1)->y();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Position_xConst(void * jarg1) {
  int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int)((BWAPI::Position const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Position_yConst(void * jarg1) {
  int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int)((BWAPI::Position const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Position(void * jarg1) {
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Positions_Invalid_get() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)&BWAPI::Positions::Invalid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Positions_None_get() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)&BWAPI::Positions::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Positions_Unknown_get() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)&BWAPI::Positions::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AIModule() {
  void * jresult ;
  BWAPI::AIModule *result = 0 ;
  
  result = (BWAPI::AIModule *)new BWAPI::AIModule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AIModule(void * jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onStart(void * jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  (arg1)->onStart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onEnd(void * jarg1, unsigned int jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->onEnd(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onFrame(void * jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  (arg1)->onFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onSendText(void * jarg1, char * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  std::string arg2 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->onSendText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onReceiveText(void * jarg1, void * jarg2, char * jarg3) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  std::string arg3 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->onReceiveText(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onPlayerLeft(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  (arg1)->onPlayerLeft(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onNukeDetect(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->onNukeDetect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitDiscover(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitDiscover(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitEvade(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitEvade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitShow(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitShow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitHide(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitHide(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitCreate(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitCreate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitDestroy(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitDestroy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitMorph(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitMorph(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitRenegade(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitRenegade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onSaveGame(void * jarg1, char * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  std::string arg2 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->onSaveGame(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitComplete(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitComplete(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onPlayerDropped(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  (arg1)->onPlayerDropped(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TournamentModule() {
  void * jresult ;
  BWAPI::TournamentModule *result = 0 ;
  
  result = (BWAPI::TournamentModule *)new BWAPI::TournamentModule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TournamentModule(void * jarg1) {
  BWAPI::TournamentModule *arg1 = (BWAPI::TournamentModule *) 0 ;
  
  arg1 = (BWAPI::TournamentModule *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TournamentModule_onAction__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::TournamentModule *arg1 = (BWAPI::TournamentModule *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (BWAPI::TournamentModule *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  result = (bool)(arg1)->onAction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TournamentModule_onAction__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::TournamentModule *arg1 = (BWAPI::TournamentModule *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::TournamentModule *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->onAction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TournamentModule_onFirstAdvertisement(void * jarg1) {
  BWAPI::TournamentModule *arg1 = (BWAPI::TournamentModule *) 0 ;
  
  arg1 = (BWAPI::TournamentModule *)jarg1; 
  (arg1)->onFirstAdvertisement();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)new BWAPI::Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Color *)new BWAPI::Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (BWAPI::Color *)new BWAPI::Color(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_red(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->red();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_green(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->green();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_blue(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->blue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  
  arg1 = (BWAPI::Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Colors_init() {
  BWAPI::Colors::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Red_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Red;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Blue_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Blue;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Teal_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Teal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Purple_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Purple;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Orange_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Orange;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Brown_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Brown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_White_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::White;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Yellow_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Yellow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Green_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Green;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Cyan_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Cyan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Black_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Black;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colors_Grey_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Grey;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TILE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageType__SWIG_0() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)new BWAPI::DamageType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::DamageType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::DamageType *)new BWAPI::DamageType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DamageType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  result = (std::string *) &((BWAPI::DamageType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DamageType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  result = (char *)((BWAPI::DamageType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DamageType(void * jarg1) {
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getDamageType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::DamageType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::DamageTypes::getDamageType(arg1);
  jresult = new BWAPI::DamageType((const BWAPI::DamageType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allDamageTypes() {
  void * jresult ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  result = (std::set< BWAPI::DamageType > *) &BWAPI::DamageTypes::allDamageTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTypes_init() {
  BWAPI::DamageTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_Independent_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Independent;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_Explosive_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Explosive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_Concussive_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Concussive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_Normal_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Normal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_Ignore_Armor_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Ignore_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_None_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypes_Unknown_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_0() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)new BWAPI::Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Error *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Error *)new BWAPI::Error(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Error_toString(void * jarg1) {
  char * jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Error *)jarg1; 
  result = ((BWAPI::Error const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Error_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::Error *)jarg1; 
  result = (char *)((BWAPI::Error const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Error(void * jarg1) {
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  
  arg1 = (BWAPI::Error *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getError(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::Error result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::Errors::getError(arg1);
  jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allErrors() {
  void * jresult ;
  std::set< BWAPI::Error > *result = 0 ;
  
  result = (std::set< BWAPI::Error > *) &BWAPI::Errors::allErrors();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Errors_init() {
  BWAPI::Errors::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unit_Does_Not_Exist_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Does_Not_Exist;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unit_Not_Visible_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Not_Visible;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unit_Not_Owned_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Not_Owned;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unit_Busy_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Busy;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Incompatible_UnitType_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_UnitType;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Incompatible_TechType_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_TechType;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Incompatible_State_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_State;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Already_Researched_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Already_Researched;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Fully_Upgraded_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Fully_Upgraded;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Currently_Researching_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Currently_Researching;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Currently_Upgrading_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Currently_Upgrading;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Minerals_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Minerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Gas_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Gas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Supply_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Supply;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Energy_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Energy;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Tech_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Tech;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Ammo_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Ammo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Insufficient_Space_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Space;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Invalid_Tile_Position_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Invalid_Tile_Position;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unbuildable_Location_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unbuildable_Location;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unreachable_Location_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unreachable_Location;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Out_Of_Range_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Out_Of_Range;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unable_To_Hit_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unable_To_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Access_Denied_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Access_Denied;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_File_Not_Found_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::File_Not_Found;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Invalid_Parameter_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Invalid_Parameter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_None_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Errors_Unknown_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionType__SWIG_0() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::ExplosionType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ExplosionType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  result = (std::string *) &((BWAPI::ExplosionType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ExplosionType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  result = (char *)((BWAPI::ExplosionType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExplosionType(void * jarg1) {
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getExplosionType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::ExplosionType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::ExplosionTypes::getExplosionType(arg1);
  jresult = new BWAPI::ExplosionType((const BWAPI::ExplosionType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allExplosionTypes() {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  result = (std::set< BWAPI::ExplosionType > *) &BWAPI::ExplosionTypes::allExplosionTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExplosionTypes_init() {
  BWAPI::ExplosionTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_None_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Normal_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Normal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Radial_Splash_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Radial_Splash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Enemy_Splash_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Enemy_Splash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Lockdown_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Lockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Nuclear_Missile_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Nuclear_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Parasite_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Parasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Broodlings_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Broodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_EMP_Shockwave_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::EMP_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Irradiate_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Ensnare_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Plague_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Stasis_Field_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Stasis_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Dark_Swarm_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Consume_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Yamato_Gun_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Restoration_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Disruption_Web_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Corrosive_Acid_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Corrosive_Acid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Mind_Control_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Mind_Control;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Feedback_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Feedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Optical_Flare_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Optical_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Maelstrom_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Maelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Air_Splash_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Air_Splash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypes_Unknown_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Force_getID(void * jarg1) {
  int jresult ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  int result;
  
  arg1 = (BWAPI::Force *)jarg1; 
  result = (int)((BWAPI::Force const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Force_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Force *)jarg1; 
  result = ((BWAPI::Force const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Force_getPlayers(void * jarg1) {
  void * jresult ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  std::set< BWAPI::Player * > result;
  
  arg1 = (BWAPI::Force *)jarg1; 
  result = ((BWAPI::Force const *)arg1)->getPlayers();
  jresult = new std::set< BWAPI::Player * >((const std::set< BWAPI::Player * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_0() {
  void * jresult ;
  BWAPI::Event *result = 0 ;
  
  result = (BWAPI::Event *)new BWAPI::Event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Event(void * jarg1) {
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Event__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Event *arg1 = 0 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Event const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Event *)new BWAPI::Event((BWAPI::Event const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Event *arg2 = 0 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = (BWAPI::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Event const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Event *) &(arg1)->operator =((BWAPI::Event const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Event_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Event *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = (BWAPI::Event *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Event const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Event const *)arg1)->operator ==((BWAPI::Event const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_MatchStart() {
  void * jresult ;
  BWAPI::Event result;
  
  result = BWAPI::Event::MatchStart();
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_MatchEnd(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  BWAPI::Event result;
  
  arg1 = jarg1 ? true : false; 
  result = BWAPI::Event::MatchEnd(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_MatchFrame() {
  void * jresult ;
  BWAPI::Event result;
  
  result = BWAPI::Event::MatchFrame();
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_MenuFrame() {
  void * jresult ;
  BWAPI::Event result;
  
  result = BWAPI::Event::MenuFrame();
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_SendText__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  BWAPI::Event result;
  
  arg1 = (char *)jarg1; 
  result = BWAPI::Event::SendText((char const *)arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_SendText__SWIG_1() {
  void * jresult ;
  BWAPI::Event result;
  
  result = BWAPI::Event::SendText();
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_ReceiveText__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  char *arg2 = (char *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  arg2 = (char *)jarg2; 
  result = BWAPI::Event::ReceiveText(arg1,(char const *)arg2);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_ReceiveText__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = BWAPI::Event::ReceiveText(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_PlayerLeft(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = BWAPI::Event::PlayerLeft(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_PlayerDropped(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = BWAPI::Event::PlayerDropped(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_NukeDetect(void * jarg1) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWAPI::Event result;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = BWAPI::Event::NukeDetect(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitDiscover(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitDiscover(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitEvade(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitEvade(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitShow(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitShow(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitHide(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitHide(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitCreate(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitCreate(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitDestroy(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitDestroy(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitMorph(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitMorph(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitRenegade(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitRenegade(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_SaveGame__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  BWAPI::Event result;
  
  arg1 = (char *)jarg1; 
  result = BWAPI::Event::SaveGame((char const *)arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_SaveGame__SWIG_1() {
  void * jresult ;
  BWAPI::Event result;
  
  result = BWAPI::Event::SaveGame();
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_UnitComplete(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Event result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::Event::UnitComplete(arg1);
  jresult = new BWAPI::Event((const BWAPI::Event &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Event_getType(void * jarg1) {
  int jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::EventType::Enum result;
  
  arg1 = (BWAPI::Event *)jarg1; 
  result = (BWAPI::EventType::Enum)((BWAPI::Event const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_getPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Event *)jarg1; 
  result = ((BWAPI::Event const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Event_getText(void * jarg1) {
  char * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  result = (std::string *) &((BWAPI::Event const *)arg1)->getText();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_getUnit(void * jarg1) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Event const *)arg1)->getUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_getPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::Event const *)arg1)->getPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Event_isWinner(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Event *)jarg1; 
  result = (bool)((BWAPI::Event const *)arg1)->isWinner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_setType(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::EventType::Enum arg2 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = (BWAPI::EventType::Enum)jarg2; 
  result = (BWAPI::Event *) &(arg1)->setType(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_setPosition(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (BWAPI::Event *) &(arg1)->setPosition(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_setText(void * jarg1, char * jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  char *arg2 = (char *) 0 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BWAPI::Event *) &(arg1)->setText((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_setUnit(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (BWAPI::Event *) &(arg1)->setUnit(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_setPlayer(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (BWAPI::Event *) &(arg1)->setPlayer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Event_setWinner(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BWAPI::Event *arg1 = (BWAPI::Event *) 0 ;
  bool arg2 ;
  BWAPI::Event *result = 0 ;
  
  arg1 = (BWAPI::Event *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BWAPI::Event *) &(arg1)->setWinner(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_0() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)new BWAPI::Order();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Order *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Order *)new BWAPI::Order(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Order_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::Order *)jarg1; 
  result = (std::string *) &((BWAPI::Order const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Order_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::Order *)jarg1; 
  result = (char *)((BWAPI::Order const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Order(void * jarg1) {
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  
  arg1 = (BWAPI::Order *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getOrder(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::Order result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::Orders::getOrder(arg1);
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allOrders() {
  void * jresult ;
  std::set< BWAPI::Order > *result = 0 ;
  
  result = (std::set< BWAPI::Order > *) &BWAPI::Orders::allOrders();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Orders_init() {
  BWAPI::Orders::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Die_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Die;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Stop_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Stop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Guard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Guard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PlayerGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlayerGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_TurretGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TurretGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_BunkerGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BunkerGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Move_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Move;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_AttackUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_AttackTile_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackTile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Hover_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Hover;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_AttackMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_InfestedCommandCenter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InfestedCommandCenter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_UnusedNothing_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::UnusedNothing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_UnusedPowerup_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::UnusedPowerup;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_TowerGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TowerGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_VultureMine_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::VultureMine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Nothing_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Nothing3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastInfestation_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastInfestation;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_InfestingCommandCenter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InfestingCommandCenter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PlaceBuilding_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceBuilding;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_BuildProtoss2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildProtoss2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ConstructingBuilding_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ConstructingBuilding;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Repair_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Repair;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PlaceAddon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceAddon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_BuildAddon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildAddon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Train_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Train;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RallyPointUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RallyPointUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RallyPointTile_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RallyPointTile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ZergBirth_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ZergBirth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ZergUnitMorph_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ZergUnitMorph;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ZergBuildingMorph_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ZergBuildingMorph;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_IncompleteBuilding_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::IncompleteBuilding;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_BuildNydusExit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildNydusExit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_EnterNydusCanal_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::EnterNydusCanal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Follow_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Follow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Carrier_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Carrier;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ReaverCarrierMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverCarrierMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CarrierIgnore2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierIgnore2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Reaver_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Reaver;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_TrainFighter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TrainFighter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_InterceptorAttack_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InterceptorAttack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ScarabAttack_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ScarabAttack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RechargeShieldsUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RechargeShieldsUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RechargeShieldsBattery_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RechargeShieldsBattery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ShieldBattery_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ShieldBattery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_InterceptorReturn_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InterceptorReturn;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_BuildingLand_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildingLand;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_BuildingLiftOff_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildingLiftOff;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_DroneLiftOff_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DroneLiftOff;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_LiftingOff_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::LiftingOff;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ResearchTech_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ResearchTech;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Upgrade_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Upgrade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Larva_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Larva;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_SpawningLarva_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SpawningLarva;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Harvest1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Harvest2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_MoveToGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MoveToGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_WaitForGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WaitForGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_HarvestGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HarvestGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ReturnGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReturnGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_MoveToMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MoveToMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_WaitForMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WaitForMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_MiningMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MiningMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Harvest3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Harvest4_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ReturnMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReturnMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Interrupted_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Interrupted;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_EnterTransport_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::EnterTransport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PickupIdle_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PickupIdle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PickupTransport_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PickupTransport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PickupBunker_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PickupBunker;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Pickup4_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PowerupIdle_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PowerupIdle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Sieging_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Sieging;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Unsieging_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unsieging;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_InitCreepGrowth_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InitCreepGrowth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_SpreadCreep_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SpreadCreep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_StoppingCreepGrowth_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::StoppingCreepGrowth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_GuardianAspect_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::GuardianAspect;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ArchonWarp_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ArchonWarp;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CompletingArchonsummon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CompletingArchonsummon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_HoldPosition_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Cloak_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Cloak;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Decloak_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Decloak;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Unload_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unload;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_MoveUnload_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MoveUnload;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_FireYamatoGun_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::FireYamatoGun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastLockdown_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastLockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Burrowing_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Burrowing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Burrowed_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Burrowed;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Unburrowing_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unburrowing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastDarkSwarm_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastDarkSwarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastParasite_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastParasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastSpawnBroodlings_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastSpawnBroodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastEMPShockwave_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastEMPShockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_NukeWait_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeWait;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_NukeTrain_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeTrain;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_NukeLaunch_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeLaunch;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukePaint_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukePaint;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_NukeUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastNuclearStrike_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastNuclearStrike;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_NukeTrack_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeTrack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CloakNearbyUnits_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CloakNearbyUnits;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_PlaceMine_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceMine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RightClickAction_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RightClickAction;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastRecall_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastRecall;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_TeleporttoLocation_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TeleporttoLocation;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastScannerSweep_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastScannerSweep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Scanner_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Scanner;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastDefensiveMatrix_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastDefensiveMatrix;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastPsionicStorm_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastPsionicStorm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastIrradiate_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastIrradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastPlague_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastPlague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastConsume_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastConsume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastEnsnare_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastEnsnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastStasisField_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastStasisField;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastHallucination_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastHallucination;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Hallucination2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Hallucination2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ResetCollision_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ResetCollision;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Patrol_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Patrol;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CTFCOPInit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOPInit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTFCOPStarted_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOPStarted;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CTFCOP2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOP2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ComputerAI_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ComputerAI;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_AtkMoveEP_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AtkMoveEP;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_HarassMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HarassMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_AIPatrol_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AIPatrol;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_GuardPost_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::GuardPost;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RescuePassive_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RescuePassive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Neutral_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Neutral;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_ComputerReturn_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ComputerReturn;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_SelfDestrucing_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SelfDestrucing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Critter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Critter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_HiddenGun_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HiddenGun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_OpenDoor_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::OpenDoor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CloseDoor_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CloseDoor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_HideTrap_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HideTrap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_RevealTrap_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RevealTrap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Enabledoodad_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Enabledoodad;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Disabledoodad_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Disabledoodad;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Warpin_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Warpin;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Medic_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Medic;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_MedicHeal1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHeal1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_HealMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HealMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_MedicHeal2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHeal2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastRestoration_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastRestoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastDisruptionWeb_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastDisruptionWeb;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastMindControl_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastMindControl;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_DarkArchonMeld_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DarkArchonMeld;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastFeedback_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastFeedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastOpticalFlare_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastOpticalFlare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_CastMaelstrom_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastMaelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_JunkYardDog_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::JunkYardDog;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Fatal_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Fatal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_None_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orders_Unknown_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerType__SWIG_0() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::PlayerType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  result = (std::string *) &((BWAPI::PlayerType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  result = (char *)((BWAPI::PlayerType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerType(void * jarg1) {
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getPlayerType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::PlayerType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::PlayerTypes::getPlayerType(arg1);
  jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allPlayerTypes() {
  void * jresult ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  result = (std::set< BWAPI::PlayerType > *) &BWAPI::PlayerTypes::allPlayerTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerTypes_init() {
  BWAPI::PlayerTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_None_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_Computer_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Computer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_Player_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Player;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_RescuePassive_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::RescuePassive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_EitherPreferComputer_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::EitherPreferComputer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_EitherPreferHuman_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::EitherPreferHuman;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_Neutral_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Neutral;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_Closed_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Closed;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_PlayerLeft_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::PlayerLeft;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_ComputerLeft_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ComputerLeft;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypes_Unknown_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getID(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Player_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Player const *)arg1)->getUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getType(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::PlayerType result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getType();
  jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getForce(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Force *result = 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (BWAPI::Force *)((BWAPI::Player const *)arg1)->getForce();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isAlly(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::Player const *)arg1)->isAlly(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isEnemy(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::Player const *)arg1)->isEnemy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isNeutral(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->isNeutral();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getStartLocation(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getStartLocation();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isVictorious(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->isVictorious();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isDefeated(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->isDefeated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_leftGame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->leftGame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_minerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->minerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_gas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->gas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_gatheredMinerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->gatheredMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_gatheredGas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->gatheredGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_repairedMinerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->repairedMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_repairedGas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->repairedGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_refundedMinerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->refundedMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_refundedGas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->refundedGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_spentMinerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->spentMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_spentGas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->spentGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyTotal__SWIG_0(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyTotal__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyUsed__SWIG_0(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyUsed__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_allUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->allUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_visibleUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->visibleUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_completedUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->completedUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_incompleteUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->incompleteUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_deadUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->deadUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_killedUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->killedUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->getUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_hasResearched(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->hasResearched(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isResearching(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isResearching(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isUpgrading(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isUpgrading(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getColor(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Color result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getColor();
  jresult = new BWAPI::Color((const BWAPI::Color &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getTextColor(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getTextColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_maxEnergy(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->maxEnergy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Player_topSpeed(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  double result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((BWAPI::Player const *)arg1)->topSpeed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_groundWeaponMaxRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->groundWeaponMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_airWeaponMaxRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->airWeaponMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_weaponMaxRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::WeaponType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::WeaponType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->weaponMaxRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_sightRange(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->sightRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_groundWeaponDamageCooldown(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->groundWeaponDamageCooldown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_armor(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->armor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getUnitScore(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getUnitScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getKillScore(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getKillScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getBuildingScore(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getBuildingScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getRazingScore(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getRazingScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getCustomScore(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getCustomScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isObserver(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->isObserver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getMaxUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->getMaxUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isResearchAvailable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isResearchAvailable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isUnitAvailable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isUnitAvailable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletType__SWIG_0() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)new BWAPI::BulletType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::BulletType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::BulletType *)new BWAPI::BulletType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BulletType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::BulletType *)jarg1; 
  result = (std::string *) &((BWAPI::BulletType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BulletType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::BulletType *)jarg1; 
  result = (char *)((BWAPI::BulletType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BulletType(void * jarg1) {
  BWAPI::BulletType *arg1 = (BWAPI::BulletType *) 0 ;
  
  arg1 = (BWAPI::BulletType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getBulletType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::BulletType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::BulletTypes::getBulletType(arg1);
  jresult = new BWAPI::BulletType((const BWAPI::BulletType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allBulletTypes() {
  void * jresult ;
  std::set< BWAPI::BulletType > *result = 0 ;
  
  result = (std::set< BWAPI::BulletType > *) &BWAPI::BulletTypes::allBulletTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_init() {
  BWAPI::BulletTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Melee_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Melee;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fusion_Cutter_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Fusion_Cutter_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gauss_Rifle_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Gauss_Rifle_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::C_10_Canister_Rifle_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gemini_Missiles_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Gemini_Missiles;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fragmentation_Grenade_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Fragmentation_Grenade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Longbolt_Missile_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Longbolt_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATS_ATA_Laser_Battery_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::ATS_ATA_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Burst_Lasers_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Burst_Lasers;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Arclite_Shock_Cannon_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Arclite_Shock_Cannon_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EMP_Missile_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::EMP_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dual_Photon_Blasters_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Dual_Photon_Blasters_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particle_Beam_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Particle_Beam_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anti_Matter_Missile_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Anti_Matter_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pulse_Cannon_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Pulse_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psionic_Shockwave_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Psionic_Shockwave_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psionic_Storm_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Psionic_Storm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Yamato_Gun_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Phase_Disruptor_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Phase_Disruptor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STA_STS_Cannon_Overlay_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::STA_STS_Cannon_Overlay;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sunken_Colony_Tentacle_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Sunken_Colony_Tentacle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Acid_Spore_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Acid_Spore;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Glave_Wurm_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Glave_Wurm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Seeker_Spores_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Seeker_Spores;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Queen_Spell_Carrier_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Queen_Spell_Carrier;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Plague_Cloud_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Plague_Cloud;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Consume_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ensnare_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Needle_Spine_Hit_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Needle_Spine_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Invisible_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Invisible;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Optical_Flare_Grenade_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Optical_Flare_Grenade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Halo_Rockets_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Halo_Rockets;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Subterranean_Spines_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Subterranean_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corrosive_Acid_Shot_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Corrosive_Acid_Shot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neutron_Flare_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Neutron_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_None_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unknown_get() {
  void * jresult ;
  BWAPI::BulletType *result = 0 ;
  
  result = (BWAPI::BulletType *)&BWAPI::BulletTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bullet_getID(void * jarg1) {
  int jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  int result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (int)((BWAPI::Bullet const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bullet_getPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::Bullet const *)arg1)->getPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bullet_getType(void * jarg1) {
  void * jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::BulletType result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = ((BWAPI::Bullet const *)arg1)->getType();
  jresult = new BWAPI::BulletType((const BWAPI::BulletType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bullet_getSource(void * jarg1) {
  void * jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Bullet const *)arg1)->getSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bullet_getPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = ((BWAPI::Bullet const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Bullet_getAngle(void * jarg1) {
  double jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  double result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (double)((BWAPI::Bullet const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Bullet_getVelocityX(void * jarg1) {
  double jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  double result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (double)((BWAPI::Bullet const *)arg1)->getVelocityX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Bullet_getVelocityY(void * jarg1) {
  double jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  double result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (double)((BWAPI::Bullet const *)arg1)->getVelocityY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bullet_getTarget(void * jarg1) {
  void * jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Bullet const *)arg1)->getTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bullet_getTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = ((BWAPI::Bullet const *)arg1)->getTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bullet_getRemoveTimer(void * jarg1) {
  int jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  int result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (int)((BWAPI::Bullet const *)arg1)->getRemoveTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bullet_exists(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (bool)((BWAPI::Bullet const *)arg1)->exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bullet_isVisible__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  result = (bool)((BWAPI::Bullet const *)arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bullet_isVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Bullet *arg1 = (BWAPI::Bullet *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Bullet *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::Bullet const *)arg1)->isVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePosition__SWIG_0() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePosition__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition((BWAPI::Position const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePosition__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator ==((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator !=((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator <((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_isValid(void * jarg1) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (bool)((BWAPI::TilePosition const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opNonzero(void * jarg1) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator bool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opPlus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::TilePosition const *)arg1)->operator +((BWAPI::TilePosition const &)*arg2);
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opMinus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::TilePosition const *)arg1)->operator -((BWAPI::TilePosition const &)*arg2);
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_makeValid(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (BWAPI::TilePosition *) &(arg1)->makeValid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TilePosition *) &(arg1)->operator +=((BWAPI::TilePosition const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opSubtract(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TilePosition *) &(arg1)->operator -=((BWAPI::TilePosition const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TilePosition_getDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  double result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (double)((BWAPI::TilePosition const *)arg1)->getDistance((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TilePosition_getLength(void * jarg1) {
  double jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  double result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (double)((BWAPI::TilePosition const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_hasPath(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->hasPath((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_x(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int *) &(arg1)->x();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_y(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int *) &(arg1)->y();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TilePosition_xConst(void * jarg1) {
  int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int)((BWAPI::TilePosition const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TilePosition_yConst(void * jarg1) {
  int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int)((BWAPI::TilePosition const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePosition(void * jarg1) {
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositions_Invalid_get() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::Invalid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositions_None_get() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositions_Unknown_get() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPI_UNIT_COMMAND_TYPE_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(46);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitCommandType__SWIG_0() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)new BWAPI::UnitCommandType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitCommandType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UnitCommandType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitCommandType *)new BWAPI::UnitCommandType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitCommandType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::UnitCommandType *)jarg1; 
  result = (std::string *) &((BWAPI::UnitCommandType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitCommandType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::UnitCommandType *)jarg1; 
  result = (char *)((BWAPI::UnitCommandType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitCommandType(void * jarg1) {
  BWAPI::UnitCommandType *arg1 = (BWAPI::UnitCommandType *) 0 ;
  
  arg1 = (BWAPI::UnitCommandType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnitCommandType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::UnitCommandType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::UnitCommandTypes::getUnitCommandType(arg1);
  jresult = new BWAPI::UnitCommandType((const BWAPI::UnitCommandType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUnitCommandTypes() {
  void * jresult ;
  std::set< BWAPI::UnitCommandType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitCommandType > *) &BWAPI::UnitCommandTypes::allUnitCommandTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommandTypes_init() {
  BWAPI::UnitCommandTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Attack_Move_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Attack_Move;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Attack_Unit_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Attack_Unit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Build_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Build;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Build_Addon_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Build_Addon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Train_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Train;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Morph_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Morph;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Research_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Research;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Upgrade_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Upgrade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Set_Rally_Position_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Set_Rally_Position;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Set_Rally_Unit_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Set_Rally_Unit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Move_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Move;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Patrol_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Patrol;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Hold_Position_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Hold_Position;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Stop_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Stop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Follow_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Follow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Gather_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Gather;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Return_Cargo_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Return_Cargo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Repair_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Repair;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Burrow_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Burrow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Unburrow_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Unburrow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cloak_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cloak;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Decloak_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Decloak;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Siege_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Siege;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Unsiege_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Unsiege;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Lift_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Lift;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Land_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Land;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Load_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Load;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Unload_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Unload;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Unload_All_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Unload_All;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Unload_All_Position_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Unload_All_Position;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Right_Click_Position_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Right_Click_Position;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Right_Click_Unit_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Right_Click_Unit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Halt_Construction_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Halt_Construction;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Construction_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Construction;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Addon_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Addon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Train_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Train;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Train_Slot_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Train_Slot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Morph_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Morph;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Research_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Research;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Cancel_Upgrade_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Cancel_Upgrade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Use_Tech_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Use_Tech;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Use_Tech_Position_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Use_Tech_Position;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Use_Tech_Unit_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Use_Tech_Unit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Place_COP_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Place_COP;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_None_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypes_Unknown_get() {
  void * jresult ;
  BWAPI::UnitCommandType *result = 0 ;
  
  result = (BWAPI::UnitCommandType *)&BWAPI::UnitCommandTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitCommand__SWIG_0() {
  void * jresult ;
  BWAPI::UnitCommand *result = 0 ;
  
  result = (BWAPI::UnitCommand *)new BWAPI::UnitCommand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitCommand__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommandType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::UnitCommandType *argp2 ;
  BWAPI::UnitCommand *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitCommandType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommandType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (BWAPI::Unit *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (BWAPI::UnitCommand *)new BWAPI::UnitCommand(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_attack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::attack(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_attack__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::attack(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_attack__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::attack(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_attack__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::attack(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_build(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = BWAPI::UnitCommand::build(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_buildAddon(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::buildAddon(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_train(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::train(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_morph(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::morph(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_research(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::research(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_upgrade(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::upgrade(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_setRallyPoint__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::setRallyPoint(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_setRallyPoint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::setRallyPoint(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_move__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::move(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_move__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::move(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_patrol__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::patrol(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_patrol__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::patrol(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_holdPosition__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = BWAPI::UnitCommand::holdPosition(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_holdPosition__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::holdPosition(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_stop__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = BWAPI::UnitCommand::stop(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_stop__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::stop(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_follow__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::follow(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_follow__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::follow(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_gather__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::gather(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_gather__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::gather(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_returnCargo__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = BWAPI::UnitCommand::returnCargo(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_returnCargo__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::returnCargo(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_repair__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::repair(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_repair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::repair(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_burrow(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::burrow(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unburrow(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::unburrow(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cloak(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cloak(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_decloak(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::decloak(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_siege(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::siege(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unsiege(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::unsiege(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_lift(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::lift(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_land(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::land(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_load__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::load(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_load__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::load(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unload(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::unload(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unloadAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = BWAPI::UnitCommand::unloadAll(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unloadAll__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::unloadAll(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unloadAll__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::unloadAll(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unloadAll__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::unloadAll(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_rightClick__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::rightClick(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_rightClick__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::rightClick(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_rightClick__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = BWAPI::UnitCommand::rightClick(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_rightClick__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = BWAPI::UnitCommand::rightClick(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_haltConstruction(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::haltConstruction(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelConstruction(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cancelConstruction(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelAddon(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cancelAddon(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelTrain__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (int)jarg2; 
  result = BWAPI::UnitCommand::cancelTrain(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelTrain__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cancelTrain(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelMorph(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cancelMorph(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelResearch(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cancelResearch(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_cancelUpgrade(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = BWAPI::UnitCommand::cancelUpgrade(arg1);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_useTech__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::useTech(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_useTech__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::TechType *argp2 ;
  BWAPI::Position *argp3 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = BWAPI::UnitCommand::useTech(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_useTech__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (BWAPI::Unit *)jarg3; 
  result = BWAPI::UnitCommand::useTech(arg1,arg2,arg3);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_placeCOP(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWAPI::UnitCommand::placeCOP(arg1,arg2);
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommandType result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = ((BWAPI::UnitCommand const *)arg1)->getType();
  jresult = new BWAPI::UnitCommandType((const BWAPI::UnitCommandType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getUnit(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitCommand const *)arg1)->getUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getTarget(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::UnitCommand const *)arg1)->getTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = ((BWAPI::UnitCommand const *)arg1)->getTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getTargetTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = ((BWAPI::UnitCommand const *)arg1)->getTargetTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getUnitType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = ((BWAPI::UnitCommand const *)arg1)->getUnitType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getTechType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = ((BWAPI::UnitCommand const *)arg1)->getTechType();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_getUpgradeType(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UpgradeType result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = ((BWAPI::UnitCommand const *)arg1)->getUpgradeType();
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitCommand_getSlot(void * jarg1) {
  int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (int)((BWAPI::UnitCommand const *)arg1)->getSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommand_isQueued(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (bool)((BWAPI::UnitCommand const *)arg1)->isQueued();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommand_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommand *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::UnitCommand *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitCommand const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitCommand const *)arg1)->operator ==((BWAPI::UnitCommand const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommand_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommand *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::UnitCommand *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitCommand const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitCommand const *)arg1)->operator !=((BWAPI::UnitCommand const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommand_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommand *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::UnitCommand *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitCommand const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitCommand const *)arg1)->operator <((BWAPI::UnitCommand const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommand_opGreaterThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommand *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::UnitCommand *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitCommand const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitCommand const *)arg1)->operator >((BWAPI::UnitCommand const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommand_unit_set(void * jarg1, void * jarg2) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  if (arg1) (arg1)->unit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_unit_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (BWAPI::Unit *) ((arg1)->unit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommand_type_set(void * jarg1, void * jarg2) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommandType *arg2 = (BWAPI::UnitCommandType *) 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::UnitCommandType *)jarg2; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_type_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::UnitCommandType *result = 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (BWAPI::UnitCommandType *)& ((arg1)->type);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommand_target_set(void * jarg1, void * jarg2) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommand_target_get(void * jarg1) {
  void * jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (BWAPI::Unit *) ((arg1)->target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommand_x_set(void * jarg1, int jarg2) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitCommand_x_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommand_y_set(void * jarg1, int jarg2) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitCommand_y_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommand_extra_set(void * jarg1, int jarg2) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->extra = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitCommand_extra_get(void * jarg1) {
  int jresult ;
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  result = (int) ((arg1)->extra);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitCommand(void * jarg1) {
  BWAPI::UnitCommand *arg1 = (BWAPI::UnitCommand *) 0 ;
  
  arg1 = (BWAPI::UnitCommand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getForces(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Force * > *) &(arg1)->getForces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getPlayers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->getPlayers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getAllUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getAllUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getMinerals(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getGeysers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getNeutralUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getNeutralUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStaticMinerals(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStaticGeysers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStaticNeutralUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticNeutralUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getBullets(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Bullet * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Bullet * > *) &(arg1)->getBullets();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getNukeDots(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Position > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Position > *) &(arg1)->getNukeDots();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getEvents(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::list< BWAPI::Event > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::list< BWAPI::Event > *) &(arg1)->getEvents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getForce(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  BWAPI::Force *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Force *)(arg1)->getForce(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getPlayer(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Player *)(arg1)->getPlayer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getUnit(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Unit *)(arg1)->getUnit(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_indexToUnit(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Unit *)(arg1)->indexToUnit(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getRegion(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  Region *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Region *)(arg1)->getRegion(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getGameType(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::GameType result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->getGameType();
  jresult = new BWAPI::GameType((const BWAPI::GameType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getLatency(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getLatency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getFrameCount(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getFPS(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Game_getAverageFPS(void * jarg1) {
  double jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  double result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (double)(arg1)->getAverageFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getMousePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->getMousePosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_getMouseState__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::MouseButton arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::MouseButton)jarg2; 
  result = (bool)(arg1)->getMouseState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_getMouseState__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getMouseState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_getKeyState__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Key arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Key)jarg2; 
  result = (bool)(arg1)->getKeyState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_getKeyState__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getKeyState(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getScreenPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->getScreenPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setScreenPosition__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setScreenPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setScreenPosition__SWIG_1(void * jarg1, void * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setScreenPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_pingMinimap__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->pingMinimap(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_pingMinimap__SWIG_1(void * jarg1, void * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pingMinimap(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isFlagEnabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isFlagEnabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_enableFlag(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableFlag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getUnitsOnTile(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getUnitsOnTile(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getUnitsInRectangle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Game const *)arg1)->getUnitsInRectangle(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getUnitsInRectangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position *argp3 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Game const *)arg1)->getUnitsInRectangle(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getUnitsInRadius(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  int arg3 ;
  BWAPI::Position *argp2 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Game const *)arg1)->getUnitsInRadius(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getLastError(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Error result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = ((BWAPI::Game const *)arg1)->getLastError();
  jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setLastError(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Error arg2 ;
  BWAPI::Error *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Error *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Error", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setLastError(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_mapWidth(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->mapWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_mapHeight(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->mapHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Game_mapFileName(void * jarg1) {
  char * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->mapFileName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Game_mapPathName(void * jarg1) {
  char * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->mapPathName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Game_mapName(void * jarg1) {
  char * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->mapName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Game_mapHash(void * jarg1) {
  char * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->mapHash();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isWalkable(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isWalkable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getGroundHeight__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getGroundHeight(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getGroundHeight__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->getGroundHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBuildable__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->isBuildable(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBuildable__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBuildable__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  bool arg3 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBuildable__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isBuildable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isVisible__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isVisible(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isExplored__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isExplored(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isExplored__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isExplored(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasCreep__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->hasCreep(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasCreep__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->hasCreep(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::UnitType arg6 ;
  BWAPI::UnitType *argp6 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::UnitType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_5(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_6(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::UnitType arg5 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp5 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::UnitType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_7(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPower(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPowerPrecise__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPowerPrecise(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPowerPrecise__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPowerPrecise(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPowerPrecise__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPowerPrecise(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPowerPrecise__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPowerPrecise(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canBuildHere__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  bool arg5 ;
  BWAPI::TilePosition *argp3 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TilePosition *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->canBuildHere((BWAPI::Unit const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canBuildHere__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::TilePosition *argp3 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TilePosition *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->canBuildHere((BWAPI::Unit const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canMake(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg3 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canMake((BWAPI::Unit const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canResearch(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg3 ;
  BWAPI::TechType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TechType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canResearch((BWAPI::Unit const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canUpgrade(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg3 ;
  BWAPI::UpgradeType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::UpgradeType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canUpgrade((BWAPI::Unit const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStartLocations(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::TilePosition > *) &(arg1)->getStartLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_printf(void * jarg1, char * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->printf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_sendText(void * jarg1, char * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->sendText((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_sendTextEx(void * jarg1, unsigned int jarg2, char * jarg3) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  (arg1)->sendTextEx(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_changeRace(void * jarg1, void * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->changeRace(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isInGame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isInGame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isMultiplayer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isMultiplayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBattleNet(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isBattleNet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isPaused(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isReplay(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isReplay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_startGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->startGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_pauseGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->pauseGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_resumeGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->resumeGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_leaveGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->leaveGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_restartGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->restartGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setLocalSpeed__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLocalSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setLocalSpeed__SWIG_1(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->setLocalSpeed();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_issueCommand(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *arg2 = 0 ;
  BWAPI::UnitCommand arg3 ;
  BWAPI::UnitCommand *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Unit * > const & type is null", 0);
    return 0;
  } 
  argp3 = (BWAPI::UnitCommand *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommand", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->issueCommand((std::set< BWAPI::Unit * > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getSelectedUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getSelectedUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_self(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (BWAPI::Player *)(arg1)->self();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_enemy(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (BWAPI::Player *)(arg1)->enemy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_neutral(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (BWAPI::Player *)(arg1)->neutral();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_allies(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->allies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_enemies(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->enemies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_observers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->observers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setTextSize__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTextSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setTextSize__SWIG_1(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->setTextSize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawText(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->drawText(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTextMap(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextMap(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTextMouse(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextMouse(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTextScreen(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextScreen(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBox__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBox__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9, unsigned int jarg10) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  bool arg10 ;
  BWAPI::Color *argp9 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = (BWAPI::Color *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangle__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  BWAPI::Color *argp9 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = (BWAPI::Color *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircle__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDot(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawDot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDotMap(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMap(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDotMouse(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMouse(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDotScreen(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotScreen(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLine(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLineMap(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLineMouse(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLineScreen(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getScreenBuffer(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  void *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (void *)(arg1)->getScreenBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getLatencyFrames(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getLatencyFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getLatencyTime(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getLatencyTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getRemainingLatencyFrames(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getRemainingLatencyFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getRemainingLatencyTime(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getRemainingLatencyTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getRevision(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getRevision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isDebug(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isDebug();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isLatComEnabled(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isLatComEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setLatCom(void * jarg1, unsigned int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLatCom(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getReplayFrameCount(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getReplayFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setGUI__SWIG_0(void * jarg1, unsigned int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGUI(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setGUI__SWIG_1(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->setGUI();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getInstanceNumber(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getInstanceNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getAPM__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->getAPM(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getAPM__SWIG_1(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getAPM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setMap(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setMap((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setFrameSkip__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFrameSkip(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setFrameSkip__SWIG_1(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->setFrameSkip();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPath(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((BWAPI::Game const *)arg1)->hasPath(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setAlliance__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setAlliance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setAlliance__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setAlliance(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setAlliance__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)(arg1)->setAlliance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setVision__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setVision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setVision__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)(arg1)->setVision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_elapsedTime(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)((BWAPI::Game const *)arg1)->elapsedTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setCommandOptimizationLevel__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCommandOptimizationLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setCommandOptimizationLevel__SWIG_1(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->setCommandOptimizationLevel();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_countdownTimer(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)((BWAPI::Game const *)arg1)->countdownTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getAllRegions(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Region * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Region * > *) &((BWAPI::Game const *)arg1)->getAllRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getRegionAt__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Region *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (BWAPI::Region *)((BWAPI::Game const *)arg1)->getRegionAt(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getRegionAt__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::Region *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (BWAPI::Region *)((BWAPI::Game const *)arg1)->getRegionAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getLastEventTime(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)((BWAPI::Game const *)arg1)->getLastEventTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setReplayVision__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setReplayVision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setReplayVision__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)(arg1)->setReplayVision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setRevealAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setRevealAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_setRevealAll__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->setRevealAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Broodwar_set(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  BWAPI::Broodwar = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Broodwar_get() {
  void * jresult ;
  BWAPI::Game *result = 0 ;
  
  result = (BWAPI::Game *)BWAPI::Broodwar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getID(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getReplayID(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getReplayID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::Unit const *)arg1)->getPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getType(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getAngle(void * jarg1) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getVelocityX(void * jarg1) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getVelocityY(void * jarg1) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getRegion(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Region *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Region *)((BWAPI::Unit const *)arg1)->getRegion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getLeft(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getTop(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRight(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getBottom(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getBottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getShields(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getShields();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getEnergy(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getEnergy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getResources(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getResources();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getResourceGroup(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getResourceGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getDistance__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (int)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getDistance__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_hasPath__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)((BWAPI::Unit const *)arg1)->hasPath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_hasPath__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Unit const *)arg1)->hasPath(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getLastCommandFrame(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getLastCommandFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getLastCommand(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getLastCommand();
  jresult = new BWAPI::UnitCommand((const BWAPI::UnitCommand &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getLastAttackingPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::Unit const *)arg1)->getLastAttackingPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Unit const *)arg1)->getUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInitialType(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInitialPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInitialTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getInitialHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInitialHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getInitialResources(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInitialResources();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getKillCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getKillCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getAcidSporeCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getAcidSporeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getInterceptorCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInterceptorCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getScarabCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getScarabCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getSpiderMineCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getSpiderMineCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getGroundWeaponCooldown(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getGroundWeaponCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getAirWeaponCooldown(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getAirWeaponCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getSpellCooldown(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getSpellCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getDefenseMatrixPoints(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getDefenseMatrixTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getEnsnareTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getEnsnareTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getIrradiateTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getIrradiateTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getLockdownTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getLockdownTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getMaelstromTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getMaelstromTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getOrderTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getOrderTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getPlagueTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getPlagueTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemoveTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemoveTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getStasisTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getStasisTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getStimTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getStimTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getBuildType(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getBuildType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTrainingQueue(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  std::list< BWAPI::UnitType > result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTrainingQueue();
  jresult = new std::list< BWAPI::UnitType >((const std::list< BWAPI::UnitType > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTech(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTech();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getUpgrade(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getUpgrade();
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingBuildTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingBuildTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingTrainTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingTrainTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingResearchTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingResearchTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingUpgradeTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingUpgradeTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getBuildUnit(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getBuildUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTarget(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getOrder(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Order result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getOrder();
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getSecondaryOrder(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Order result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getSecondaryOrder();
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getOrderTarget(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getOrderTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getOrderTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getOrderTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getRallyPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getRallyPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getRallyUnit(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getRallyUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getAddon(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getAddon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getNydusExit(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getNydusExit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getPowerUp(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getPowerUp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTransport(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTransport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getLoadedUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  std::set< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getLoadedUnits();
  jresult = new std::set< BWAPI::Unit * >((const std::set< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getCarrier(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getCarrier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInterceptors(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  std::set< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInterceptors();
  jresult = new std::set< BWAPI::Unit * >((const std::set< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getHatchery(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getHatchery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getLarva(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  std::set< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getLarva();
  jresult = new std::set< BWAPI::Unit * >((const std::set< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getUnitsInRadius(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Unit const *)arg1)->getUnitsInRadius(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getUnitsInWeaponRange(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::WeaponType arg2 ;
  BWAPI::WeaponType *argp2 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::WeaponType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::WeaponType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Unit const *)arg1)->getUnitsInWeaponRange(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getClientInfo(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (void *)((BWAPI::Unit const *)arg1)->getClientInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Unit_setClientInfo(void * jarg1, void * jarg2) {
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setClientInfo(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_exists(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_hasNuke(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->hasNuke();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isAccelerating(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isAccelerating();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isAttacking(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isAttacking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isAttackFrame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isAttackFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBeingConstructed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingConstructed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBeingGathered(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingGathered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBeingHealed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingHealed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBlind(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBlind();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBraking(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBraking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBurrowed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBurrowed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCarryingGas(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCarryingMinerals(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCloaked(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCloaked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCompleted(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCompleted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isConstructing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isConstructing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isDefenseMatrixed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isDefenseMatrixed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isDetected(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isDetected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isEnsnared(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isEnsnared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isFollowing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isFollowing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isGatheringGas(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isGatheringMinerals(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isHallucination(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isHallucination();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isHoldingPosition(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isHoldingPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isIdle(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isIdle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isInterruptible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isInterruptible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isInvincible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isInvincible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isInWeaponRange(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)((BWAPI::Unit const *)arg1)->isInWeaponRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isIrradiated(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isIrradiated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isLifted(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLifted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isLoaded(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isLockedDown(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLockedDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isMaelstrommed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMaelstrommed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isMorphing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMorphing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isMoving(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isParasited(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isParasited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isPatrolling(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isPatrolling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isPlagued(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isPlagued();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isRepairing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isRepairing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isResearching(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isResearching();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isSelected(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isSelected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isSieged(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isSieged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStartingAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStartingAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStasised(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStasised();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStimmed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStimmed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStuck(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isTraining(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isTraining();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnderAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnderDarkSwarm(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderDarkSwarm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnderDisruptionWeb(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderDisruptionWeb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnderStorm(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderStorm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnpowered(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnpowered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUpgrading(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUpgrading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isVisible__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::Unit const *)arg1)->isVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_canIssueCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand arg2 ;
  BWAPI::UnitCommand *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitCommand *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommand", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Unit const *)arg1)->canIssueCommand(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_issueCommand(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitCommand arg2 ;
  BWAPI::UnitCommand *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitCommand *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitCommand", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->issueCommand(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_attack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_attack__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_attack__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_attack__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_build(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->build(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_buildAddon(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->buildAddon(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_train(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->train(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_morph(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->morph(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_research(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->research(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_upgrade(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->upgrade(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_setRallyPoint__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setRallyPoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_setRallyPoint__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->setRallyPoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_move__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->move(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_move__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->move(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_patrol__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->patrol(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_patrol__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->patrol(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_holdPosition__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->holdPosition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_holdPosition__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->holdPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_stop__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->stop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_stop__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_follow__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->follow(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_follow__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->follow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_gather__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->gather(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_gather__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->gather(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_returnCargo__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->returnCargo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_returnCargo__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->returnCargo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_repair__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->repair(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_repair__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->repair(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_burrow(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->burrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unburrow(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->unburrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_decloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->decloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_siege(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->siege();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unsiege(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->unsiege();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_lift(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->lift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_land(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->land(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_load__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_load__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unload(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->unload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unloadAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->unloadAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unloadAll__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->unloadAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unloadAll__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->unloadAll(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unloadAll__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->unloadAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_rightClick__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  bool arg3 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->rightClick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_rightClick__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_rightClick__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->rightClick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_rightClick__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_haltConstruction(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->haltConstruction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelConstruction(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelConstruction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelAddon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelAddon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelTrain__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->cancelTrain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelTrain__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelTrain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelMorph(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelMorph();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelResearch(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelResearch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelUpgrade(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelUpgrade();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_useTech__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->useTech(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_useTech__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::TechType *argp2 ;
  BWAPI::Position *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_useTech__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (BWAPI::Unit *)jarg3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_placeCOP(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->placeCOP(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeType__SWIG_0() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitSizeType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  result = (std::string *) &((BWAPI::UnitSizeType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitSizeType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  result = (char *)((BWAPI::UnitSizeType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitSizeType(void * jarg1) {
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnitSizeType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::UnitSizeType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::UnitSizeTypes::getUnitSizeType(arg1);
  jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUnitSizeTypes() {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitSizeType > *) &BWAPI::UnitSizeTypes::allUnitSizeTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSizeTypes_init() {
  BWAPI::UnitSizeTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypes_Independent_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Independent;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypes_Small_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Small;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypes_Medium_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Medium;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypes_Large_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Large;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypes_None_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypes_Unknown_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BWAPI_UNIT_TYPE_MAX_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(234);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitType__SWIG_0() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)new BWAPI::UnitType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitType *)new BWAPI::UnitType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::string *) &((BWAPI::UnitType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (char *)((BWAPI::UnitType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_whatBuilds(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::pair< BWAPI::UnitType,int > result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->whatBuilds();
  jresult = new std::pair< BWAPI::UnitType,int >((const std::pair< BWAPI::UnitType,int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_requiredUnits(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > > *) &((BWAPI::UnitType const *)arg1)->requiredUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_requiredTech(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->requiredTech();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_cloakingTech(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->cloakingTech();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_abilities(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::set< BWAPI::TechType > *) &((BWAPI::UnitType const *)arg1)->abilities();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_upgrades(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::set< BWAPI::UpgradeType > *) &((BWAPI::UnitType const *)arg1)->upgrades();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_armorUpgrade(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UpgradeType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->armorUpgrade();
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxShields(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxShields();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxEnergy(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxEnergy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_armor(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->armor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_mineralPrice(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->mineralPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_gasPrice(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->gasPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_buildTime(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->buildTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_supplyRequired(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->supplyRequired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_supplyProvided(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->supplyProvided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_spaceRequired(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->spaceRequired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_spaceProvided(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->spaceProvided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_buildScore(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->buildScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_destroyScore(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->destroyScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_size(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitSizeType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->size();
  jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_tileWidth(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->tileWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_tileHeight(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->tileHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionLeft(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionUp(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionUp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionRight(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionDown(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_seekRange(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->seekRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_sightRange(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->sightRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_groundWeapon(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::WeaponType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->groundWeapon();
  jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxGroundHits(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxGroundHits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_airWeapon(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::WeaponType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->airWeapon();
  jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxAirHits(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxAirHits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitType_topSpeed(void * jarg1) {
  double jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (double)((BWAPI::UnitType const *)arg1)->topSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_acceleration(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->acceleration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_haltDistance(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->haltDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_turnRadius(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->turnRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canProduce(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canProduce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canMove(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canMove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isFlyer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_regeneratesHP(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->regeneratesHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isSpellcaster(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpellcaster();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_hasPermanentCloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->hasPermanentCloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isInvincible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isInvincible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isOrganic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isOrganic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isMechanical(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isMechanical();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isRobotic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isRobotic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isDetector(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isDetector();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isResourceContainer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceContainer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isResourceDepot(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceDepot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isRefinery(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isRefinery();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isWorker(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isWorker();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_requiresPsi(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresPsi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_requiresCreep(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresCreep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isTwoUnitsInOneEgg(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isTwoUnitsInOneEgg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isBurrowable(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBurrowable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isCloakable(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isCloakable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isAddon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isAddon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isFlyingBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyingBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isNeutral(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isNeutral();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isHero(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isHero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isPowerup(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isPowerup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isBeacon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBeacon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isFlagBeacon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlagBeacon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isSpecialBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpecialBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isSpell(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_producesLarva(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->producesLarva();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isMineralField(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isMineralField();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canBuildAddon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canBuildAddon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitType(void * jarg1) {
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnitType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::UnitType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::UnitTypes::getUnitType(arg1);
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maxUnitWidth() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::UnitTypes::maxUnitWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_maxUnitHeight() {
  int jresult ;
  int result;
  
  result = (int)BWAPI::UnitTypes::maxUnitHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUnitTypes() {
  void * jresult ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitType > *) &BWAPI::UnitTypes::allUnitTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allMacroTypes() {
  void * jresult ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitType > *) &BWAPI::UnitTypes::allMacroTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypes_init() {
  BWAPI::UnitTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Marine_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Marine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Jim_Raynor_Marine_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Jim_Raynor_Marine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Ghost_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Ghost;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Sarah_Kerrigan_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Sarah_Kerrigan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Samir_Duran_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Samir_Duran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Infested_Duran_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Infested_Duran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Alexei_Stukov_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Alexei_Stukov;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Vulture_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Vulture;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Jim_Raynor_Vulture_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Jim_Raynor_Vulture;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Goliath_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Goliath;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Alan_Schezar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Alan_Schezar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Siege_Tank_Tank_Mode_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Siege_Tank_Tank_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Edmund_Duke_Tank_Mode_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Edmund_Duke_Tank_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_SCV_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_SCV;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Wraith_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Wraith;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Tom_Kazansky_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Tom_Kazansky;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Science_Vessel_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Science_Vessel;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Magellan_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Magellan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Dropship_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Dropship;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Battlecruiser_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Battlecruiser;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Arcturus_Mengsk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Arcturus_Mengsk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Hyperion_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Hyperion;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Norad_II_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Norad_II;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Gerard_DuGalle_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Gerard_DuGalle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Vulture_Spider_Mine_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Vulture_Spider_Mine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Nuclear_Missile_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Nuclear_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Siege_Tank_Siege_Mode_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Siege_Tank_Siege_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Edmund_Duke_Siege_Mode_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Edmund_Duke_Siege_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Firebat_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Firebat;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Gui_Montag_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Gui_Montag;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Spell_Scanner_Sweep_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Scanner_Sweep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Medic_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Medic;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Civilian_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Civilian;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Larva_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Larva;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Egg_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Egg;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Zergling_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Zergling;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Devouring_One_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Devouring_One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Infested_Kerrigan_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Infested_Kerrigan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Hydralisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hydralisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Hunter_Killer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Hunter_Killer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Ultralisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Ultralisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Torrasque_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Torrasque;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Broodling_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Broodling;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Drone_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Drone;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Overlord_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Overlord;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Yggdrasill_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Yggdrasill;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Mutalisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Mutalisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Kukulza_Mutalisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Kukulza_Mutalisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Guardian_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Guardian;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Kukulza_Guardian_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Kukulza_Guardian;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Queen_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Queen;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Matriarch_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Matriarch;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Defiler_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Defiler;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Unclean_One_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Unclean_One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Scourge_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Scourge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Infested_Terran_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Infested_Terran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Valkyrie_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Valkyrie;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Cocoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Cocoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Corsair_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Corsair;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Raszagal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Raszagal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Dark_Templar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dark_Templar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Dark_Templar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Dark_Templar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Zeratul_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Zeratul;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Devourer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Devourer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Dark_Archon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dark_Archon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Probe_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Probe;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Zealot_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Zealot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Fenix_Zealot_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Fenix_Zealot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Dragoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dragoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Fenix_Dragoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Fenix_Dragoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_High_Templar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_High_Templar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Tassadar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Tassadar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Aldaris_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Aldaris;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Archon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Archon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Tassadar_Zeratul_Archon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Tassadar_Zeratul_Archon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Shuttle_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Shuttle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Scout_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Scout;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Mojo_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Mojo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Artanis_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Artanis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Arbiter_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Arbiter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Danimoth_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Danimoth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Carrier_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Carrier;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Gantrithor_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Gantrithor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Interceptor_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Interceptor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Reaver_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Reaver;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hero_Warbringer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Hero_Warbringer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Observer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Observer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Scarab_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Scarab;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Critter_Rhynadon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Rhynadon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Critter_Bengalaas_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Bengalaas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Cargo_Ship_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cargo_Ship;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Mercenary_Gunship_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Mercenary_Gunship;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Critter_Scantid_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Scantid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Critter_Kakaru_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Kakaru;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Critter_Ragnasaur_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Ragnasaur;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Critter_Ursadon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Ursadon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Lurker_Egg_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lurker_Egg;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Lurker_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lurker;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Spell_Disruption_Web_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Command_Center_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Command_Center;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Comsat_Station_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Comsat_Station;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Nuclear_Silo_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Nuclear_Silo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Supply_Depot_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Supply_Depot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Refinery_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Refinery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Barracks_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Barracks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Academy_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Academy;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Factory_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Factory;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Starport_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Starport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Control_Tower_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Control_Tower;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Science_Facility_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Science_Facility;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Covert_Ops_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Covert_Ops;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Physics_Lab_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Physics_Lab;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Machine_Shop_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Machine_Shop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Engineering_Bay_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Engineering_Bay;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Armory_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Armory;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Missile_Turret_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Missile_Turret;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Terran_Bunker_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Bunker;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Crashed_Norad_II_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Crashed_Norad_II;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Ion_Cannon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Ion_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Infested_Command_Center_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Infested_Command_Center;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Hatchery_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hatchery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Lair_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lair;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Hive_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Nydus_Canal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Nydus_Canal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Hydralisk_Den_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hydralisk_Den;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Defiler_Mound_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Defiler_Mound;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Greater_Spire_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Greater_Spire;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Queens_Nest_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Queens_Nest;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Evolution_Chamber_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Evolution_Chamber;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Ultralisk_Cavern_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Ultralisk_Cavern;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Spire_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spire;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Spawning_Pool_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spawning_Pool;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Creep_Colony_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Creep_Colony;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Spore_Colony_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spore_Colony;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Sunken_Colony_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Sunken_Colony;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Overmind_With_Shell_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind_With_Shell;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Overmind_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Zerg_Extractor_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Extractor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Mature_Chrysalis_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Mature_Chrysalis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Cerebrate_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cerebrate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Cerebrate_Daggoth_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cerebrate_Daggoth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Nexus_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Nexus;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Robotics_Facility_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Robotics_Facility;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Pylon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Pylon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Assimilator_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Assimilator;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Observatory_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Observatory;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Gateway_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Gateway;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Photon_Cannon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Photon_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Citadel_of_Adun_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Citadel_of_Adun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Cybernetics_Core_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Cybernetics_Core;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Templar_Archives_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Templar_Archives;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Forge_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Forge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Stargate_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Stargate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Stasis_Cell_Prison_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Stasis_Cell_Prison;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Fleet_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Fleet_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Arbiter_Tribunal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Arbiter_Tribunal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Robotics_Support_Bay_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Robotics_Support_Bay;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Protoss_Shield_Battery_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Shield_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Khaydarin_Crystal_Form_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Khaydarin_Crystal_Form;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Protoss_Temple_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Protoss_Temple;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_XelNaga_Temple_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_XelNaga_Temple;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Resource_Mineral_Field_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Mineral_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Resource_Mineral_Field_Type_2_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Mineral_Field_Type_2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Resource_Mineral_Field_Type_3_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Mineral_Field_Type_3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Independant_Starport_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Independant_Starport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Resource_Vespene_Geyser_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Vespene_Geyser;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Warp_Gate_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Warp_Gate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Psi_Disrupter_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Psi_Disrupter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Power_Generator_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Power_Generator;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Special_Overmind_Cocoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind_Cocoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Zerg_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Zerg_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Terran_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Terran_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Protoss_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Protoss_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Zerg_Flag_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Zerg_Flag_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Terran_Flag_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Terran_Flag_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Protoss_Flag_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Protoss_Flag_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Spell_Dark_Swarm_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Uraj_Crystal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Uraj_Crystal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Khalis_Crystal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Khalis_Crystal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Flag_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Flag;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Young_Chrysalis_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Young_Chrysalis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Psi_Emitter_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Psi_Emitter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Data_Disk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Data_Disk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup_Khaydarin_Crystal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Khaydarin_Crystal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Mineral_Cluster_Type_1_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Mineral_Cluster_Type_1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Mineral_Cluster_Type_2_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Mineral_Cluster_Type_2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Protoss_Gas_Orb_Type_1_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Protoss_Gas_Orb_Type_1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Protoss_Gas_Orb_Type_2_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Protoss_Gas_Orb_Type_2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Zerg_Gas_Sac_Type_1_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Zerg_Gas_Sac_Type_1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Zerg_Gas_Sac_Type_2_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Zerg_Gas_Sac_Type_2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Terran_Gas_Tank_Type_1_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Terran_Gas_Tank_Type_1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Powerup_Terran_Gas_Tank_Type_2_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Powerup_Terran_Gas_Tank_Type_2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Map_Revealer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Map_Revealer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Floor_Missile_Trap_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Floor_Missile_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Floor_Hatch_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Floor_Hatch;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Upper_Level_Door_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Upper_Level_Door;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Right_Upper_Level_Door_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Right_Upper_Level_Door;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Pit_Door_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Pit_Door;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Right_Pit_Door_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Right_Pit_Door;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Floor_Gun_Trap_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Floor_Gun_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Wall_Missile_Trap_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Wall_Missile_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Wall_Flame_Trap_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Wall_Flame_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Right_Wall_Missile_Trap_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Right_Wall_Missile_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Right_Wall_Flame_Trap_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Right_Wall_Flame_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Start_Location_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Start_Location;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_None_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AllUnits_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::AllUnits;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Men_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Men;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Buildings_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Buildings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Factories_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Factories;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypes_Unknown_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponType__SWIG_0() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WeaponType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (std::string *) &((BWAPI::WeaponType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WeaponType_c_str(void * jarg1) {
  char * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  char *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (char *)((BWAPI::WeaponType const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_getTech(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->getTech();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_whatUses(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->whatUses();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageAmount(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageAmount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageBonus(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageCooldown(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageFactor(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_upgradeType(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::UpgradeType result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->upgradeType();
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_damageType(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::DamageType result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->damageType();
  jresult = new BWAPI::DamageType((const BWAPI::DamageType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_explosionType(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::ExplosionType result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->explosionType();
  jresult = new BWAPI::ExplosionType((const BWAPI::ExplosionType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_minRange(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->minRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_maxRange(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->maxRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_innerSplashRadius(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->innerSplashRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_medianSplashRadius(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->medianSplashRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_outerSplashRadius(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->outerSplashRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsAir(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsAir();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsGround(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsGround();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsMechanical(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsMechanical();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsOrganic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrganic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsNonBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsNonRobotic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonRobotic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsTerrain(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsTerrain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsOrgOrMech(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrgOrMech();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsOwn(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOwn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeaponType(void * jarg1) {
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getWeaponType(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  BWAPI::WeaponType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = BWAPI::WeaponTypes::getWeaponType(arg1);
  jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allWeaponTypes() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::allWeaponTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_normalWeaponTypes() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::normalWeaponTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_specialWeaponTypes() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::specialWeaponTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponTypes_init() {
  BWAPI::WeaponTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Gauss_Rifle_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gauss_Rifle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gauss_Rifle_Jim_Raynor_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gauss_Rifle_Jim_Raynor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_C_10_Canister_Rifle_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_Sarah_Kerrigan_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle_Sarah_Kerrigan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_Samir_Duran_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle_Samir_Duran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_Infested_Duran_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle_Infested_Duran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_Alexei_Stukov_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle_Alexei_Stukov;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Fragmentation_Grenade_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fragmentation_Grenade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fragmentation_Grenade_Jim_Raynor_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fragmentation_Grenade_Jim_Raynor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Spider_Mines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spider_Mines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Twin_Autocannons_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Twin_Autocannons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Twin_Autocannons_Alan_Schezar_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Twin_Autocannons_Alan_Schezar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Hellfire_Missile_Pack_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Hellfire_Missile_Pack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hellfire_Missile_Pack_Alan_Schezar_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Hellfire_Missile_Pack_Alan_Schezar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Arclite_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Arclite_Cannon_Edmund_Duke_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Cannon_Edmund_Duke;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Fusion_Cutter_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fusion_Cutter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Gemini_Missiles_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gemini_Missiles;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gemini_Missiles_Tom_Kazansky_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gemini_Missiles_Tom_Kazansky;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Burst_Lasers_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Burst_Lasers;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Burst_Lasers_Tom_Kazansky_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Burst_Lasers_Tom_Kazansky;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_ATS_Laser_Battery_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATS_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATS_Laser_Battery_Hero_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATS_Laser_Battery_Hero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATS_Laser_Battery_Hyperion_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATS_Laser_Battery_Hyperion;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_ATA_Laser_Battery_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATA_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATA_Laser_Battery_Hero_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATA_Laser_Battery_Hero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATA_Laser_Battery_Hyperion_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATA_Laser_Battery_Hyperion;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Flame_Thrower_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Flame_Thrower;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Flame_Thrower_Gui_Montag_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Flame_Thrower_Gui_Montag;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Arclite_Shock_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Shock_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Arclite_Shock_Cannon_Edmund_Duke_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Shock_Cannon_Edmund_Duke;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Longbolt_Missile_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Longbolt_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Claws_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Claws;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Claws_Devouring_One_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Claws_Devouring_One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Claws_Infested_Kerrigan_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Claws_Infested_Kerrigan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Needle_Spines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Needle_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Needle_Spines_Hunter_Killer_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Needle_Spines_Hunter_Killer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Kaiser_Blades_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Kaiser_Blades;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Kaiser_Blades_Torrasque_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Kaiser_Blades_Torrasque;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Toxic_Spores_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Toxic_Spores;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Spines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Acid_Spore_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Acid_Spore;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Acid_Spore_Kukulza_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Acid_Spore_Kukulza;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Glave_Wurm_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Glave_Wurm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Glave_Wurm_Kukulza_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Glave_Wurm_Kukulza;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Seeker_Spores_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Seeker_Spores;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Subterranean_Tentacle_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Subterranean_Tentacle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Suicide_Infested_Terran_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Suicide_Infested_Terran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Suicide_Scourge_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Suicide_Scourge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Particle_Beam_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Particle_Beam;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Psi_Blades_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psi_Blades;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psi_Blades_Fenix_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psi_Blades_Fenix;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Phase_Disruptor_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Phase_Disruptor_Fenix_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor_Fenix;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psi_Assault_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psi_Assault;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Psionic_Shockwave_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psionic_Shockwave_TZ_Archon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Shockwave_TZ_Archon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Dual_Photon_Blasters_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dual_Photon_Blasters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dual_Photon_Blasters_Mojo_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dual_Photon_Blasters_Mojo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dual_Photon_Blasters_Artanis_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dual_Photon_Blasters_Artanis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Anti_Matter_Missiles_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Anti_Matter_Missiles;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anti_Matter_Missiles_Mojo_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Anti_Matter_Missiles_Mojo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anti_Matter_Missiles_Artanis_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Anti_Matter_Missiles_Artanis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Phase_Disruptor_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Phase_Disruptor_Cannon_Danimoth_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor_Cannon_Danimoth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Pulse_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Pulse_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_STS_Photon_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::STS_Photon_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_STA_Photon_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::STA_Photon_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Scarab_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Scarab;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Neutron_Flare_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Neutron_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Halo_Rockets_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Halo_Rockets;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Corrosive_Acid_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Corrosive_Acid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Subterranean_Spines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Subterranean_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Warp_Blades_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Warp_Blades;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Warp_Blades_Hero_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Warp_Blades_Hero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Warp_Blades_Zeratul_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Warp_Blades_Zeratul;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Independant_Laser_Battery_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Independant_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Twin_Autocannons_Floor_Trap_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Twin_Autocannons_Floor_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hellfire_Missile_Pack_Wall_Trap_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Hellfire_Missile_Pack_Wall_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Flame_Thrower_Wall_Trap_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Flame_Thrower_Wall_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hellfire_Missile_Pack_Floor_Trap_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Hellfire_Missile_Pack_Floor_Trap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Yamato_Gun_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Nuclear_Strike_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Nuclear_Strike;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Lockdown_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Lockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_EMP_Shockwave_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::EMP_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Irradiate_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Parasite_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Parasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Spawn_Broodlings_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spawn_Broodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Ensnare_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Dark_Swarm_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Plague_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Consume_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Stasis_Field_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Stasis_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Psionic_Storm_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Storm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Disruption_Web_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Restoration_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Mind_Control_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Mind_Control;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Feedback_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Feedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Optical_Flare_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Optical_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Maelstrom_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Maelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_None_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypes_Unknown_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Clear(void * jarg1) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Add(void * jarg1, void * jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((BWAPI::Position const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PositionVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  result = ((std::vector< BWAPI::Position > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PositionVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  result = ((std::vector< BWAPI::Position > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type arg2 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (std::vector< BWAPI::Position >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionVector__SWIG_0() {
  void * jresult ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = 0 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >((std::vector< BWAPI::Position > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< BWAPI::Position > *)new_std_vector_Sl_BWAPI_Position_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position result;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_BWAPI_Position_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (BWAPI::Position *) &std_vector_Sl_BWAPI_Position_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWAPI::Position *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__setitem(arg1,arg2,(BWAPI::Position const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position > *arg2 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (std::vector< BWAPI::Position > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_BWAPI_Position_Sg__AddRange(arg1,(std::vector< BWAPI::Position > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< BWAPI::Position > *)std_vector_Sl_BWAPI_Position_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWAPI::Position *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__Insert(arg1,arg2,(BWAPI::Position const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position > *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::Position > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__InsertRange(arg1,arg2,(std::vector< BWAPI::Position > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_BWAPI_Position_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWAPI_Position_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = 0 ;
  int arg2 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BWAPI::Position > *)std_vector_Sl_BWAPI_Position_Sg__Repeat((BWAPI::Position const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position > *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::Position > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__SetRange(arg1,arg2,(std::vector< BWAPI::Position > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PositionVector(void * jarg1) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Bullet * > *result = 0 ;
  
  result = (std::set< BWAPI::Bullet * > *)new std::set< BWAPI::Bullet * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Bullet * > *arg1 = 0 ;
  std::set< BWAPI::Bullet * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Bullet * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Bullet * > *)new std::set< BWAPI::Bullet * >((std::set< BWAPI::Bullet * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BulletPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::size_type result;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  result = ((std::set< BWAPI::Bullet * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Bullet * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletPtrSet_Clear(void * jarg1) {
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Bullet * >::key_type temp2 = 0 ;
  std::set< BWAPI::Bullet * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  temp2 = (std::set< BWAPI::Bullet * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Bullet * >::key_type *)&temp2; 
  try {
    result = (std::set< BWAPI::Bullet * >::key_type *) &std_set_Sl_BWAPI_Bullet_Sm__Sg__getitem(arg1,(BWAPI::Bullet *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Bullet * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  temp2 = (std::set< BWAPI::Bullet * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Bullet * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Bullet_Sm__Sg__ContainsKey(arg1,(BWAPI::Bullet *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Bullet * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  temp2 = (std::set< BWAPI::Bullet * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Bullet * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWAPI_Bullet_Sm__Sg__Add(arg1,(BWAPI::Bullet *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Bullet * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  temp2 = (std::set< BWAPI::Bullet * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Bullet * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Bullet_Sm__Sg__Remove(arg1,(BWAPI::Bullet *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  result = (std::set< BWAPI::Bullet * >::iterator *)std_set_Sl_BWAPI_Bullet_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  std::set< BWAPI::Bullet * >::iterator *arg2 = (std::set< BWAPI::Bullet * >::iterator *) 0 ;
  std::set< BWAPI::Bullet * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  arg2 = (std::set< BWAPI::Bullet * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Bullet * >::key_type *) &std_set_Sl_BWAPI_Bullet_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BulletPtrSet(void * jarg1) {
  std::set< BWAPI::Bullet * > *arg1 = (std::set< BWAPI::Bullet * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Bullet * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::BulletType > *result = 0 ;
  
  result = (std::set< BWAPI::BulletType > *)new std::set< BWAPI::BulletType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulletTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::BulletType > *arg1 = 0 ;
  std::set< BWAPI::BulletType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::BulletType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::BulletType > *)new std::set< BWAPI::BulletType >((std::set< BWAPI::BulletType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BulletTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::size_type result;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  result = ((std::set< BWAPI::BulletType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  result = (bool)((std::set< BWAPI::BulletType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::key_type *arg2 = 0 ;
  std::set< BWAPI::BulletType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  arg2 = (std::set< BWAPI::BulletType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::BulletType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::BulletType >::key_type *) &std_set_Sl_BWAPI_BulletType_Sg__getitem(arg1,(BWAPI::BulletType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  arg2 = (std::set< BWAPI::BulletType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::BulletType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_BulletType_Sg__ContainsKey(arg1,(BWAPI::BulletType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  arg2 = (std::set< BWAPI::BulletType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::BulletType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_BulletType_Sg__Add(arg1,(BWAPI::BulletType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulletTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  arg2 = (std::set< BWAPI::BulletType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::BulletType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_BulletType_Sg__Remove(arg1,(BWAPI::BulletType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  result = (std::set< BWAPI::BulletType >::iterator *)std_set_Sl_BWAPI_BulletType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BulletTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  std::set< BWAPI::BulletType >::iterator *arg2 = (std::set< BWAPI::BulletType >::iterator *) 0 ;
  std::set< BWAPI::BulletType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  arg2 = (std::set< BWAPI::BulletType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::BulletType >::key_type *) &std_set_Sl_BWAPI_BulletType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BulletTypeSet(void * jarg1) {
  std::set< BWAPI::BulletType > *arg1 = (std::set< BWAPI::BulletType > *) 0 ;
  
  arg1 = (std::set< BWAPI::BulletType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  result = (std::set< BWAPI::DamageType > *)new std::set< BWAPI::DamageType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = 0 ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::DamageType > *)new std::set< BWAPI::DamageType >((std::set< BWAPI::DamageType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DamageTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::size_type result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  result = ((std::set< BWAPI::DamageType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  result = (bool)((std::set< BWAPI::DamageType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  std::set< BWAPI::DamageType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::DamageType >::key_type *) &std_set_Sl_BWAPI_DamageType_Sg__getitem(arg1,(BWAPI::DamageType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_DamageType_Sg__ContainsKey(arg1,(BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_DamageType_Sg__Add(arg1,(BWAPI::DamageType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_DamageType_Sg__Remove(arg1,(BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  result = (std::set< BWAPI::DamageType >::iterator *)std_set_Sl_BWAPI_DamageType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::iterator *arg2 = (std::set< BWAPI::DamageType >::iterator *) 0 ;
  std::set< BWAPI::DamageType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::DamageType >::key_type *) &std_set_Sl_BWAPI_DamageType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DamageTypeSet(void * jarg1) {
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Error > *result = 0 ;
  
  result = (std::set< BWAPI::Error > *)new std::set< BWAPI::Error >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = 0 ;
  std::set< BWAPI::Error > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Error > *)new std::set< BWAPI::Error >((std::set< BWAPI::Error > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ErrorSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::size_type result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  result = ((std::set< BWAPI::Error > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ErrorSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  result = (bool)((std::set< BWAPI::Error > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorSet_Clear(void * jarg1) {
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  std::set< BWAPI::Error >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Error >::key_type *) &std_set_Sl_BWAPI_Error_Sg__getitem(arg1,(BWAPI::Error const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ErrorSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Error_Sg__ContainsKey(arg1,(BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Error_Sg__Add(arg1,(BWAPI::Error const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ErrorSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Error_Sg__Remove(arg1,(BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  result = (std::set< BWAPI::Error >::iterator *)std_set_Sl_BWAPI_Error_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::iterator *arg2 = (std::set< BWAPI::Error >::iterator *) 0 ;
  std::set< BWAPI::Error >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Error >::key_type *) &std_set_Sl_BWAPI_Error_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ErrorSet(void * jarg1) {
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  result = (std::set< BWAPI::ExplosionType > *)new std::set< BWAPI::ExplosionType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = 0 ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::ExplosionType > *)new std::set< BWAPI::ExplosionType >((std::set< BWAPI::ExplosionType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ExplosionTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::size_type result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  result = ((std::set< BWAPI::ExplosionType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  result = (bool)((std::set< BWAPI::ExplosionType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExplosionTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  std::set< BWAPI::ExplosionType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::ExplosionType >::key_type *) &std_set_Sl_BWAPI_ExplosionType_Sg__getitem(arg1,(BWAPI::ExplosionType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_ExplosionType_Sg__ContainsKey(arg1,(BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExplosionTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_ExplosionType_Sg__Add(arg1,(BWAPI::ExplosionType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_ExplosionType_Sg__Remove(arg1,(BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  result = (std::set< BWAPI::ExplosionType >::iterator *)std_set_Sl_BWAPI_ExplosionType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::iterator *arg2 = (std::set< BWAPI::ExplosionType >::iterator *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::ExplosionType >::key_type *) &std_set_Sl_BWAPI_ExplosionType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExplosionTypeSet(void * jarg1) {
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForcePtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  result = (std::set< BWAPI::Force * > *)new std::set< BWAPI::Force * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForcePtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = 0 ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Force * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Force * > *)new std::set< BWAPI::Force * >((std::set< BWAPI::Force * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ForcePtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::size_type result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  result = ((std::set< BWAPI::Force * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ForcePtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Force * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForcePtrSet_Clear(void * jarg1) {
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForcePtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  std::set< BWAPI::Force * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Force * >::key_type *)&temp2; 
  try {
    result = (std::set< BWAPI::Force * >::key_type *) &std_set_Sl_BWAPI_Force_Sm__Sg__getitem(arg1,(BWAPI::Force *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ForcePtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Force * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Force_Sm__Sg__ContainsKey(arg1,(BWAPI::Force *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForcePtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Force * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWAPI_Force_Sm__Sg__Add(arg1,(BWAPI::Force *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ForcePtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Force * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Force_Sm__Sg__Remove(arg1,(BWAPI::Force *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForcePtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  result = (std::set< BWAPI::Force * >::iterator *)std_set_Sl_BWAPI_Force_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForcePtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::iterator *arg2 = (std::set< BWAPI::Force * >::iterator *) 0 ;
  std::set< BWAPI::Force * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  arg2 = (std::set< BWAPI::Force * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Force * >::key_type *) &std_set_Sl_BWAPI_Force_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForcePtrSet(void * jarg1) {
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::GameType > *result = 0 ;
  
  result = (std::set< BWAPI::GameType > *)new std::set< BWAPI::GameType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::GameType > *arg1 = 0 ;
  std::set< BWAPI::GameType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::GameType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::GameType > *)new std::set< BWAPI::GameType >((std::set< BWAPI::GameType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GameTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::size_type result;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  result = ((std::set< BWAPI::GameType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  result = (bool)((std::set< BWAPI::GameType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::key_type *arg2 = 0 ;
  std::set< BWAPI::GameType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  arg2 = (std::set< BWAPI::GameType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::GameType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::GameType >::key_type *) &std_set_Sl_BWAPI_GameType_Sg__getitem(arg1,(BWAPI::GameType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  arg2 = (std::set< BWAPI::GameType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::GameType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_GameType_Sg__ContainsKey(arg1,(BWAPI::GameType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  arg2 = (std::set< BWAPI::GameType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::GameType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_GameType_Sg__Add(arg1,(BWAPI::GameType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GameTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  arg2 = (std::set< BWAPI::GameType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::GameType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_GameType_Sg__Remove(arg1,(BWAPI::GameType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  result = (std::set< BWAPI::GameType >::iterator *)std_set_Sl_BWAPI_GameType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  std::set< BWAPI::GameType >::iterator *arg2 = (std::set< BWAPI::GameType >::iterator *) 0 ;
  std::set< BWAPI::GameType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  arg2 = (std::set< BWAPI::GameType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::GameType >::key_type *) &std_set_Sl_BWAPI_GameType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameTypeSet(void * jarg1) {
  std::set< BWAPI::GameType > *arg1 = (std::set< BWAPI::GameType > *) 0 ;
  
  arg1 = (std::set< BWAPI::GameType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OrderSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Order > *result = 0 ;
  
  result = (std::set< BWAPI::Order > *)new std::set< BWAPI::Order >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OrderSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = 0 ;
  std::set< BWAPI::Order > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Order > *)new std::set< BWAPI::Order >((std::set< BWAPI::Order > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OrderSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::size_type result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  result = ((std::set< BWAPI::Order > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  result = (bool)((std::set< BWAPI::Order > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OrderSet_Clear(void * jarg1) {
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  std::set< BWAPI::Order >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Order >::key_type *) &std_set_Sl_BWAPI_Order_Sg__getitem(arg1,(BWAPI::Order const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Order_Sg__ContainsKey(arg1,(BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OrderSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Order_Sg__Add(arg1,(BWAPI::Order const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Order_Sg__Remove(arg1,(BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  result = (std::set< BWAPI::Order >::iterator *)std_set_Sl_BWAPI_Order_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::iterator *arg2 = (std::set< BWAPI::Order >::iterator *) 0 ;
  std::set< BWAPI::Order >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Order >::key_type *) &std_set_Sl_BWAPI_Order_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OrderSet(void * jarg1) {
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  result = (std::set< BWAPI::Player * > *)new std::set< BWAPI::Player * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Player * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Player * > *)new std::set< BWAPI::Player * >((std::set< BWAPI::Player * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PlayerPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::size_type result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  result = ((std::set< BWAPI::Player * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Player * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPtrSet_Clear(void * jarg1) {
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  std::set< BWAPI::Player * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Player * >::key_type *)&temp2; 
  try {
    result = (std::set< BWAPI::Player * >::key_type *) &std_set_Sl_BWAPI_Player_Sm__Sg__getitem(arg1,(BWAPI::Player *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Player * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Player_Sm__Sg__ContainsKey(arg1,(BWAPI::Player *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Player * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWAPI_Player_Sm__Sg__Add(arg1,(BWAPI::Player *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Player * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Player_Sm__Sg__Remove(arg1,(BWAPI::Player *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  result = (std::set< BWAPI::Player * >::iterator *)std_set_Sl_BWAPI_Player_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::iterator *arg2 = (std::set< BWAPI::Player * >::iterator *) 0 ;
  std::set< BWAPI::Player * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  arg2 = (std::set< BWAPI::Player * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Player * >::key_type *) &std_set_Sl_BWAPI_Player_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerPtrSet(void * jarg1) {
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  result = (std::set< BWAPI::PlayerType > *)new std::set< BWAPI::PlayerType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = 0 ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::PlayerType > *)new std::set< BWAPI::PlayerType >((std::set< BWAPI::PlayerType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PlayerTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::size_type result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  result = ((std::set< BWAPI::PlayerType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  result = (bool)((std::set< BWAPI::PlayerType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  std::set< BWAPI::PlayerType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::PlayerType >::key_type *) &std_set_Sl_BWAPI_PlayerType_Sg__getitem(arg1,(BWAPI::PlayerType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_PlayerType_Sg__ContainsKey(arg1,(BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_PlayerType_Sg__Add(arg1,(BWAPI::PlayerType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_PlayerType_Sg__Remove(arg1,(BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  result = (std::set< BWAPI::PlayerType >::iterator *)std_set_Sl_BWAPI_PlayerType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::iterator *arg2 = (std::set< BWAPI::PlayerType >::iterator *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::PlayerType >::key_type *) &std_set_Sl_BWAPI_PlayerType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerTypeSet(void * jarg1) {
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaceSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Race > *result = 0 ;
  
  result = (std::set< BWAPI::Race > *)new std::set< BWAPI::Race >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaceSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = 0 ;
  std::set< BWAPI::Race > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Race > *)new std::set< BWAPI::Race >((std::set< BWAPI::Race > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RaceSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::size_type result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  result = ((std::set< BWAPI::Race > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaceSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  result = (bool)((std::set< BWAPI::Race > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaceSet_Clear(void * jarg1) {
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  std::set< BWAPI::Race >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Race >::key_type *) &std_set_Sl_BWAPI_Race_Sg__getitem(arg1,(BWAPI::Race const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaceSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Race_Sg__ContainsKey(arg1,(BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaceSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Race_Sg__Add(arg1,(BWAPI::Race const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaceSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Race_Sg__Remove(arg1,(BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  result = (std::set< BWAPI::Race >::iterator *)std_set_Sl_BWAPI_Race_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::iterator *arg2 = (std::set< BWAPI::Race >::iterator *) 0 ;
  std::set< BWAPI::Race >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Race >::key_type *) &std_set_Sl_BWAPI_Race_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RaceSet(void * jarg1) {
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  result = (std::set< BWAPI::TechType > *)new std::set< BWAPI::TechType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = 0 ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::TechType > *)new std::set< BWAPI::TechType >((std::set< BWAPI::TechType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TechTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::size_type result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  result = ((std::set< BWAPI::TechType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  result = (bool)((std::set< BWAPI::TechType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  std::set< BWAPI::TechType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::TechType >::key_type *) &std_set_Sl_BWAPI_TechType_Sg__getitem(arg1,(BWAPI::TechType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TechType_Sg__ContainsKey(arg1,(BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_TechType_Sg__Add(arg1,(BWAPI::TechType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TechType_Sg__Remove(arg1,(BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  result = (std::set< BWAPI::TechType >::iterator *)std_set_Sl_BWAPI_TechType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::iterator *arg2 = (std::set< BWAPI::TechType >::iterator *) 0 ;
  std::set< BWAPI::TechType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::TechType >::key_type *) &std_set_Sl_BWAPI_TechType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TechTypeSet(void * jarg1) {
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  result = (std::set< BWAPI::TilePosition > *)new std::set< BWAPI::TilePosition >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = 0 ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::TilePosition > *)new std::set< BWAPI::TilePosition >((std::set< BWAPI::TilePosition > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TilePositionSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::size_type result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  result = ((std::set< BWAPI::TilePosition > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  result = (bool)((std::set< BWAPI::TilePosition > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionSet_Clear(void * jarg1) {
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  std::set< BWAPI::TilePosition >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::TilePosition >::key_type *) &std_set_Sl_BWAPI_TilePosition_Sg__getitem(arg1,(BWAPI::TilePosition const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TilePosition_Sg__ContainsKey(arg1,(BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_TilePosition_Sg__Add(arg1,(BWAPI::TilePosition const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TilePosition_Sg__Remove(arg1,(BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  result = (std::set< BWAPI::TilePosition >::iterator *)std_set_Sl_BWAPI_TilePosition_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::iterator *arg2 = (std::set< BWAPI::TilePosition >::iterator *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::TilePosition >::key_type *) &std_set_Sl_BWAPI_TilePosition_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePositionSet(void * jarg1) {
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  result = (std::set< BWAPI::Unit * > *)new std::set< BWAPI::Unit * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Unit * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Unit * > *)new std::set< BWAPI::Unit * >((std::set< BWAPI::Unit * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::size_type result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  result = ((std::set< BWAPI::Unit * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Unit * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitPtrSet_Clear(void * jarg1) {
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  std::set< BWAPI::Unit * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Unit * >::key_type *)&temp2; 
  try {
    result = (std::set< BWAPI::Unit * >::key_type *) &std_set_Sl_BWAPI_Unit_Sm__Sg__getitem(arg1,(BWAPI::Unit *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Unit * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Unit_Sm__Sg__ContainsKey(arg1,(BWAPI::Unit *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Unit * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWAPI_Unit_Sm__Sg__Add(arg1,(BWAPI::Unit *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = (std::set< BWAPI::Unit * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWAPI_Unit_Sm__Sg__Remove(arg1,(BWAPI::Unit *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  result = (std::set< BWAPI::Unit * >::iterator *)std_set_Sl_BWAPI_Unit_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::iterator *arg2 = (std::set< BWAPI::Unit * >::iterator *) 0 ;
  std::set< BWAPI::Unit * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Unit * >::key_type *) &std_set_Sl_BWAPI_Unit_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitPtrSet(void * jarg1) {
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitCommandTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UnitCommandType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitCommandType > *)new std::set< BWAPI::UnitCommandType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitCommandTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = 0 ;
  std::set< BWAPI::UnitCommandType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitCommandType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UnitCommandType > *)new std::set< BWAPI::UnitCommandType >((std::set< BWAPI::UnitCommandType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitCommandTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::size_type result;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  result = ((std::set< BWAPI::UnitCommandType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommandTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UnitCommandType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommandTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitCommandType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitCommandType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitCommandType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UnitCommandType >::key_type *) &std_set_Sl_BWAPI_UnitCommandType_Sg__getitem(arg1,(BWAPI::UnitCommandType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommandTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitCommandType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitCommandType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitCommandType_Sg__ContainsKey(arg1,(BWAPI::UnitCommandType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitCommandTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitCommandType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitCommandType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UnitCommandType_Sg__Add(arg1,(BWAPI::UnitCommandType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitCommandTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitCommandType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitCommandType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitCommandType_Sg__Remove(arg1,(BWAPI::UnitCommandType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  result = (std::set< BWAPI::UnitCommandType >::iterator *)std_set_Sl_BWAPI_UnitCommandType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitCommandTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  std::set< BWAPI::UnitCommandType >::iterator *arg2 = (std::set< BWAPI::UnitCommandType >::iterator *) 0 ;
  std::set< BWAPI::UnitCommandType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitCommandType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UnitCommandType >::key_type *) &std_set_Sl_BWAPI_UnitCommandType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitCommandTypeSet(void * jarg1) {
  std::set< BWAPI::UnitCommandType > *arg1 = (std::set< BWAPI::UnitCommandType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitCommandType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitSizeType > *)new std::set< BWAPI::UnitSizeType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = 0 ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UnitSizeType > *)new std::set< BWAPI::UnitSizeType >((std::set< BWAPI::UnitSizeType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitSizeTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::size_type result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  result = ((std::set< BWAPI::UnitSizeType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UnitSizeType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSizeTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UnitSizeType >::key_type *) &std_set_Sl_BWAPI_UnitSizeType_Sg__getitem(arg1,(BWAPI::UnitSizeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitSizeType_Sg__ContainsKey(arg1,(BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSizeTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UnitSizeType_Sg__Add(arg1,(BWAPI::UnitSizeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitSizeType_Sg__Remove(arg1,(BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  result = (std::set< BWAPI::UnitSizeType >::iterator *)std_set_Sl_BWAPI_UnitSizeType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::iterator *arg2 = (std::set< BWAPI::UnitSizeType >::iterator *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UnitSizeType >::key_type *) &std_set_Sl_BWAPI_UnitSizeType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitSizeTypeSet(void * jarg1) {
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitType > *)new std::set< BWAPI::UnitType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UnitType > *)new std::set< BWAPI::UnitType >((std::set< BWAPI::UnitType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::size_type result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  result = ((std::set< BWAPI::UnitType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UnitType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UnitType >::key_type *) &std_set_Sl_BWAPI_UnitType_Sg__getitem(arg1,(BWAPI::UnitType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitType_Sg__ContainsKey(arg1,(BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UnitType_Sg__Add(arg1,(BWAPI::UnitType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitType_Sg__Remove(arg1,(BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  result = (std::set< BWAPI::UnitType >::iterator *)std_set_Sl_BWAPI_UnitType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::iterator *arg2 = (std::set< BWAPI::UnitType >::iterator *) 0 ;
  std::set< BWAPI::UnitType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UnitType >::key_type *) &std_set_Sl_BWAPI_UnitType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypeSet(void * jarg1) {
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  result = (std::set< BWAPI::UpgradeType > *)new std::set< BWAPI::UpgradeType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = 0 ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UpgradeType > *)new std::set< BWAPI::UpgradeType >((std::set< BWAPI::UpgradeType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UpgradeTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::size_type result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  result = ((std::set< BWAPI::UpgradeType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UpgradeType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UpgradeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UpgradeType >::key_type *) &std_set_Sl_BWAPI_UpgradeType_Sg__getitem(arg1,(BWAPI::UpgradeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UpgradeType_Sg__ContainsKey(arg1,(BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UpgradeType_Sg__Add(arg1,(BWAPI::UpgradeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UpgradeType_Sg__Remove(arg1,(BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  result = (std::set< BWAPI::UpgradeType >::iterator *)std_set_Sl_BWAPI_UpgradeType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::iterator *arg2 = (std::set< BWAPI::UpgradeType >::iterator *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UpgradeType >::key_type *) &std_set_Sl_BWAPI_UpgradeType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UpgradeTypeSet(void * jarg1) {
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *)new std::set< BWAPI::WeaponType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = 0 ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::WeaponType > *)new std::set< BWAPI::WeaponType >((std::set< BWAPI::WeaponType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WeaponTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::size_type result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  result = ((std::set< BWAPI::WeaponType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  result = (bool)((std::set< BWAPI::WeaponType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  std::set< BWAPI::WeaponType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::WeaponType >::key_type *) &std_set_Sl_BWAPI_WeaponType_Sg__getitem(arg1,(BWAPI::WeaponType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_WeaponType_Sg__ContainsKey(arg1,(BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_WeaponType_Sg__Add(arg1,(BWAPI::WeaponType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_WeaponType_Sg__Remove(arg1,(BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  result = (std::set< BWAPI::WeaponType >::iterator *)std_set_Sl_BWAPI_WeaponType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::iterator *arg2 = (std::set< BWAPI::WeaponType >::iterator *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::WeaponType >::key_type *) &std_set_Sl_BWAPI_WeaponType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeaponTypeSet(void * jarg1) {
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventList_Clear(void * jarg1) {
  std::list< BWAPI::Event > *arg1 = (std::list< BWAPI::Event > *) 0 ;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventList_Add(void * jarg1, void * jarg2) {
  std::list< BWAPI::Event > *arg1 = (std::list< BWAPI::Event > *) 0 ;
  std::list< BWAPI::Event >::value_type *arg2 = 0 ;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1; 
  arg2 = (std::list< BWAPI::Event >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::Event >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::list< BWAPI::Event >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EventList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< BWAPI::Event > *arg1 = (std::list< BWAPI::Event > *) 0 ;
  std::list< BWAPI::Event >::size_type result;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1; 
  result = ((std::list< BWAPI::Event > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventList__SWIG_0() {
  void * jresult ;
  std::list< BWAPI::Event > *result = 0 ;
  
  result = (std::list< BWAPI::Event > *)new std::list< BWAPI::Event >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::Event > *arg1 = 0 ;
  std::list< BWAPI::Event > *result = 0 ;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::Event > const & type is null", 0);
    return 0;
  } 
  result = (std::list< BWAPI::Event > *)new std::list< BWAPI::Event >((std::list< BWAPI::Event > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventList_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::Event > *arg1 = (std::list< BWAPI::Event > *) 0 ;
  std::list< BWAPI::Event >::iterator *result = 0 ;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1; 
  result = (std::list< BWAPI::Event >::iterator *)std_list_Sl_BWAPI_Event_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventList_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< BWAPI::Event > *arg1 = (std::list< BWAPI::Event > *) 0 ;
  std::list< BWAPI::Event >::iterator *arg2 = (std::list< BWAPI::Event >::iterator *) 0 ;
  std::list< BWAPI::Event >::value_type *result = 0 ;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1; 
  arg2 = (std::list< BWAPI::Event >::iterator *)jarg2; 
  try {
    result = (std::list< BWAPI::Event >::value_type *) &std_list_Sl_BWAPI_Event_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EventList(void * jarg1) {
  std::list< BWAPI::Event > *arg1 = (std::list< BWAPI::Event > *) 0 ;
  
  arg1 = (std::list< BWAPI::Event > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeList_Clear(void * jarg1) {
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeList_Add(void * jarg1, void * jarg2) {
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::value_type *arg2 = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::list< BWAPI::UnitType >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::UnitType >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::list< BWAPI::UnitType >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypeList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::size_type result;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  result = ((std::list< BWAPI::UnitType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeList__SWIG_0() {
  void * jresult ;
  std::list< BWAPI::UnitType > *result = 0 ;
  
  result = (std::list< BWAPI::UnitType > *)new std::list< BWAPI::UnitType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::UnitType > *arg1 = 0 ;
  std::list< BWAPI::UnitType > *result = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::UnitType > const & type is null", 0);
    return 0;
  } 
  result = (std::list< BWAPI::UnitType > *)new std::list< BWAPI::UnitType >((std::list< BWAPI::UnitType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeList_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::iterator *result = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  result = (std::list< BWAPI::UnitType >::iterator *)std_list_Sl_BWAPI_UnitType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeList_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::iterator *arg2 = (std::list< BWAPI::UnitType >::iterator *) 0 ;
  std::list< BWAPI::UnitType >::value_type *result = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::list< BWAPI::UnitType >::iterator *)jarg2; 
  try {
    result = (std::list< BWAPI::UnitType >::value_type *) &std_list_Sl_BWAPI_UnitType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypeList(void * jarg1) {
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionDoubleMap__SWIG_0() {
  void * jresult ;
  std::map< BWAPI::TilePosition,double > *result = 0 ;
  
  result = (std::map< BWAPI::TilePosition,double > *)new std::map< BWAPI::TilePosition,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionDoubleMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > > *arg1 = 0 ;
  std::map< BWAPI::TilePosition,double > *result = 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< BWAPI::TilePosition,double > *)new std::map< BWAPI::TilePosition,double >((std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TilePositionDoubleMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double >::size_type result;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  result = ((std::map< BWAPI::TilePosition,double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionDoubleMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  result = (bool)((std::map< BWAPI::TilePosition,double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionDoubleMap_Clear(void * jarg1) {
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT double SWIGSTDCALL CSharp_TilePositionDoubleMap_getitem(void * jarg1, void * jarg2) {
  double jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double >::key_type *arg2 = 0 ;
  std::map< BWAPI::TilePosition,double >::mapped_type *result = 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::TilePosition,double >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::map< BWAPI::TilePosition,double >::mapped_type *) &std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__getitem(arg1,(BWAPI::TilePosition const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionDoubleMap_setitem(void * jarg1, void * jarg2, double jarg3) {
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double >::key_type *arg2 = 0 ;
  std::map< BWAPI::TilePosition,double >::mapped_type *arg3 = 0 ;
  std::map< BWAPI::TilePosition,double >::mapped_type temp3 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::TilePosition,double >::key_type const & type is null", 0);
    return ;
  } 
  temp3 = (std::map< BWAPI::TilePosition,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__setitem(arg1,(BWAPI::TilePosition const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionDoubleMap_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::TilePosition,double >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__ContainsKey(arg1,(BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionDoubleMap_Add(void * jarg1, void * jarg2, double jarg3) {
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double >::key_type *arg2 = 0 ;
  std::map< BWAPI::TilePosition,double >::mapped_type *arg3 = 0 ;
  std::map< BWAPI::TilePosition,double >::mapped_type temp3 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::TilePosition,double >::key_type const & type is null", 0);
    return ;
  } 
  temp3 = (std::map< BWAPI::TilePosition,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__Add(arg1,(BWAPI::TilePosition const &)*arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionDoubleMap_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::TilePosition,double >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__Remove(arg1,(BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionDoubleMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *result = 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  result = (std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *)std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionDoubleMap_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *arg2 = (std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *) 0 ;
  std::map< BWAPI::TilePosition,double >::key_type *result = 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *)jarg2; 
  result = (std::map< BWAPI::TilePosition,double >::key_type *) &std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__get_next_key(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionDoubleMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *arg2 = (std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *) 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >::iterator *)jarg2; 
  std_map_Sl_BWAPI_TilePosition_Sc_double_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePositionDoubleMap(void * jarg1) {
  std::map< BWAPI::TilePosition,double > *arg1 = (std::map< BWAPI::TilePosition,double > *) 0 ;
  
  arg1 = (std::map< BWAPI::TilePosition,double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeIntMap__SWIG_0() {
  void * jresult ;
  std::map< BWAPI::UnitType,int > *result = 0 ;
  
  result = (std::map< BWAPI::UnitType,int > *)new std::map< BWAPI::UnitType,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeIntMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > > *arg1 = 0 ;
  std::map< BWAPI::UnitType,int > *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > > const & type is null", 0);
    return 0;
  } 
  result = (std::map< BWAPI::UnitType,int > *)new std::map< BWAPI::UnitType,int >((std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypeIntMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int >::size_type result;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  result = ((std::map< BWAPI::UnitType,int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeIntMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  result = (bool)((std::map< BWAPI::UnitType,int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeIntMap_Clear(void * jarg1) {
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitTypeIntMap_getitem(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType,int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType,int >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::map< BWAPI::UnitType,int >::mapped_type *) &std_map_Sl_BWAPI_UnitType_Sc_int_Sg__getitem(arg1,(BWAPI::UnitType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeIntMap_setitem(void * jarg1, void * jarg2, int jarg3) {
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType,int >::mapped_type *arg3 = 0 ;
  std::map< BWAPI::UnitType,int >::mapped_type temp3 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType,int >::key_type const & type is null", 0);
    return ;
  } 
  temp3 = (std::map< BWAPI::UnitType,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_BWAPI_UnitType_Sc_int_Sg__setitem(arg1,(BWAPI::UnitType const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeIntMap_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType,int >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_map_Sl_BWAPI_UnitType_Sc_int_Sg__ContainsKey(arg1,(BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeIntMap_Add(void * jarg1, void * jarg2, int jarg3) {
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType,int >::mapped_type *arg3 = 0 ;
  std::map< BWAPI::UnitType,int >::mapped_type temp3 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType,int >::key_type const & type is null", 0);
    return ;
  } 
  temp3 = (std::map< BWAPI::UnitType,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_BWAPI_UnitType_Sc_int_Sg__Add(arg1,(BWAPI::UnitType const &)*arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeIntMap_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType,int >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_map_Sl_BWAPI_UnitType_Sc_int_Sg__Remove(arg1,(BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeIntMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  result = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *)std_map_Sl_BWAPI_UnitType_Sc_int_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeIntMap_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *arg2 = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *) 0 ;
  std::map< BWAPI::UnitType,int >::key_type *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *)jarg2; 
  result = (std::map< BWAPI::UnitType,int >::key_type *) &std_map_Sl_BWAPI_UnitType_Sc_int_Sg__get_next_key(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeIntMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *arg2 = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *) 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType,int,std::less< BWAPI::UnitType > >::iterator *)jarg2; 
  std_map_Sl_BWAPI_UnitType_Sc_int_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypeIntMap(void * jarg1) {
  std::map< BWAPI::UnitType,int > *arg1 = (std::map< BWAPI::UnitType,int > *) 0 ;
  
  arg1 = (std::map< BWAPI::UnitType,int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionPair__SWIG_0() {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionPair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp1 ;
  BWAPI::Position *argp2 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWAPI::Position,BWAPI::Position > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >((std::pair< BWAPI::Position,BWAPI::Position > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionPair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = (BWAPI::Position *) 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  result = (BWAPI::Position *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionPair_second_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = (BWAPI::Position *) 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionPair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  result = (BWAPI::Position *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PositionPair(void * jarg1) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionDoublePair__SWIG_0() {
  void * jresult ;
  std::pair< BWAPI::TilePosition,double > *result = 0 ;
  
  result = (std::pair< BWAPI::TilePosition,double > *)new std::pair< BWAPI::TilePosition,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionDoublePair__SWIG_1(void * jarg1, double jarg2) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  double arg2 ;
  BWAPI::TilePosition *argp1 ;
  std::pair< BWAPI::TilePosition,double > *result = 0 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (std::pair< BWAPI::TilePosition,double > *)new std::pair< BWAPI::TilePosition,double >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionDoublePair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::TilePosition,double > *arg1 = 0 ;
  std::pair< BWAPI::TilePosition,double > *result = 0 ;
  
  arg1 = (std::pair< BWAPI::TilePosition,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWAPI::TilePosition,double > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWAPI::TilePosition,double > *)new std::pair< BWAPI::TilePosition,double >((std::pair< BWAPI::TilePosition,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionDoublePair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::TilePosition,double > *arg1 = (std::pair< BWAPI::TilePosition,double > *) 0 ;
  BWAPI::TilePosition *arg2 = (BWAPI::TilePosition *) 0 ;
  
  arg1 = (std::pair< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionDoublePair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::TilePosition,double > *arg1 = (std::pair< BWAPI::TilePosition,double > *) 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (std::pair< BWAPI::TilePosition,double > *)jarg1; 
  result = (BWAPI::TilePosition *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionDoublePair_second_set(void * jarg1, double jarg2) {
  std::pair< BWAPI::TilePosition,double > *arg1 = (std::pair< BWAPI::TilePosition,double > *) 0 ;
  double arg2 ;
  
  arg1 = (std::pair< BWAPI::TilePosition,double > *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TilePositionDoublePair_second_get(void * jarg1) {
  double jresult ;
  std::pair< BWAPI::TilePosition,double > *arg1 = (std::pair< BWAPI::TilePosition,double > *) 0 ;
  double result;
  
  arg1 = (std::pair< BWAPI::TilePosition,double > *)jarg1; 
  result = (double) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePositionDoublePair(void * jarg1) {
  std::pair< BWAPI::TilePosition,double > *arg1 = (std::pair< BWAPI::TilePosition,double > *) 0 ;
  
  arg1 = (std::pair< BWAPI::TilePosition,double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeIntPair__SWIG_0() {
  void * jresult ;
  std::pair< BWAPI::UnitType,int > *result = 0 ;
  
  result = (std::pair< BWAPI::UnitType,int > *)new std::pair< BWAPI::UnitType,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeIntPair__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::UnitType arg1 ;
  int arg2 ;
  BWAPI::UnitType *argp1 ;
  std::pair< BWAPI::UnitType,int > *result = 0 ;
  
  argp1 = (BWAPI::UnitType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  result = (std::pair< BWAPI::UnitType,int > *)new std::pair< BWAPI::UnitType,int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeIntPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::UnitType,int > *arg1 = 0 ;
  std::pair< BWAPI::UnitType,int > *result = 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWAPI::UnitType,int > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWAPI::UnitType,int > *)new std::pair< BWAPI::UnitType,int >((std::pair< BWAPI::UnitType,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeIntPair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::UnitType,int > *arg1 = (std::pair< BWAPI::UnitType,int > *) 0 ;
  BWAPI::UnitType *arg2 = (BWAPI::UnitType *) 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (BWAPI::UnitType *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeIntPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::UnitType,int > *arg1 = (std::pair< BWAPI::UnitType,int > *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType,int > *)jarg1; 
  result = (BWAPI::UnitType *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeIntPair_second_set(void * jarg1, int jarg2) {
  std::pair< BWAPI::UnitType,int > *arg1 = (std::pair< BWAPI::UnitType,int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< BWAPI::UnitType,int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitTypeIntPair_second_get(void * jarg1) {
  int jresult ;
  std::pair< BWAPI::UnitType,int > *arg1 = (std::pair< BWAPI::UnitType,int > *) 0 ;
  int result;
  
  arg1 = (std::pair< BWAPI::UnitType,int > *)jarg1; 
  result = (int) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypeIntPair(void * jarg1) {
  std::pair< BWAPI::UnitType,int > *arg1 = (std::pair< BWAPI::UnitType,int > *) 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType,int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_Clear(void * jarg1) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_Add(void * jarg1, void * jarg2) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((BWAPI::TilePosition const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TilePositionVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  std::vector< BWAPI::TilePosition >::size_type result;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  result = ((std::vector< BWAPI::TilePosition > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TilePositionVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  std::vector< BWAPI::TilePosition >::size_type result;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  result = ((std::vector< BWAPI::TilePosition > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  std::vector< BWAPI::TilePosition >::size_type arg2 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::vector< BWAPI::TilePosition >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionVector__SWIG_0() {
  void * jresult ;
  std::vector< BWAPI::TilePosition > *result = 0 ;
  
  result = (std::vector< BWAPI::TilePosition > *)new std::vector< BWAPI::TilePosition >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< BWAPI::TilePosition > *arg1 = 0 ;
  std::vector< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::TilePosition > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< BWAPI::TilePosition > *)new std::vector< BWAPI::TilePosition >((std::vector< BWAPI::TilePosition > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< BWAPI::TilePosition > *)new_std_vector_Sl_BWAPI_TilePosition_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  BWAPI::TilePosition result;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_BWAPI_TilePosition_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (BWAPI::TilePosition *) &std_vector_Sl_BWAPI_TilePosition_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  BWAPI::TilePosition *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWAPI::TilePosition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__setitem(arg1,arg2,(BWAPI::TilePosition const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  std::vector< BWAPI::TilePosition > *arg2 = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::vector< BWAPI::TilePosition > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::TilePosition > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_BWAPI_TilePosition_Sg__AddRange(arg1,(std::vector< BWAPI::TilePosition > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< BWAPI::TilePosition > *)std_vector_Sl_BWAPI_TilePosition_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  BWAPI::TilePosition *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWAPI::TilePosition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__Insert(arg1,arg2,(BWAPI::TilePosition const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::TilePosition > *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::TilePosition > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::TilePosition > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__InsertRange(arg1,arg2,(std::vector< BWAPI::TilePosition > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = 0 ;
  int arg2 ;
  std::vector< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BWAPI::TilePosition > *)std_vector_Sl_BWAPI_TilePosition_Sg__Repeat((BWAPI::TilePosition const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  std_vector_Sl_BWAPI_TilePosition_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::TilePosition > *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::TilePosition > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::TilePosition > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_TilePosition_Sg__SetRange(arg1,arg2,(std::vector< BWAPI::TilePosition > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePositionVector(void * jarg1) {
  std::vector< BWAPI::TilePosition > *arg1 = (std::vector< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::vector< BWAPI::TilePosition > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Position > *result = 0 ;
  
  result = (std::set< BWAPI::Position > *)new std::set< BWAPI::Position >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Position > *arg1 = 0 ;
  std::set< BWAPI::Position > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Position > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Position > *)new std::set< BWAPI::Position >((std::set< BWAPI::Position > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PositionSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::size_type result;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  result = ((std::set< BWAPI::Position > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PositionSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  result = (bool)((std::set< BWAPI::Position > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionSet_Clear(void * jarg1) {
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::key_type *arg2 = 0 ;
  std::set< BWAPI::Position >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  arg2 = (std::set< BWAPI::Position >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Position >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Position >::key_type *) &std_set_Sl_BWAPI_Position_Sg__getitem(arg1,(BWAPI::Position const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PositionSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  arg2 = (std::set< BWAPI::Position >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Position >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Position_Sg__ContainsKey(arg1,(BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  arg2 = (std::set< BWAPI::Position >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Position >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Position_Sg__Add(arg1,(BWAPI::Position const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PositionSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  arg2 = (std::set< BWAPI::Position >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Position >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Position_Sg__Remove(arg1,(BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  result = (std::set< BWAPI::Position >::iterator *)std_set_Sl_BWAPI_Position_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  std::set< BWAPI::Position >::iterator *arg2 = (std::set< BWAPI::Position >::iterator *) 0 ;
  std::set< BWAPI::Position >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  arg2 = (std::set< BWAPI::Position >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Position >::key_type *) &std_set_Sl_BWAPI_Position_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PositionSet(void * jarg1) {
  std::set< BWAPI::Position > *arg1 = (std::set< BWAPI::Position > *) 0 ;
  
  arg1 = (std::set< BWAPI::Position > *)jarg1; 
  delete arg1;
}


SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_GameType_SWIGUpcast(BWAPI::GameType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_Race_SWIGUpcast(BWAPI::Race *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_TechType_SWIGUpcast(BWAPI::TechType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_UpgradeType_SWIGUpcast(BWAPI::UpgradeType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_Color_SWIGUpcast(BWAPI::Color *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_DamageType_SWIGUpcast(BWAPI::DamageType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_Error_SWIGUpcast(BWAPI::Error *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_ExplosionType_SWIGUpcast(BWAPI::ExplosionType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_Order_SWIGUpcast(BWAPI::Order *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_PlayerType_SWIGUpcast(BWAPI::PlayerType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_BulletType_SWIGUpcast(BWAPI::BulletType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_UnitCommandType_SWIGUpcast(BWAPI::UnitCommandType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_UnitSizeType_SWIGUpcast(BWAPI::UnitSizeType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_UnitType_SWIGUpcast(BWAPI::UnitType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

SWIGEXPORT BWAPI::Type * SWIGSTDCALL CSharp_WeaponType_SWIGUpcast(BWAPI::WeaponType *jarg1) {
    return (BWAPI::Type *)jarg1;
}

#ifdef __cplusplus
}
#endif

