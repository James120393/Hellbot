//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SWIG.BWAPI {

public partial class Bullet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Bullet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bullet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is Bullet)
      equal = (((Bullet)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(Bullet obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(Bullet obj1, Bullet obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(Bullet obj1, Bullet obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public virtual int getID() {
    int ret = bwapiPINVOKE.Bullet_getID(swigCPtr);
    return ret;
  }

  public virtual Player getPlayer() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Bullet_getPlayer(swigCPtr);
    Player ret = (cPtr == global::System.IntPtr.Zero) ? null : new Player(cPtr, false);
    return ret;
  }

  public virtual BulletType getType() {
    BulletType ret = new BulletType(bwapiPINVOKE.Bullet_getType(swigCPtr), true);
    return ret;
  }

  public virtual Unit getSource() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Bullet_getSource(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Position getPosition() {
    Position ret = new Position(bwapiPINVOKE.Bullet_getPosition(swigCPtr), true);
    return ret;
  }

  public virtual double getAngle() {
    double ret = bwapiPINVOKE.Bullet_getAngle(swigCPtr);
    return ret;
  }

  public virtual double getVelocityX() {
    double ret = bwapiPINVOKE.Bullet_getVelocityX(swigCPtr);
    return ret;
  }

  public virtual double getVelocityY() {
    double ret = bwapiPINVOKE.Bullet_getVelocityY(swigCPtr);
    return ret;
  }

  public virtual Unit getTarget() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Bullet_getTarget(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Position getTargetPosition() {
    Position ret = new Position(bwapiPINVOKE.Bullet_getTargetPosition(swigCPtr), true);
    return ret;
  }

  public virtual int getRemoveTimer() {
    int ret = bwapiPINVOKE.Bullet_getRemoveTimer(swigCPtr);
    return ret;
  }

  public virtual bool exists() {
    bool ret = bwapiPINVOKE.Bullet_exists(swigCPtr);
    return ret;
  }

  public virtual bool isVisible() {
    bool ret = bwapiPINVOKE.Bullet_isVisible__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual bool isVisible(Player player) {
    bool ret = bwapiPINVOKE.Bullet_isVisible__SWIG_1(swigCPtr, Player.getCPtr(player));
    return ret;
  }

}

}
