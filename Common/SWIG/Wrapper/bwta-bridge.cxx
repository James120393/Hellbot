/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_bwta(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_bwta(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_bwta(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <set>
#include <algorithm>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include "BWAPI.h"
#include "BWTA.h"

using namespace BWTA;

SWIGINTERN std::set< BWTA::BaseLocation * >::key_type const &std_set_Sl_BWTA_BaseLocation_Sm__Sg__getitem(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_BaseLocation_Sm__Sg__ContainsKey(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_BaseLocation_Sm__Sg__Add(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_BaseLocation_Sm__Sg__Remove(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::BaseLocation * >::iterator *std_set_Sl_BWTA_BaseLocation_Sm__Sg__create_iterator_begin(std::set< BWTA::BaseLocation * > *self){
        return new std::set< BWTA::BaseLocation * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::BaseLocation * >::key_type const &std_set_Sl_BWTA_BaseLocation_Sm__Sg__get_next_key(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::iterator *swigiterator){
        std::set< BWTA::BaseLocation * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::Region * >::key_type const &std_set_Sl_BWTA_Region_Sm__Sg__getitem(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_Region_Sm__Sg__ContainsKey(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_Region_Sm__Sg__Add(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_Region_Sm__Sg__Remove(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::Region * >::iterator *std_set_Sl_BWTA_Region_Sm__Sg__create_iterator_begin(std::set< BWTA::Region * > *self){
        return new std::set< BWTA::Region * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::Region * >::key_type const &std_set_Sl_BWTA_Region_Sm__Sg__get_next_key(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::iterator *swigiterator){
        std::set< BWTA::Region * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::Chokepoint * >::key_type const &std_set_Sl_BWTA_Chokepoint_Sm__Sg__getitem(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_Chokepoint_Sm__Sg__ContainsKey(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_Chokepoint_Sm__Sg__Add(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_Chokepoint_Sm__Sg__Remove(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::Chokepoint * >::iterator *std_set_Sl_BWTA_Chokepoint_Sm__Sg__create_iterator_begin(std::set< BWTA::Chokepoint * > *self){
        return new std::set< BWTA::Chokepoint * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::Chokepoint * >::key_type const &std_set_Sl_BWTA_Chokepoint_Sm__Sg__get_next_key(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::iterator *swigiterator){
        std::set< BWTA::Chokepoint * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::Polygon * >::key_type const &std_set_Sl_BWTA_Polygon_Sm__Sg__getitem(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_Polygon_Sm__Sg__ContainsKey(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_Polygon_Sm__Sg__Add(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_Polygon_Sm__Sg__Remove(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::Polygon * >::iterator *std_set_Sl_BWTA_Polygon_Sm__Sg__create_iterator_begin(std::set< BWTA::Polygon * > *self){
        return new std::set< BWTA::Polygon * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::Polygon * >::key_type const &std_set_Sl_BWTA_Polygon_Sm__Sg__get_next_key(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::iterator *swigiterator){
        std::set< BWTA::Polygon * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::vector< BWTA::Polygon > *new_std_vector_Sl_BWTA_Polygon_Sg___SWIG_2(int capacity){
        std::vector< BWTA::Polygon >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< BWTA::Polygon >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN BWTA::Polygon std_vector_Sl_BWTA_Polygon_Sg__getitemcopy(std::vector< BWTA::Polygon > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN BWTA::Polygon const &std_vector_Sl_BWTA_Polygon_Sg__getitem(std::vector< BWTA::Polygon > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__setitem(std::vector< BWTA::Polygon > *self,int index,BWTA::Polygon const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__AddRange(std::vector< BWTA::Polygon > *self,std::vector< BWTA::Polygon > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< BWTA::Polygon > *std_vector_Sl_BWTA_Polygon_Sg__GetRange(std::vector< BWTA::Polygon > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< BWTA::Polygon >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__Insert(std::vector< BWTA::Polygon > *self,int index,BWTA::Polygon const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__InsertRange(std::vector< BWTA::Polygon > *self,int index,std::vector< BWTA::Polygon > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__RemoveAt(std::vector< BWTA::Polygon > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__RemoveRange(std::vector< BWTA::Polygon > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< BWTA::Polygon > *std_vector_Sl_BWTA_Polygon_Sg__Repeat(BWTA::Polygon const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< BWTA::Polygon >(count, value);
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__Reverse__SWIG_0(std::vector< BWTA::Polygon > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__Reverse__SWIG_1(std::vector< BWTA::Polygon > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWTA_Polygon_Sg__SetRange(std::vector< BWTA::Polygon > *self,int index,std::vector< BWTA::Polygon > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getPosition(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = ((BWTA::BaseLocation const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getTilePosition(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = ((BWTA::BaseLocation const *)arg1)->getTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getRegion(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (BWTA::Region *)((BWTA::BaseLocation const *)arg1)->getRegion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseLocation_minerals(void * jarg1) {
  int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  int result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (int)((BWTA::BaseLocation const *)arg1)->minerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseLocation_gas(void * jarg1) {
  int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  int result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (int)((BWTA::BaseLocation const *)arg1)->gas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getMinerals(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getStaticMinerals(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWTA::BaseLocation const *)arg1)->getStaticMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getGeysers(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWTA::BaseLocation const *)arg1)->getGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseLocation_getGroundDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  double result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  arg2 = (BWTA::BaseLocation *)jarg2; 
  result = (double)((BWTA::BaseLocation const *)arg1)->getGroundDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseLocation_getAirDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  double result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  arg2 = (BWTA::BaseLocation *)jarg2; 
  result = (double)((BWTA::BaseLocation const *)arg1)->getAirDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocation_isIsland(void * jarg1) {
  unsigned int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isIsland();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocation_isMineralOnly(void * jarg1) {
  unsigned int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isMineralOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocation_isStartLocation(void * jarg1) {
  unsigned int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isStartLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseLocation(void * jarg1) {
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chokepoint_getRegions(void * jarg1) {
  void * jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *) &((BWTA::Chokepoint const *)arg1)->getRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chokepoint_getSides(void * jarg1) {
  void * jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *) &((BWTA::Chokepoint const *)arg1)->getSides();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chokepoint_getCenter(void * jarg1) {
  void * jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = ((BWTA::Chokepoint const *)arg1)->getCenter();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Chokepoint_getWidth(void * jarg1) {
  double jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  double result;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = (double)((BWTA::Chokepoint const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Chokepoint(void * jarg1) {
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon__SWIG_0() {
  void * jresult ;
  BWTA::Polygon *result = 0 ;
  
  result = (BWTA::Polygon *)new BWTA::Polygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon__SWIG_1(void * jarg1) {
  void * jresult ;
  BWTA::Polygon *arg1 = 0 ;
  BWTA::Polygon *result = 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::Polygon const & type is null", 0);
    return 0;
  } 
  result = (BWTA::Polygon *)new BWTA::Polygon((BWTA::Polygon const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Polygon_getArea(void * jarg1) {
  double jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  double result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = (double)((BWTA::Polygon const *)arg1)->getArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Polygon_getPerimeter(void * jarg1) {
  double jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  double result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = (double)((BWTA::Polygon const *)arg1)->getPerimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getCenter(void * jarg1) {
  void * jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = ((BWTA::Polygon const *)arg1)->getCenter();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Polygon_isInside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWTA::Polygon const *)arg1)->isInside(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getNearestPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((BWTA::Polygon const *)arg1)->getNearestPoint(arg2);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getHoles(void * jarg1) {
  void * jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = (std::vector< BWTA::Polygon > *) &((BWTA::Polygon const *)arg1)->getHoles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon_holes_set(void * jarg1, void * jarg2) {
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  std::vector< BWTA::Polygon > *arg2 = (std::vector< BWTA::Polygon > *) 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  arg2 = (std::vector< BWTA::Polygon > *)jarg2; 
  if (arg1) (arg1)->holes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_holes_get(void * jarg1) {
  void * jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = (std::vector< BWTA::Polygon > *)& ((arg1)->holes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Polygon(void * jarg1) {
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getPolygon(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Polygon *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (BWTA::Polygon *) &((BWTA::Region const *)arg1)->getPolygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getCenter(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (BWAPI::Position *) &((BWTA::Region const *)arg1)->getCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getChokepoints(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (std::set< BWTA::Chokepoint * > *) &((BWTA::Region const *)arg1)->getChokepoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getBaseLocations(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (std::set< BWTA::BaseLocation * > *) &((BWTA::Region const *)arg1)->getBaseLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Region_isReachable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  bool result;
  
  arg1 = (BWTA::Region *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  result = (bool)((BWTA::Region const *)arg1)->isReachable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getReachableRegions(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::Region * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (std::set< BWTA::Region * > *) &((BWTA::Region const *)arg1)->getReachableRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Region(void * jarg1) {
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_readMap() {
  BWTA::readMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_analyze() {
  BWTA::analyze();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRegions() {
  void * jresult ;
  std::set< BWTA::Region * > *result = 0 ;
  
  result = (std::set< BWTA::Region * > *) &BWTA::getRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getChokepoints() {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  result = (std::set< BWTA::Chokepoint * > *) &BWTA::getChokepoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getBaseLocations() {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  result = (std::set< BWTA::BaseLocation * > *) &BWTA::getBaseLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getStartLocations() {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  result = (std::set< BWTA::BaseLocation * > *) &BWTA::getStartLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnwalkablePolygons() {
  void * jresult ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  result = (std::set< BWTA::Polygon * > *) &BWTA::getUnwalkablePolygons();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getStartLocation(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (BWTA::BaseLocation *)BWTA::getStartLocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRegion__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWTA::Region *)BWTA::getRegion(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRegion__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition *argp1 ;
  BWTA::Region *result = 0 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::Region *)BWTA::getRegion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRegion__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWTA::Region *result = 0 ;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::Region *)BWTA::getRegion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestChokepoint__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWTA::Chokepoint *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWTA::Chokepoint *)BWTA::getNearestChokepoint(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestChokepoint__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition *argp1 ;
  BWTA::Chokepoint *result = 0 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::Chokepoint *)BWTA::getNearestChokepoint(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestChokepoint__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWTA::Chokepoint *result = 0 ;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::Chokepoint *)BWTA::getNearestChokepoint(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestBaseLocation__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWTA::BaseLocation *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWTA::BaseLocation *)BWTA::getNearestBaseLocation(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestBaseLocation__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition *argp1 ;
  BWTA::BaseLocation *result = 0 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::BaseLocation *)BWTA::getNearestBaseLocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestBaseLocation__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWTA::BaseLocation *result = 0 ;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::BaseLocation *)BWTA::getNearestBaseLocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestUnwalkablePolygon__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWTA::Polygon *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWTA::Polygon *)BWTA::getNearestUnwalkablePolygon(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestUnwalkablePolygon__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition *argp1 ;
  BWTA::Polygon *result = 0 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::Polygon *)BWTA::getNearestUnwalkablePolygon(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestUnwalkablePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWAPI::Position result;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = BWTA::getNearestUnwalkablePosition(arg1);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isConnected__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)BWTA::isConnected(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isConnected__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp1 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)BWTA::isConnected(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_getGroundDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp1 ;
  BWAPI::TilePosition *argp2 ;
  double result;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)BWTA::getGroundDistance(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestTilePosition(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  std::set< BWAPI::TilePosition > *arg2 = 0 ;
  BWAPI::TilePosition *argp1 ;
  std::pair< BWAPI::TilePosition,double > result;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (std::set< BWAPI::TilePosition > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition > const & type is null", 0);
    return 0;
  } 
  result = BWTA::getNearestTilePosition(arg1,(std::set< BWAPI::TilePosition > const &)*arg2);
  jresult = new std::pair< BWAPI::TilePosition,double >((const std::pair< BWAPI::TilePosition,double > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getGroundDistances(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  std::set< BWAPI::TilePosition > *arg2 = 0 ;
  BWAPI::TilePosition *argp1 ;
  std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > > result;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (std::set< BWAPI::TilePosition > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition > const & type is null", 0);
    return 0;
  } 
  result = BWTA::getGroundDistances(arg1,(std::set< BWAPI::TilePosition > const &)*arg2);
  jresult = new std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > >((const std::map< BWAPI::TilePosition,double,std::less< BWAPI::TilePosition > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_getGroundDistanceMap(void * jarg1, void * jarg2) {
  BWAPI::TilePosition arg1 ;
  BWTA::RectangleArray< double > *arg2 = 0 ;
  BWAPI::TilePosition *argp1 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (BWTA::RectangleArray< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::RectangleArray< double > & type is null", 0);
    return ;
  } 
  BWTA::getGroundDistanceMap(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_getGroundWalkDistanceMap(int jarg1, int jarg2, void * jarg3) {
  int arg1 ;
  int arg2 ;
  BWTA::RectangleArray< double > *arg3 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWTA::RectangleArray< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::RectangleArray< double > & type is null", 0);
    return ;
  } 
  BWTA::getGroundWalkDistanceMap(arg1,arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getShortestPath__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp1 ;
  BWAPI::TilePosition *argp2 ;
  std::vector< BWAPI::TilePosition > result;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = BWTA::getShortestPath(arg1,arg2);
  jresult = new std::vector< BWAPI::TilePosition >((const std::vector< BWAPI::TilePosition > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getShortestPath__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  std::set< BWAPI::TilePosition > *arg2 = 0 ;
  BWAPI::TilePosition *argp1 ;
  std::vector< BWAPI::TilePosition > result;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (std::set< BWAPI::TilePosition > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition > const & type is null", 0);
    return 0;
  } 
  result = BWTA::getShortestPath(arg1,(std::set< BWAPI::TilePosition > const &)*arg2);
  jresult = new std::vector< BWAPI::TilePosition >((const std::vector< BWAPI::TilePosition > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleArrayDouble__SWIG_0(unsigned int jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  BWTA::RectangleArray< double > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (BWTA::RectangleArray< double > *)new BWTA::RectangleArray< double >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleArrayDouble__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  BWTA::RectangleArray< double > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (BWTA::RectangleArray< double > *)new BWTA::RectangleArray< double >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleArrayDouble__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  BWTA::RectangleArray< double > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (BWTA::RectangleArray< double > *)new BWTA::RectangleArray< double >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleArrayDouble__SWIG_3() {
  void * jresult ;
  BWTA::RectangleArray< double > *result = 0 ;
  
  result = (BWTA::RectangleArray< double > *)new BWTA::RectangleArray< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleArrayDouble__SWIG_4(void * jarg1) {
  void * jresult ;
  BWTA::RectangleArray< double > *arg1 = 0 ;
  BWTA::RectangleArray< double > *result = 0 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::RectangleArray< double > const & type is null", 0);
    return 0;
  } 
  result = (BWTA::RectangleArray< double > *)new BWTA::RectangleArray< double >((BWTA::RectangleArray< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RectangleArrayDouble(void * jarg1) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectangleArrayDouble_getWidth(void * jarg1) {
  unsigned int jresult ;
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  unsigned int result;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  result = (unsigned int)((BWTA::RectangleArray< double > const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RectangleArrayDouble_getHeight(void * jarg1) {
  unsigned int jresult ;
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  unsigned int result;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  result = (unsigned int)((BWTA::RectangleArray< double > const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RectangleArrayDouble_getItem(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  double jresult ;
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double)(arg1)->getItem(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RectangleArrayDouble_getItemSafe(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  double jresult ;
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double)(arg1)->getItemSafe(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleArrayDouble_setItem(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->setItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleArrayDouble_resize(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleArrayDouble_printToFile(void * jarg1, void * jarg2) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->printToFile(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleArrayDouble_saveToFile(void * jarg1, char * jarg2) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->saveToFile((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleArrayDouble_setTo(void * jarg1, double jarg2) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->setTo((double const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleArrayDouble_setBorderTo(void * jarg1, double jarg2) {
  BWTA::RectangleArray< double > *arg1 = (BWTA::RectangleArray< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (BWTA::RectangleArray< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->setBorderTo((double const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseLocationPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  result = (std::set< BWTA::BaseLocation * > *)new std::set< BWTA::BaseLocation * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseLocationPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::BaseLocation * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::BaseLocation * > *)new std::set< BWTA::BaseLocation * >((std::set< BWTA::BaseLocation * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BaseLocationPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::size_type result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  result = ((std::set< BWTA::BaseLocation * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocationPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  result = (bool)((std::set< BWTA::BaseLocation * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseLocationPtrSet_Clear(void * jarg1) {
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocationPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = (std::set< BWTA::BaseLocation * >::key_type *)&temp2; 
  try {
    result = (std::set< BWTA::BaseLocation * >::key_type *) &std_set_Sl_BWTA_BaseLocation_Sm__Sg__getitem(arg1,(BWTA::BaseLocation *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocationPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = (std::set< BWTA::BaseLocation * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_BaseLocation_Sm__Sg__ContainsKey(arg1,(BWTA::BaseLocation *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseLocationPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = (std::set< BWTA::BaseLocation * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWTA_BaseLocation_Sm__Sg__Add(arg1,(BWTA::BaseLocation *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocationPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = (std::set< BWTA::BaseLocation * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_BaseLocation_Sm__Sg__Remove(arg1,(BWTA::BaseLocation *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocationPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  result = (std::set< BWTA::BaseLocation * >::iterator *)std_set_Sl_BWTA_BaseLocation_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocationPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::iterator *arg2 = (std::set< BWTA::BaseLocation * >::iterator *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  arg2 = (std::set< BWTA::BaseLocation * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::BaseLocation * >::key_type *) &std_set_Sl_BWTA_BaseLocation_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseLocationPtrSet(void * jarg1) {
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::Region * > *result = 0 ;
  
  result = (std::set< BWTA::Region * > *)new std::set< BWTA::Region * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = 0 ;
  std::set< BWTA::Region * > *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::Region * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::Region * > *)new std::set< BWTA::Region * >((std::set< BWTA::Region * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RegionPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::size_type result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  result = ((std::set< BWTA::Region * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegionPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  result = (bool)((std::set< BWTA::Region * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrSet_Clear(void * jarg1) {
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  std::set< BWTA::Region * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Region * >::key_type *)&temp2; 
  try {
    result = (std::set< BWTA::Region * >::key_type *) &std_set_Sl_BWTA_Region_Sm__Sg__getitem(arg1,(BWTA::Region *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegionPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Region * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_Region_Sm__Sg__ContainsKey(arg1,(BWTA::Region *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Region * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWTA_Region_Sm__Sg__Add(arg1,(BWTA::Region *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegionPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Region * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_Region_Sm__Sg__Remove(arg1,(BWTA::Region *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  result = (std::set< BWTA::Region * >::iterator *)std_set_Sl_BWTA_Region_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::iterator *arg2 = (std::set< BWTA::Region * >::iterator *) 0 ;
  std::set< BWTA::Region * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  arg2 = (std::set< BWTA::Region * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::Region * >::key_type *) &std_set_Sl_BWTA_Region_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegionPtrSet(void * jarg1) {
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChokepointPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  result = (std::set< BWTA::Chokepoint * > *)new std::set< BWTA::Chokepoint * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChokepointPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = 0 ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::Chokepoint * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::Chokepoint * > *)new std::set< BWTA::Chokepoint * >((std::set< BWTA::Chokepoint * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChokepointPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::size_type result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  result = ((std::set< BWTA::Chokepoint * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChokepointPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  result = (bool)((std::set< BWTA::Chokepoint * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChokepointPtrSet_Clear(void * jarg1) {
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChokepointPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Chokepoint * >::key_type *)&temp2; 
  try {
    result = (std::set< BWTA::Chokepoint * >::key_type *) &std_set_Sl_BWTA_Chokepoint_Sm__Sg__getitem(arg1,(BWTA::Chokepoint *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChokepointPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Chokepoint * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_Chokepoint_Sm__Sg__ContainsKey(arg1,(BWTA::Chokepoint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChokepointPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Chokepoint * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWTA_Chokepoint_Sm__Sg__Add(arg1,(BWTA::Chokepoint *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChokepointPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Chokepoint * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_Chokepoint_Sm__Sg__Remove(arg1,(BWTA::Chokepoint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChokepointPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  result = (std::set< BWTA::Chokepoint * >::iterator *)std_set_Sl_BWTA_Chokepoint_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChokepointPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::iterator *arg2 = (std::set< BWTA::Chokepoint * >::iterator *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  arg2 = (std::set< BWTA::Chokepoint * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::Chokepoint * >::key_type *) &std_set_Sl_BWTA_Chokepoint_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChokepointPtrSet(void * jarg1) {
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  result = (std::set< BWTA::Polygon * > *)new std::set< BWTA::Polygon * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = 0 ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::Polygon * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::Polygon * > *)new std::set< BWTA::Polygon * >((std::set< BWTA::Polygon * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolygonPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::size_type result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  result = ((std::set< BWTA::Polygon * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  result = (bool)((std::set< BWTA::Polygon * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPtrSet_Clear(void * jarg1) {
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  std::set< BWTA::Polygon * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Polygon * >::key_type *)&temp2; 
  try {
    result = (std::set< BWTA::Polygon * >::key_type *) &std_set_Sl_BWTA_Polygon_Sm__Sg__getitem(arg1,(BWTA::Polygon *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Polygon * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_Polygon_Sm__Sg__ContainsKey(arg1,(BWTA::Polygon *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Polygon * >::key_type *)&temp2; 
  try {
    std_set_Sl_BWTA_Polygon_Sm__Sg__Add(arg1,(BWTA::Polygon *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = (std::set< BWTA::Polygon * >::key_type *)&temp2; 
  result = (bool)std_set_Sl_BWTA_Polygon_Sm__Sg__Remove(arg1,(BWTA::Polygon *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  result = (std::set< BWTA::Polygon * >::iterator *)std_set_Sl_BWTA_Polygon_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::iterator *arg2 = (std::set< BWTA::Polygon * >::iterator *) 0 ;
  std::set< BWTA::Polygon * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  arg2 = (std::set< BWTA::Polygon * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::Polygon * >::key_type *) &std_set_Sl_BWTA_Polygon_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolygonPtrSet(void * jarg1) {
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_Clear(void * jarg1) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_Add(void * jarg1, void * jarg2) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  BWTA::Polygon *arg2 = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (BWTA::Polygon *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::Polygon const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((BWTA::Polygon const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolygonVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  std::vector< BWTA::Polygon >::size_type result;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  result = ((std::vector< BWTA::Polygon > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolygonVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  std::vector< BWTA::Polygon >::size_type result;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  result = ((std::vector< BWTA::Polygon > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  std::vector< BWTA::Polygon >::size_type arg2 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (std::vector< BWTA::Polygon >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonVector__SWIG_0() {
  void * jresult ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  result = (std::vector< BWTA::Polygon > *)new std::vector< BWTA::Polygon >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< BWTA::Polygon > *arg1 = 0 ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWTA::Polygon > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< BWTA::Polygon > *)new std::vector< BWTA::Polygon >((std::vector< BWTA::Polygon > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< BWTA::Polygon > *)new_std_vector_Sl_BWTA_Polygon_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  BWTA::Polygon result;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_BWTA_Polygon_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new BWTA::Polygon((const BWTA::Polygon &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  BWTA::Polygon *result = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (BWTA::Polygon *) &std_vector_Sl_BWTA_Polygon_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  BWTA::Polygon *arg3 = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWTA::Polygon *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::Polygon const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__setitem(arg1,arg2,(BWTA::Polygon const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  std::vector< BWTA::Polygon > *arg2 = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (std::vector< BWTA::Polygon > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWTA::Polygon > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_BWTA_Polygon_Sg__AddRange(arg1,(std::vector< BWTA::Polygon > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< BWTA::Polygon > *)std_vector_Sl_BWTA_Polygon_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  BWTA::Polygon *arg3 = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BWTA::Polygon *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::Polygon const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__Insert(arg1,arg2,(BWTA::Polygon const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  std::vector< BWTA::Polygon > *arg3 = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWTA::Polygon > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWTA::Polygon > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__InsertRange(arg1,arg2,(std::vector< BWTA::Polygon > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  BWTA::Polygon *arg1 = 0 ;
  int arg2 ;
  std::vector< BWTA::Polygon > *result = 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWTA::Polygon const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BWTA::Polygon > *)std_vector_Sl_BWTA_Polygon_Sg__Repeat((BWTA::Polygon const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  std_vector_Sl_BWTA_Polygon_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  int arg2 ;
  std::vector< BWTA::Polygon > *arg3 = 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWTA::Polygon > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWTA::Polygon > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWTA_Polygon_Sg__SetRange(arg1,arg2,(std::vector< BWTA::Polygon > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolygonVector(void * jarg1) {
  std::vector< BWTA::Polygon > *arg1 = (std::vector< BWTA::Polygon > *) 0 ;
  
  arg1 = (std::vector< BWTA::Polygon > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrRegionPtrPair__SWIG_0() {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrRegionPtrPair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrRegionPtrPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWTA::Region *,BWTA::Region * > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >((std::pair< BWTA::Region *,BWTA::Region * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  result = (BWTA::Region *) ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_second_set(void * jarg1, void * jarg2) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  result = (BWTA::Region *) ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegionPtrRegionPtrPair(void * jarg1) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT std::vector< BWAPI::Position > * SWIGSTDCALL CSharp_Polygon_SWIGUpcast(BWTA::Polygon *jarg1) {
    return (std::vector< BWAPI::Position > *)jarg1;
}

#ifdef __cplusplus
}
#endif

