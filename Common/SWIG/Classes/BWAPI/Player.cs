//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SWIG.BWAPI {

public partial class Player : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Player(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Player obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is Player)
      equal = (((Player)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(Player obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(Player obj1, Player obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(Player obj1, Player obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public virtual int getID() {
    int ret = bwapiPINVOKE.Player_getID(swigCPtr);
    return ret;
  }

  public virtual string getName() {
    string ret = bwapiPINVOKE.Player_getName(swigCPtr);
    return ret;
  }

  public virtual UnitPtrSet getUnits() {
    UnitPtrSet ret = new UnitPtrSet(bwapiPINVOKE.Player_getUnits(swigCPtr), false);
    return ret;
  }

  public virtual Race getRace() {
    Race ret = new Race(bwapiPINVOKE.Player_getRace(swigCPtr), true);
    return ret;
  }

  public virtual PlayerType getType() {
    PlayerType ret = new PlayerType(bwapiPINVOKE.Player_getType(swigCPtr), true);
    return ret;
  }

  public virtual Force getForce() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Player_getForce(swigCPtr);
    Force ret = (cPtr == global::System.IntPtr.Zero) ? null : new Force(cPtr, false);
    return ret;
  }

  public virtual bool isAlly(Player player) {
    bool ret = bwapiPINVOKE.Player_isAlly(swigCPtr, Player.getCPtr(player));
    return ret;
  }

  public virtual bool isEnemy(Player player) {
    bool ret = bwapiPINVOKE.Player_isEnemy(swigCPtr, Player.getCPtr(player));
    return ret;
  }

  public virtual bool isNeutral() {
    bool ret = bwapiPINVOKE.Player_isNeutral(swigCPtr);
    return ret;
  }

  public virtual TilePosition getStartLocation() {
    TilePosition ret = new TilePosition(bwapiPINVOKE.Player_getStartLocation(swigCPtr), true);
    return ret;
  }

  public virtual bool isVictorious() {
    bool ret = bwapiPINVOKE.Player_isVictorious(swigCPtr);
    return ret;
  }

  public virtual bool isDefeated() {
    bool ret = bwapiPINVOKE.Player_isDefeated(swigCPtr);
    return ret;
  }

  public virtual bool leftGame() {
    bool ret = bwapiPINVOKE.Player_leftGame(swigCPtr);
    return ret;
  }

  public virtual int minerals() {
    int ret = bwapiPINVOKE.Player_minerals(swigCPtr);
    return ret;
  }

  public virtual int gas() {
    int ret = bwapiPINVOKE.Player_gas(swigCPtr);
    return ret;
  }

  public virtual int gatheredMinerals() {
    int ret = bwapiPINVOKE.Player_gatheredMinerals(swigCPtr);
    return ret;
  }

  public virtual int gatheredGas() {
    int ret = bwapiPINVOKE.Player_gatheredGas(swigCPtr);
    return ret;
  }

  public virtual int repairedMinerals() {
    int ret = bwapiPINVOKE.Player_repairedMinerals(swigCPtr);
    return ret;
  }

  public virtual int repairedGas() {
    int ret = bwapiPINVOKE.Player_repairedGas(swigCPtr);
    return ret;
  }

  public virtual int refundedMinerals() {
    int ret = bwapiPINVOKE.Player_refundedMinerals(swigCPtr);
    return ret;
  }

  public virtual int refundedGas() {
    int ret = bwapiPINVOKE.Player_refundedGas(swigCPtr);
    return ret;
  }

  public virtual int spentMinerals() {
    int ret = bwapiPINVOKE.Player_spentMinerals(swigCPtr);
    return ret;
  }

  public virtual int spentGas() {
    int ret = bwapiPINVOKE.Player_spentGas(swigCPtr);
    return ret;
  }

  public virtual int supplyTotal() {
    int ret = bwapiPINVOKE.Player_supplyTotal__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual int supplyTotal(Race race) {
    int ret = bwapiPINVOKE.Player_supplyTotal__SWIG_1(swigCPtr, Race.getCPtr(race));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int supplyUsed() {
    int ret = bwapiPINVOKE.Player_supplyUsed__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual int supplyUsed(Race race) {
    int ret = bwapiPINVOKE.Player_supplyUsed__SWIG_1(swigCPtr, Race.getCPtr(race));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int allUnitCount(UnitType unit) {
    int ret = bwapiPINVOKE.Player_allUnitCount(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int visibleUnitCount(UnitType unit) {
    int ret = bwapiPINVOKE.Player_visibleUnitCount(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int completedUnitCount(UnitType unit) {
    int ret = bwapiPINVOKE.Player_completedUnitCount(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int incompleteUnitCount(UnitType unit) {
    int ret = bwapiPINVOKE.Player_incompleteUnitCount(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int deadUnitCount(UnitType unit) {
    int ret = bwapiPINVOKE.Player_deadUnitCount(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int killedUnitCount(UnitType unit) {
    int ret = bwapiPINVOKE.Player_killedUnitCount(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getUpgradeLevel(UpgradeType upgrade) {
    int ret = bwapiPINVOKE.Player_getUpgradeLevel(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasResearched(TechType tech) {
    bool ret = bwapiPINVOKE.Player_hasResearched(swigCPtr, TechType.getCPtr(tech));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isResearching(TechType tech) {
    bool ret = bwapiPINVOKE.Player_isResearching(swigCPtr, TechType.getCPtr(tech));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isUpgrading(UpgradeType upgrade) {
    bool ret = bwapiPINVOKE.Player_isUpgrading(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Color getColor() {
    Color ret = new Color(bwapiPINVOKE.Player_getColor(swigCPtr), true);
    return ret;
  }

  public virtual int getTextColor() {
    int ret = bwapiPINVOKE.Player_getTextColor(swigCPtr);
    return ret;
  }

  public virtual int maxEnergy(UnitType unit) {
    int ret = bwapiPINVOKE.Player_maxEnergy(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double topSpeed(UnitType unit) {
    double ret = bwapiPINVOKE.Player_topSpeed(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int groundWeaponMaxRange(UnitType unit) {
    int ret = bwapiPINVOKE.Player_groundWeaponMaxRange(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int airWeaponMaxRange(UnitType unit) {
    int ret = bwapiPINVOKE.Player_airWeaponMaxRange(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int weaponMaxRange(WeaponType weapon) {
    int ret = bwapiPINVOKE.Player_weaponMaxRange(swigCPtr, WeaponType.getCPtr(weapon));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int sightRange(UnitType unit) {
    int ret = bwapiPINVOKE.Player_sightRange(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int groundWeaponDamageCooldown(UnitType unit) {
    int ret = bwapiPINVOKE.Player_groundWeaponDamageCooldown(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int armor(UnitType unit) {
    int ret = bwapiPINVOKE.Player_armor(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getUnitScore() {
    int ret = bwapiPINVOKE.Player_getUnitScore(swigCPtr);
    return ret;
  }

  public virtual int getKillScore() {
    int ret = bwapiPINVOKE.Player_getKillScore(swigCPtr);
    return ret;
  }

  public virtual int getBuildingScore() {
    int ret = bwapiPINVOKE.Player_getBuildingScore(swigCPtr);
    return ret;
  }

  public virtual int getRazingScore() {
    int ret = bwapiPINVOKE.Player_getRazingScore(swigCPtr);
    return ret;
  }

  public virtual int getCustomScore() {
    int ret = bwapiPINVOKE.Player_getCustomScore(swigCPtr);
    return ret;
  }

  public virtual bool isObserver() {
    bool ret = bwapiPINVOKE.Player_isObserver(swigCPtr);
    return ret;
  }

  public virtual int getMaxUpgradeLevel(UpgradeType upgrade) {
    int ret = bwapiPINVOKE.Player_getMaxUpgradeLevel(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isResearchAvailable(TechType tech) {
    bool ret = bwapiPINVOKE.Player_isResearchAvailable(swigCPtr, TechType.getCPtr(tech));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isUnitAvailable(UnitType unit) {
    bool ret = bwapiPINVOKE.Player_isUnitAvailable(swigCPtr, UnitType.getCPtr(unit));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
