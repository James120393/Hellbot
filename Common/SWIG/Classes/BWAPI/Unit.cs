//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace SWIG.BWAPI {

public partial class Unit : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Unit(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Unit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is Unit)
      equal = (((Unit)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(Unit obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(Unit obj1, Unit obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(Unit obj1, Unit obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public virtual int getID() {
    int ret = bwapiPINVOKE.Unit_getID(swigCPtr);
    return ret;
  }

  public virtual int getReplayID() {
    int ret = bwapiPINVOKE.Unit_getReplayID(swigCPtr);
    return ret;
  }

  public virtual Player getPlayer() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getPlayer(swigCPtr);
    Player ret = (cPtr == global::System.IntPtr.Zero) ? null : new Player(cPtr, false);
    return ret;
  }

  public virtual UnitType getType() {
    UnitType ret = new UnitType(bwapiPINVOKE.Unit_getType(swigCPtr), true);
    return ret;
  }

  public virtual Position getPosition() {
    Position ret = new Position(bwapiPINVOKE.Unit_getPosition(swigCPtr), true);
    return ret;
  }

  public virtual TilePosition getTilePosition() {
    TilePosition ret = new TilePosition(bwapiPINVOKE.Unit_getTilePosition(swigCPtr), true);
    return ret;
  }

  public virtual double getAngle() {
    double ret = bwapiPINVOKE.Unit_getAngle(swigCPtr);
    return ret;
  }

  public virtual double getVelocityX() {
    double ret = bwapiPINVOKE.Unit_getVelocityX(swigCPtr);
    return ret;
  }

  public virtual double getVelocityY() {
    double ret = bwapiPINVOKE.Unit_getVelocityY(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_BWAPI__Region getRegion() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getRegion(swigCPtr);
    SWIGTYPE_p_BWAPI__Region ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_BWAPI__Region(cPtr, false);
    return ret;
  }

  public virtual int getLeft() {
    int ret = bwapiPINVOKE.Unit_getLeft(swigCPtr);
    return ret;
  }

  public virtual int getTop() {
    int ret = bwapiPINVOKE.Unit_getTop(swigCPtr);
    return ret;
  }

  public virtual int getRight() {
    int ret = bwapiPINVOKE.Unit_getRight(swigCPtr);
    return ret;
  }

  public virtual int getBottom() {
    int ret = bwapiPINVOKE.Unit_getBottom(swigCPtr);
    return ret;
  }

  public virtual int getHitPoints() {
    int ret = bwapiPINVOKE.Unit_getHitPoints(swigCPtr);
    return ret;
  }

  public virtual int getShields() {
    int ret = bwapiPINVOKE.Unit_getShields(swigCPtr);
    return ret;
  }

  public virtual int getEnergy() {
    int ret = bwapiPINVOKE.Unit_getEnergy(swigCPtr);
    return ret;
  }

  public virtual int getResources() {
    int ret = bwapiPINVOKE.Unit_getResources(swigCPtr);
    return ret;
  }

  public virtual int getResourceGroup() {
    int ret = bwapiPINVOKE.Unit_getResourceGroup(swigCPtr);
    return ret;
  }

  public virtual int getDistance(Unit target) {
    int ret = bwapiPINVOKE.Unit_getDistance__SWIG_0(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual int getDistance(Position target) {
    int ret = bwapiPINVOKE.Unit_getDistance__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hasPath(Unit target) {
    bool ret = bwapiPINVOKE.Unit_hasPath__SWIG_0(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool hasPath(Position target) {
    bool ret = bwapiPINVOKE.Unit_hasPath__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int getLastCommandFrame() {
    int ret = bwapiPINVOKE.Unit_getLastCommandFrame(swigCPtr);
    return ret;
  }

  public virtual UnitCommand getLastCommand() {
    UnitCommand ret = new UnitCommand(bwapiPINVOKE.Unit_getLastCommand(swigCPtr), true);
    return ret;
  }

  public virtual Player getLastAttackingPlayer() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getLastAttackingPlayer(swigCPtr);
    Player ret = (cPtr == global::System.IntPtr.Zero) ? null : new Player(cPtr, false);
    return ret;
  }

  public virtual int getUpgradeLevel(UpgradeType upgrade) {
    int ret = bwapiPINVOKE.Unit_getUpgradeLevel(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual UnitType getInitialType() {
    UnitType ret = new UnitType(bwapiPINVOKE.Unit_getInitialType(swigCPtr), true);
    return ret;
  }

  public virtual Position getInitialPosition() {
    Position ret = new Position(bwapiPINVOKE.Unit_getInitialPosition(swigCPtr), true);
    return ret;
  }

  public virtual TilePosition getInitialTilePosition() {
    TilePosition ret = new TilePosition(bwapiPINVOKE.Unit_getInitialTilePosition(swigCPtr), true);
    return ret;
  }

  public virtual int getInitialHitPoints() {
    int ret = bwapiPINVOKE.Unit_getInitialHitPoints(swigCPtr);
    return ret;
  }

  public virtual int getInitialResources() {
    int ret = bwapiPINVOKE.Unit_getInitialResources(swigCPtr);
    return ret;
  }

  public virtual int getKillCount() {
    int ret = bwapiPINVOKE.Unit_getKillCount(swigCPtr);
    return ret;
  }

  public virtual int getAcidSporeCount() {
    int ret = bwapiPINVOKE.Unit_getAcidSporeCount(swigCPtr);
    return ret;
  }

  public virtual int getInterceptorCount() {
    int ret = bwapiPINVOKE.Unit_getInterceptorCount(swigCPtr);
    return ret;
  }

  public virtual int getScarabCount() {
    int ret = bwapiPINVOKE.Unit_getScarabCount(swigCPtr);
    return ret;
  }

  public virtual int getSpiderMineCount() {
    int ret = bwapiPINVOKE.Unit_getSpiderMineCount(swigCPtr);
    return ret;
  }

  public virtual int getGroundWeaponCooldown() {
    int ret = bwapiPINVOKE.Unit_getGroundWeaponCooldown(swigCPtr);
    return ret;
  }

  public virtual int getAirWeaponCooldown() {
    int ret = bwapiPINVOKE.Unit_getAirWeaponCooldown(swigCPtr);
    return ret;
  }

  public virtual int getSpellCooldown() {
    int ret = bwapiPINVOKE.Unit_getSpellCooldown(swigCPtr);
    return ret;
  }

  public virtual int getDefenseMatrixPoints() {
    int ret = bwapiPINVOKE.Unit_getDefenseMatrixPoints(swigCPtr);
    return ret;
  }

  public virtual int getDefenseMatrixTimer() {
    int ret = bwapiPINVOKE.Unit_getDefenseMatrixTimer(swigCPtr);
    return ret;
  }

  public virtual int getEnsnareTimer() {
    int ret = bwapiPINVOKE.Unit_getEnsnareTimer(swigCPtr);
    return ret;
  }

  public virtual int getIrradiateTimer() {
    int ret = bwapiPINVOKE.Unit_getIrradiateTimer(swigCPtr);
    return ret;
  }

  public virtual int getLockdownTimer() {
    int ret = bwapiPINVOKE.Unit_getLockdownTimer(swigCPtr);
    return ret;
  }

  public virtual int getMaelstromTimer() {
    int ret = bwapiPINVOKE.Unit_getMaelstromTimer(swigCPtr);
    return ret;
  }

  public virtual int getOrderTimer() {
    int ret = bwapiPINVOKE.Unit_getOrderTimer(swigCPtr);
    return ret;
  }

  public virtual int getPlagueTimer() {
    int ret = bwapiPINVOKE.Unit_getPlagueTimer(swigCPtr);
    return ret;
  }

  public virtual int getRemoveTimer() {
    int ret = bwapiPINVOKE.Unit_getRemoveTimer(swigCPtr);
    return ret;
  }

  public virtual int getStasisTimer() {
    int ret = bwapiPINVOKE.Unit_getStasisTimer(swigCPtr);
    return ret;
  }

  public virtual int getStimTimer() {
    int ret = bwapiPINVOKE.Unit_getStimTimer(swigCPtr);
    return ret;
  }

  public virtual UnitType getBuildType() {
    UnitType ret = new UnitType(bwapiPINVOKE.Unit_getBuildType(swigCPtr), true);
    return ret;
  }

  public virtual UnitTypeList getTrainingQueue() {
    UnitTypeList ret = new UnitTypeList(bwapiPINVOKE.Unit_getTrainingQueue(swigCPtr), true);
    return ret;
  }

  public virtual TechType getTech() {
    TechType ret = new TechType(bwapiPINVOKE.Unit_getTech(swigCPtr), true);
    return ret;
  }

  public virtual UpgradeType getUpgrade() {
    UpgradeType ret = new UpgradeType(bwapiPINVOKE.Unit_getUpgrade(swigCPtr), true);
    return ret;
  }

  public virtual int getRemainingBuildTime() {
    int ret = bwapiPINVOKE.Unit_getRemainingBuildTime(swigCPtr);
    return ret;
  }

  public virtual int getRemainingTrainTime() {
    int ret = bwapiPINVOKE.Unit_getRemainingTrainTime(swigCPtr);
    return ret;
  }

  public virtual int getRemainingResearchTime() {
    int ret = bwapiPINVOKE.Unit_getRemainingResearchTime(swigCPtr);
    return ret;
  }

  public virtual int getRemainingUpgradeTime() {
    int ret = bwapiPINVOKE.Unit_getRemainingUpgradeTime(swigCPtr);
    return ret;
  }

  public virtual Unit getBuildUnit() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getBuildUnit(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getTarget() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getTarget(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Position getTargetPosition() {
    Position ret = new Position(bwapiPINVOKE.Unit_getTargetPosition(swigCPtr), true);
    return ret;
  }

  public virtual Order getOrder() {
    Order ret = new Order(bwapiPINVOKE.Unit_getOrder(swigCPtr), true);
    return ret;
  }

  public virtual Order getSecondaryOrder() {
    Order ret = new Order(bwapiPINVOKE.Unit_getSecondaryOrder(swigCPtr), true);
    return ret;
  }

  public virtual Unit getOrderTarget() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getOrderTarget(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Position getOrderTargetPosition() {
    Position ret = new Position(bwapiPINVOKE.Unit_getOrderTargetPosition(swigCPtr), true);
    return ret;
  }

  public virtual Position getRallyPosition() {
    Position ret = new Position(bwapiPINVOKE.Unit_getRallyPosition(swigCPtr), true);
    return ret;
  }

  public virtual Unit getRallyUnit() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getRallyUnit(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getAddon() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getAddon(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getNydusExit() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getNydusExit(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getPowerUp() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getPowerUp(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getTransport() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getTransport(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitPtrSet getLoadedUnits() {
    UnitPtrSet ret = new UnitPtrSet(bwapiPINVOKE.Unit_getLoadedUnits(swigCPtr), true);
    return ret;
  }

  public virtual Unit getCarrier() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getCarrier(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitPtrSet getInterceptors() {
    UnitPtrSet ret = new UnitPtrSet(bwapiPINVOKE.Unit_getInterceptors(swigCPtr), true);
    return ret;
  }

  public virtual Unit getHatchery() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getHatchery(swigCPtr);
    Unit ret = (cPtr == global::System.IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitPtrSet getLarva() {
    UnitPtrSet ret = new UnitPtrSet(bwapiPINVOKE.Unit_getLarva(swigCPtr), true);
    return ret;
  }

  public virtual UnitPtrSet getUnitsInRadius(int radius) {
    UnitPtrSet ret = new UnitPtrSet(bwapiPINVOKE.Unit_getUnitsInRadius(swigCPtr, radius), false);
    return ret;
  }

  public virtual UnitPtrSet getUnitsInWeaponRange(WeaponType weapon) {
    UnitPtrSet ret = new UnitPtrSet(bwapiPINVOKE.Unit_getUnitsInWeaponRange(swigCPtr, WeaponType.getCPtr(weapon)), false);
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_void getClientInfo() {
    global::System.IntPtr cPtr = bwapiPINVOKE.Unit_getClientInfo(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual void setClientInfo(SWIGTYPE_p_void clientinfo) {
    bwapiPINVOKE.Unit_setClientInfo(swigCPtr, SWIGTYPE_p_void.getCPtr(clientinfo));
  }

  public virtual bool exists() {
    bool ret = bwapiPINVOKE.Unit_exists(swigCPtr);
    return ret;
  }

  public virtual bool hasNuke() {
    bool ret = bwapiPINVOKE.Unit_hasNuke(swigCPtr);
    return ret;
  }

  public virtual bool isAccelerating() {
    bool ret = bwapiPINVOKE.Unit_isAccelerating(swigCPtr);
    return ret;
  }

  public virtual bool isAttacking() {
    bool ret = bwapiPINVOKE.Unit_isAttacking(swigCPtr);
    return ret;
  }

  public virtual bool isAttackFrame() {
    bool ret = bwapiPINVOKE.Unit_isAttackFrame(swigCPtr);
    return ret;
  }

  public virtual bool isBeingConstructed() {
    bool ret = bwapiPINVOKE.Unit_isBeingConstructed(swigCPtr);
    return ret;
  }

  public virtual bool isBeingGathered() {
    bool ret = bwapiPINVOKE.Unit_isBeingGathered(swigCPtr);
    return ret;
  }

  public virtual bool isBeingHealed() {
    bool ret = bwapiPINVOKE.Unit_isBeingHealed(swigCPtr);
    return ret;
  }

  public virtual bool isBlind() {
    bool ret = bwapiPINVOKE.Unit_isBlind(swigCPtr);
    return ret;
  }

  public virtual bool isBraking() {
    bool ret = bwapiPINVOKE.Unit_isBraking(swigCPtr);
    return ret;
  }

  public virtual bool isBurrowed() {
    bool ret = bwapiPINVOKE.Unit_isBurrowed(swigCPtr);
    return ret;
  }

  public virtual bool isCarryingGas() {
    bool ret = bwapiPINVOKE.Unit_isCarryingGas(swigCPtr);
    return ret;
  }

  public virtual bool isCarryingMinerals() {
    bool ret = bwapiPINVOKE.Unit_isCarryingMinerals(swigCPtr);
    return ret;
  }

  public virtual bool isCloaked() {
    bool ret = bwapiPINVOKE.Unit_isCloaked(swigCPtr);
    return ret;
  }

  public virtual bool isCompleted() {
    bool ret = bwapiPINVOKE.Unit_isCompleted(swigCPtr);
    return ret;
  }

  public virtual bool isConstructing() {
    bool ret = bwapiPINVOKE.Unit_isConstructing(swigCPtr);
    return ret;
  }

  public virtual bool isDefenseMatrixed() {
    bool ret = bwapiPINVOKE.Unit_isDefenseMatrixed(swigCPtr);
    return ret;
  }

  public virtual bool isDetected() {
    bool ret = bwapiPINVOKE.Unit_isDetected(swigCPtr);
    return ret;
  }

  public virtual bool isEnsnared() {
    bool ret = bwapiPINVOKE.Unit_isEnsnared(swigCPtr);
    return ret;
  }

  public virtual bool isFollowing() {
    bool ret = bwapiPINVOKE.Unit_isFollowing(swigCPtr);
    return ret;
  }

  public virtual bool isGatheringGas() {
    bool ret = bwapiPINVOKE.Unit_isGatheringGas(swigCPtr);
    return ret;
  }

  public virtual bool isGatheringMinerals() {
    bool ret = bwapiPINVOKE.Unit_isGatheringMinerals(swigCPtr);
    return ret;
  }

  public virtual bool isHallucination() {
    bool ret = bwapiPINVOKE.Unit_isHallucination(swigCPtr);
    return ret;
  }

  public virtual bool isHoldingPosition() {
    bool ret = bwapiPINVOKE.Unit_isHoldingPosition(swigCPtr);
    return ret;
  }

  public virtual bool isIdle() {
    bool ret = bwapiPINVOKE.Unit_isIdle(swigCPtr);
    return ret;
  }

  public virtual bool isInterruptible() {
    bool ret = bwapiPINVOKE.Unit_isInterruptible(swigCPtr);
    return ret;
  }

  public virtual bool isInvincible() {
    bool ret = bwapiPINVOKE.Unit_isInvincible(swigCPtr);
    return ret;
  }

  public virtual bool isInWeaponRange(Unit target) {
    bool ret = bwapiPINVOKE.Unit_isInWeaponRange(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool isIrradiated() {
    bool ret = bwapiPINVOKE.Unit_isIrradiated(swigCPtr);
    return ret;
  }

  public virtual bool isLifted() {
    bool ret = bwapiPINVOKE.Unit_isLifted(swigCPtr);
    return ret;
  }

  public virtual bool isLoaded() {
    bool ret = bwapiPINVOKE.Unit_isLoaded(swigCPtr);
    return ret;
  }

  public virtual bool isLockedDown() {
    bool ret = bwapiPINVOKE.Unit_isLockedDown(swigCPtr);
    return ret;
  }

  public virtual bool isMaelstrommed() {
    bool ret = bwapiPINVOKE.Unit_isMaelstrommed(swigCPtr);
    return ret;
  }

  public virtual bool isMorphing() {
    bool ret = bwapiPINVOKE.Unit_isMorphing(swigCPtr);
    return ret;
  }

  public virtual bool isMoving() {
    bool ret = bwapiPINVOKE.Unit_isMoving(swigCPtr);
    return ret;
  }

  public virtual bool isParasited() {
    bool ret = bwapiPINVOKE.Unit_isParasited(swigCPtr);
    return ret;
  }

  public virtual bool isPatrolling() {
    bool ret = bwapiPINVOKE.Unit_isPatrolling(swigCPtr);
    return ret;
  }

  public virtual bool isPlagued() {
    bool ret = bwapiPINVOKE.Unit_isPlagued(swigCPtr);
    return ret;
  }

  public virtual bool isRepairing() {
    bool ret = bwapiPINVOKE.Unit_isRepairing(swigCPtr);
    return ret;
  }

  public virtual bool isResearching() {
    bool ret = bwapiPINVOKE.Unit_isResearching(swigCPtr);
    return ret;
  }

  public virtual bool isSelected() {
    bool ret = bwapiPINVOKE.Unit_isSelected(swigCPtr);
    return ret;
  }

  public virtual bool isSieged() {
    bool ret = bwapiPINVOKE.Unit_isSieged(swigCPtr);
    return ret;
  }

  public virtual bool isStartingAttack() {
    bool ret = bwapiPINVOKE.Unit_isStartingAttack(swigCPtr);
    return ret;
  }

  public virtual bool isStasised() {
    bool ret = bwapiPINVOKE.Unit_isStasised(swigCPtr);
    return ret;
  }

  public virtual bool isStimmed() {
    bool ret = bwapiPINVOKE.Unit_isStimmed(swigCPtr);
    return ret;
  }

  public virtual bool isStuck() {
    bool ret = bwapiPINVOKE.Unit_isStuck(swigCPtr);
    return ret;
  }

  public virtual bool isTraining() {
    bool ret = bwapiPINVOKE.Unit_isTraining(swigCPtr);
    return ret;
  }

  public virtual bool isUnderAttack() {
    bool ret = bwapiPINVOKE.Unit_isUnderAttack(swigCPtr);
    return ret;
  }

  public virtual bool isUnderDarkSwarm() {
    bool ret = bwapiPINVOKE.Unit_isUnderDarkSwarm(swigCPtr);
    return ret;
  }

  public virtual bool isUnderDisruptionWeb() {
    bool ret = bwapiPINVOKE.Unit_isUnderDisruptionWeb(swigCPtr);
    return ret;
  }

  public virtual bool isUnderStorm() {
    bool ret = bwapiPINVOKE.Unit_isUnderStorm(swigCPtr);
    return ret;
  }

  public virtual bool isUnpowered() {
    bool ret = bwapiPINVOKE.Unit_isUnpowered(swigCPtr);
    return ret;
  }

  public virtual bool isUpgrading() {
    bool ret = bwapiPINVOKE.Unit_isUpgrading(swigCPtr);
    return ret;
  }

  public virtual bool isVisible() {
    bool ret = bwapiPINVOKE.Unit_isVisible__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual bool isVisible(Player player) {
    bool ret = bwapiPINVOKE.Unit_isVisible__SWIG_1(swigCPtr, Player.getCPtr(player));
    return ret;
  }

  public virtual bool canIssueCommand(UnitCommand command) {
    bool ret = bwapiPINVOKE.Unit_canIssueCommand(swigCPtr, UnitCommand.getCPtr(command));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool issueCommand(UnitCommand command) {
    bool ret = bwapiPINVOKE.Unit_issueCommand(swigCPtr, UnitCommand.getCPtr(command));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool attack(Position target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_attack__SWIG_0(swigCPtr, Position.getCPtr(target), shiftQueueCommand);
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool attack(Position target) {
    bool ret = bwapiPINVOKE.Unit_attack__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool attack(Unit target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_attack__SWIG_2(swigCPtr, Unit.getCPtr(target), shiftQueueCommand);
    return ret;
  }

  public virtual bool attack(Unit target) {
    bool ret = bwapiPINVOKE.Unit_attack__SWIG_3(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool build(TilePosition target, UnitType type) {
    bool ret = bwapiPINVOKE.Unit_build(swigCPtr, TilePosition.getCPtr(target), UnitType.getCPtr(type));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool buildAddon(UnitType type) {
    bool ret = bwapiPINVOKE.Unit_buildAddon(swigCPtr, UnitType.getCPtr(type));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool train(UnitType type) {
    bool ret = bwapiPINVOKE.Unit_train(swigCPtr, UnitType.getCPtr(type));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool morph(UnitType type) {
    bool ret = bwapiPINVOKE.Unit_morph(swigCPtr, UnitType.getCPtr(type));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool research(TechType tech) {
    bool ret = bwapiPINVOKE.Unit_research(swigCPtr, TechType.getCPtr(tech));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool upgrade(UpgradeType upgrade) {
    bool ret = bwapiPINVOKE.Unit_upgrade(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setRallyPoint(Position target) {
    bool ret = bwapiPINVOKE.Unit_setRallyPoint__SWIG_0(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setRallyPoint(Unit target) {
    bool ret = bwapiPINVOKE.Unit_setRallyPoint__SWIG_1(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool move(Position target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_move__SWIG_0(swigCPtr, Position.getCPtr(target), shiftQueueCommand);
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool move(Position target) {
    bool ret = bwapiPINVOKE.Unit_move__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool patrol(Position target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_patrol__SWIG_0(swigCPtr, Position.getCPtr(target), shiftQueueCommand);
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool patrol(Position target) {
    bool ret = bwapiPINVOKE.Unit_patrol__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool holdPosition(bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_holdPosition__SWIG_0(swigCPtr, shiftQueueCommand);
    return ret;
  }

  public virtual bool holdPosition() {
    bool ret = bwapiPINVOKE.Unit_holdPosition__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool stop(bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_stop__SWIG_0(swigCPtr, shiftQueueCommand);
    return ret;
  }

  public virtual bool stop() {
    bool ret = bwapiPINVOKE.Unit_stop__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool follow(Unit target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_follow__SWIG_0(swigCPtr, Unit.getCPtr(target), shiftQueueCommand);
    return ret;
  }

  public virtual bool follow(Unit target) {
    bool ret = bwapiPINVOKE.Unit_follow__SWIG_1(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool gather(Unit target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_gather__SWIG_0(swigCPtr, Unit.getCPtr(target), shiftQueueCommand);
    return ret;
  }

  public virtual bool gather(Unit target) {
    bool ret = bwapiPINVOKE.Unit_gather__SWIG_1(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool returnCargo(bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_returnCargo__SWIG_0(swigCPtr, shiftQueueCommand);
    return ret;
  }

  public virtual bool returnCargo() {
    bool ret = bwapiPINVOKE.Unit_returnCargo__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool repair(Unit target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_repair__SWIG_0(swigCPtr, Unit.getCPtr(target), shiftQueueCommand);
    return ret;
  }

  public virtual bool repair(Unit target) {
    bool ret = bwapiPINVOKE.Unit_repair__SWIG_1(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool burrow() {
    bool ret = bwapiPINVOKE.Unit_burrow(swigCPtr);
    return ret;
  }

  public virtual bool unburrow() {
    bool ret = bwapiPINVOKE.Unit_unburrow(swigCPtr);
    return ret;
  }

  public virtual bool cloak() {
    bool ret = bwapiPINVOKE.Unit_cloak(swigCPtr);
    return ret;
  }

  public virtual bool decloak() {
    bool ret = bwapiPINVOKE.Unit_decloak(swigCPtr);
    return ret;
  }

  public virtual bool siege() {
    bool ret = bwapiPINVOKE.Unit_siege(swigCPtr);
    return ret;
  }

  public virtual bool unsiege() {
    bool ret = bwapiPINVOKE.Unit_unsiege(swigCPtr);
    return ret;
  }

  public virtual bool lift() {
    bool ret = bwapiPINVOKE.Unit_lift(swigCPtr);
    return ret;
  }

  public virtual bool land(TilePosition target) {
    bool ret = bwapiPINVOKE.Unit_land(swigCPtr, TilePosition.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool load(Unit target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_load__SWIG_0(swigCPtr, Unit.getCPtr(target), shiftQueueCommand);
    return ret;
  }

  public virtual bool load(Unit target) {
    bool ret = bwapiPINVOKE.Unit_load__SWIG_1(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool unload(Unit target) {
    bool ret = bwapiPINVOKE.Unit_unload(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool unloadAll(bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_unloadAll__SWIG_0(swigCPtr, shiftQueueCommand);
    return ret;
  }

  public virtual bool unloadAll() {
    bool ret = bwapiPINVOKE.Unit_unloadAll__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool unloadAll(Position target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_unloadAll__SWIG_2(swigCPtr, Position.getCPtr(target), shiftQueueCommand);
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool unloadAll(Position target) {
    bool ret = bwapiPINVOKE.Unit_unloadAll__SWIG_3(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool rightClick(Position target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_rightClick__SWIG_0(swigCPtr, Position.getCPtr(target), shiftQueueCommand);
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool rightClick(Position target) {
    bool ret = bwapiPINVOKE.Unit_rightClick__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool rightClick(Unit target, bool shiftQueueCommand) {
    bool ret = bwapiPINVOKE.Unit_rightClick__SWIG_2(swigCPtr, Unit.getCPtr(target), shiftQueueCommand);
    return ret;
  }

  public virtual bool rightClick(Unit target) {
    bool ret = bwapiPINVOKE.Unit_rightClick__SWIG_3(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool haltConstruction() {
    bool ret = bwapiPINVOKE.Unit_haltConstruction(swigCPtr);
    return ret;
  }

  public virtual bool cancelConstruction() {
    bool ret = bwapiPINVOKE.Unit_cancelConstruction(swigCPtr);
    return ret;
  }

  public virtual bool cancelAddon() {
    bool ret = bwapiPINVOKE.Unit_cancelAddon(swigCPtr);
    return ret;
  }

  public virtual bool cancelTrain(int slot) {
    bool ret = bwapiPINVOKE.Unit_cancelTrain__SWIG_0(swigCPtr, slot);
    return ret;
  }

  public virtual bool cancelTrain() {
    bool ret = bwapiPINVOKE.Unit_cancelTrain__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual bool cancelMorph() {
    bool ret = bwapiPINVOKE.Unit_cancelMorph(swigCPtr);
    return ret;
  }

  public virtual bool cancelResearch() {
    bool ret = bwapiPINVOKE.Unit_cancelResearch(swigCPtr);
    return ret;
  }

  public virtual bool cancelUpgrade() {
    bool ret = bwapiPINVOKE.Unit_cancelUpgrade(swigCPtr);
    return ret;
  }

  public virtual bool useTech(TechType tech) {
    bool ret = bwapiPINVOKE.Unit_useTech__SWIG_0(swigCPtr, TechType.getCPtr(tech));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool useTech(TechType tech, Position target) {
    bool ret = bwapiPINVOKE.Unit_useTech__SWIG_1(swigCPtr, TechType.getCPtr(tech), Position.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool useTech(TechType tech, Unit target) {
    bool ret = bwapiPINVOKE.Unit_useTech__SWIG_2(swigCPtr, TechType.getCPtr(tech), Unit.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool placeCOP(TilePosition target) {
    bool ret = bwapiPINVOKE.Unit_placeCOP(swigCPtr, TilePosition.getCPtr(target));
    if (bwapiPINVOKE.SWIGPendingException.Pending) throw bwapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
